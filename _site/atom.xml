<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>nyl.io</title>
 <link href="http://www.nyl.io/blog/blog/atom.xml" rel="self"/>
 <link href="http://www.nyl.io/blog/blog/"/>
 <updated>2015-09-07T22:25:10-07:00</updated>
 <id>http://www.nyl.io/blog</id>
 <author>
   <name>Nancy Yi Liang</name>
   <email>hi@nyl.io</email>
 </author>

 
 <entry>
   <title>Hello World Projects</title>
   <link href="http://www.nyl.io/blog/2015/09/hello-world-intro"/>
   <updated>2015-09-07T02:32:45-07:00</updated>
   <id>http://www.nyl.io/blog/blog/2015/09/hello-world-intro</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;https://nyl.ghost.io/content/images/2015/09/helloworld.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The idea behind Hello World Projects is to create simple tutorials that does one simple thing. Usually it involves turning on an LED or displaying “Hello World.”&lt;/p&gt;

&lt;p&gt;These are simple building blocks you can use for more complicated projects. I often find that the simplest tutorial is actually most helpful. The more complex a tutorial gets, the more I have to weed and parse since not all details does not apply to my specific needs.&lt;/p&gt;

&lt;p&gt;First in the series, &lt;a href=&quot;http://blog.nyl.io/hello-world-custom-pcb-fritzing/&quot;&gt;Hello World Custom PCBs (Printed Circuit Boards)&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Got some topic you want to learn about? Let me know in the comments. Or email me at &lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#104;&amp;#105;&amp;#064;&amp;#110;&amp;#121;&amp;#108;&amp;#046;&amp;#105;&amp;#111;&quot;&gt;&amp;#104;&amp;#105;&amp;#064;&amp;#110;&amp;#121;&amp;#108;&amp;#046;&amp;#105;&amp;#111;&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Welcome to Jekyll!</title>
   <link href="http://www.nyl.io/blog/2015/09/welcome-to-jekyll"/>
   <updated>2015-09-07T01:55:45-07:00</updated>
   <id>http://www.nyl.io/blog/blog/2015/09/welcome-to-jekyll</id>
   <content type="html">&lt;p&gt;You’ll find this post in your &lt;code&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Tom&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &amp;#39;Hi, Tom&amp;#39; to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://github.com/jekyll/jekyll-help&quot;&gt;Jekyll’s dedicated Help repository&lt;/a&gt;.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Hello World: Design PCBs with Fritzing</title>
   <link href="http://www.nyl.io/blog/2015/09/hello-world-custom-pcb-fritzing"/>
   <updated>2015-09-05T16:26:00-07:00</updated>
   <id>http://www.nyl.io/blog/blog/2015/09/hello-world-custom-pcb-fritzing</id>
   <content type="html">&lt;h5 id=&quot;this-post-is-part-of-the-hello-world-projectshelloworld&quot;&gt;This post is part of the &lt;a href=&quot;/helloworld&quot;&gt;Hello World Projects&lt;/a&gt;.&lt;/h5&gt;

&lt;hr /&gt;

&lt;p&gt;The simple breadboard with a messy, beautiful rainbow of wires sticking this way and that. Easy enough! But now, how does one tidy things up?&lt;/p&gt;

&lt;p&gt;Why, &lt;strong&gt;printed circuit boards&lt;/strong&gt;, of course! You know, those green things with lines all over them. Don’t worry. It’s not that hard. Meet Fritzing, your friendly PCB designer. &lt;a href=&quot;http://fritzing.org/download/&quot;&gt;Fritzing&lt;/a&gt; is kind of like LEGOs of PCB design.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://fritzing.org/download/&quot;&gt;Download Fritzing Here.&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;guide-step&quot;&gt;
  &lt;div class=&quot;guide-images&quot;&gt;
    &lt;img src=&quot;/content/images/2015/09/breadboard1_an.png&quot; data-caption=&quot;breadboard view&quot; /&gt;
    &lt;img src=&quot;/content/images/2015/09/breadboard2.png&quot; data-caption=&quot;components added&quot; /&gt;
    &lt;img src=&quot;/content/images/2015/09/breadboard3_an-1.png&quot; data-caption=&quot;changing wire colors &amp;amp; adding bend points&quot; /&gt;
  &lt;/div&gt;
  &lt;div class=&quot;guide-text&quot;&gt;
    &lt;h2 class=&quot;guide-title&quot;&gt;Step 1: Breadboard Layout&lt;/h2&gt;
    &lt;ul&gt;
      &lt;li&gt;Open Fritzing&lt;/li&gt;
      &lt;li&gt;Add components to the workspace&lt;/li&gt;
      &lt;li&gt;Click and drag to add wires&lt;/li&gt;
      &lt;li&gt;Change wire colors&lt;/li&gt;
      &lt;li&gt;Add bend points to wires by clicking &amp;amp; dragging&lt;/li&gt;
    &lt;/ul&gt;
    Bonus: Take a screenshot or save as image file--helpful for sharing projects or documenting your work. 
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;guide-step&quot;&gt;
  &lt;div class=&quot;guide-images&quot;&gt;
    &lt;img src=&quot;/content/images/2015/09/pcb1_an.png&quot; data-caption=&quot;default view&quot; /&gt;
    &lt;img src=&quot;/content/images/2015/09/pcb_an.png&quot; data-caption=&quot;&quot; /&gt;
    &lt;img src=&quot;/content/images/2015/09/pcb_via-1.png&quot; data-caption=&quot;vias&quot; /&gt;
    &lt;img src=&quot;/content/images/2015/09/pcb3.jpg&quot; data-caption=&quot;click on any point to see where the trace hits&quot; /&gt;
  &lt;/div&gt;
  &lt;div class=&quot;guide-text&quot;&gt;
    &lt;h2 class=&quot;guide-title&quot;&gt;Step 2: Design the PCB&lt;/h2&gt;
    &lt;strong&gt;1. Click the PCB tab&lt;/strong&gt;&lt;br /&gt;
    &lt;strong&gt;2. Route wires&lt;/strong&gt; so the traces don't cross
    &lt;ul&gt;
      &lt;li&gt;Drag dotted lines to make traces&lt;/li&gt;
      &lt;li&gt;Right click trace to move trace between layers&lt;/li&gt;
      &lt;li&gt;Right click bend point to make a via, which connects the two layers&lt;/li&gt;
      &lt;li&gt;Click on bendpoints or connection points to see where the trace travels&lt;/li&gt;
    &lt;/ul&gt;

    &lt;strong&gt;3. Resize the board&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Drag corners of the board&lt;/li&gt;
    &lt;/ul&gt;

    &lt;strong&gt;4. Adjust the text&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Click the component, you'll see dotted lines around the component&lt;/li&gt;
      &lt;li&gt;Drag label to reposition&lt;/li&gt;
      &lt;li&gt;Right click to change rotation&lt;/li&gt;
      &lt;li&gt;Double click to change the text&lt;/li&gt;
    &lt;/ul&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;guide-step&quot;&gt;
  &lt;div class=&quot;guide-images&quot;&gt;
    &lt;img src=&quot;/content/images/2015/09/pcb8_routing.jpg&quot; data-caption=&quot;routing options&quot; /&gt;
    &lt;img src=&quot;/content/images/2015/09/pcb8_view.jpg&quot; data-caption=&quot;view options&quot; /&gt;
  &lt;/div&gt;
  &lt;div class=&quot;guide-text&quot;&gt;
    &lt;h3 class=&quot;guide-title&quot;&gt;Additional Options&lt;/h3&gt;
    &lt;strong&gt;Routing options&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Design rule check: always use this before sending PCB to fab&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;Autorouter/design rule settings&lt;/li&gt;
      &lt;li&gt;Autoroute: I don't use this much&lt;/li&gt;
    &lt;/ul&gt;
    &lt;strong&gt;View options&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Set Grid Size&lt;/li&gt;
      &lt;li&gt;Align to Grid: snaps wires/components to the grid&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;guide-step&quot;&gt;
  &lt;div class=&quot;guide-images&quot;&gt;
    &lt;img src=&quot;/content/images/2015/09/pcb9.jpg&quot; data-caption=&quot;&quot; /&gt;
    &lt;img src=&quot;/content/images/2015/09/finder.jpg&quot; data-caption=&quot;zip up all gerber files&quot; /&gt;
  &lt;/div&gt;
  &lt;div class=&quot;guide-text&quot;&gt;
    &lt;h2 class=&quot;guide-title&quot;&gt;Step 3. Export Gerber File&lt;/h2&gt;
    &lt;ul&gt;
      &lt;li&gt;Click arrow next to &quot;Export to PCB&quot;&lt;/li&gt;
      &lt;li&gt;Click &quot;Extended Gerber&quot;&lt;/li&gt;
      &lt;li&gt;Zip all Gerber Files for uploading to PCB factory&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;guide-step&quot;&gt;
  &lt;div class=&quot;guide-images&quot;&gt;
    &lt;img src=&quot;/content/images/2015/09/oshpark.png&quot; data-caption=&quot;&quot; /&gt;
    &lt;img src=&quot;/content/images/2015/09/oshpark2_an.png&quot; data-caption=&quot;&quot; /&gt;
  &lt;/div&gt;
  &lt;div class=&quot;guide-text&quot;&gt;
    &lt;h2 class=&quot;guide-title&quot;&gt;Step 4. Order PCBs from a Service Provider&lt;/h2&gt;
    I like &lt;a href=&quot;http://oshpark.com&quot;&gt;OSHPark&lt;/a&gt;. They are a bit slow (~2 weeks to Seattle), but very cheap for small boards ($5/inch2).
  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&quot;other-pcb-prototyping-companies&quot;&gt;Other PCB Prototyping Companies&lt;/h2&gt;

&lt;p&gt;I did a few searches, and found some good options. These are quotes based on shipping a 2 layer 1.5x1.7 inch board to Seattle, WA. Actual mileage may vary depending on your design and location.&lt;/p&gt;

&lt;table style=&quot;font-size: 0.75em&quot;&gt;
&lt;tr style=&quot;font-weight: bold&quot;&gt;&lt;td&gt;Company&lt;/td&gt;&lt;td&gt;QTY&lt;/td&gt;&lt;td&gt;Lead Time (to Seattle)&lt;/td&gt;&lt;td&gt;Price&lt;/td&gt;&lt;td&gt;Limits/Pricing&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://oshpark.com&quot;&gt;OSHPark&lt;/a&gt;&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;10-14 business days&lt;br /&gt;8-12 production + 2 shipping&lt;/td&gt;&lt;td&gt;$12&lt;br /&gt;$12 PCB + $0 shipping&lt;/td&gt;&lt;td&gt;$5/in&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://pcbnet.com&quot;&gt;PCBNet&lt;/a&gt;&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;9 BDs&lt;br /&gt;5 prod + 4 shipping&lt;/td&gt;&lt;td&gt;$25&lt;br /&gt;$25 PCB + $0 shipping&lt;/td&gt;&lt;td&gt;under 60in&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://imall.iteadstudio.com&quot;&gt;ITEAD&lt;/a&gt;&lt;/td&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;6 BDs&lt;br /&gt;4 prod + 2 shipping&lt;/td&gt;&lt;td&gt;$28&lt;br /&gt;$10 PCB + $18 shipping&lt;/td&gt;&lt;td&gt;under 5x5cm&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://imall.iteadstudio.com&quot;&gt;ITEAD&lt;/a&gt;&lt;/td&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;20 BDs (could be longer)&lt;br /&gt;4 prod + 16-? shipping&lt;/td&gt;&lt;td&gt;$15&lt;br /&gt;$10 PCB + $5 shipping&lt;/td&gt;&lt;td&gt;under 5x5cm&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://seeedstudio.com&quot;&gt;SeeedStudio&lt;/a&gt;&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;18-48 BDs&lt;br /&gt;3 prod + 15-45 shipping&lt;/td&gt;&lt;td&gt;$15&lt;br /&gt;$10 PCB + $5 shipping&lt;/td&gt;&lt;td&gt;under 5x5cm&lt;sup&gt;2&amp;lt;/sup
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://seeedstudio.com&quot;&gt;SeeedStudio&lt;/a&gt;&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;5 BDs&lt;br /&gt;3 production + 2 shipping&lt;/td&gt;&lt;td&gt;$40&lt;br /&gt;$10 PCB + $30 shipping&lt;/td&gt;&lt;td&gt;under 5x5cm&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://fr.com&quot;&gt;Fritzing&lt;/a&gt;&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;17-25 BDs&lt;br /&gt;7-11 production + 10-14 shipping&lt;/td&gt;&lt;td&gt;$21&lt;br /&gt;$17 PCB + $4 shipping&lt;/td&gt;&lt;td&gt;$5.20 + $0.96/cm&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt;&lt;/tr&gt;


You can also use [PCB Shopper](http://pcbshopper.com/) to compare price and lead time across other manufacturers. Though, I've found that some of the prices are off. Especially shipping prices, which can account for a good chunk when ordering small batches from China. 

Cool? Cool. Now go make things. 

&lt;/sup&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
</content>
 </entry>
 
 <entry>
   <title>Hello World Projects, an Intro</title>
   <link href="http://www.nyl.io/blog/2015/09/helloworld"/>
   <updated>2015-09-04T16:26:00-07:00</updated>
   <id>http://www.nyl.io/blog/blog/2015/09/helloworld</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;https://nyl.ghost.io/content/images/2015/09/helloworld.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The idea behind Hello World Projects is to create simple tutorials that does one simple thing. Usually it involves turning on an LED or displaying “Hello World.”&lt;/p&gt;

&lt;p&gt;These are simple building blocks you can use for more complicated projects. I often find that the simplest tutorial is actually most helpful. The more complex a tutorial gets, the more I have to weed and parse since not all details does not apply to my specific needs.&lt;/p&gt;

&lt;p&gt;First in the series, &lt;a href=&quot;http://blog.nyl.io/hello-world-custom-pcb-fritzing/&quot;&gt;Hello World Custom PCBs (Printed Circuit Boards)&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Got some topic you want to learn about? Let me know in the comments. Or email me at &lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#104;&amp;#105;&amp;#064;&amp;#110;&amp;#121;&amp;#108;&amp;#046;&amp;#105;&amp;#111;&quot;&gt;&amp;#104;&amp;#105;&amp;#064;&amp;#110;&amp;#121;&amp;#108;&amp;#046;&amp;#105;&amp;#111;&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Milling PCBs</title>
   <link href="http://www.nyl.io/blog/2015/08/milling-pcbs"/>
   <updated>2015-08-25T06:03:30-07:00</updated>
   <id>http://www.nyl.io/blog/blog/2015/08/milling-pcbs</id>
   <content type="html">&lt;p&gt;Well, the nice folks at &lt;a href=&quot;http://sodo.ms&quot;&gt;SoDo MakerSpace&lt;/a&gt; got me started on the CNC Mill and Laser Cutter.&lt;/p&gt;

&lt;p&gt;I used the smaller mill, a Shapeoko 2, to mill some PCBs. And by “some,” I mean “one.” Well, the first one broke into a hot mess. So I guess it was “some” after all. Don’t get too excited, ‘twas  but a simple hello world PCB (read: Battery &amp;gt; Resistor &amp;gt; LED).&lt;/p&gt;

&lt;p&gt;I used &lt;a href=&quot;www.richa1.com/RichardAlbritton/create-g-code-from-an-eagle-file/&quot;&gt;Richard Albritton’s PCB-GCode Tutorial&lt;/a&gt;. PCB-Gcode is an Eagle add on. Yes. This means you need EagleCAD. The add on outputs to GCode, which the CNC can understand. There’s a bunch of settings that Richard has fiddled around and tweaked for optimum optimumcy for the Shapeoko 2.&lt;/p&gt;

&lt;p&gt;And drumroll……&lt;/p&gt;

&lt;h3 id=&quot;top-layer-copper-path-outline&quot;&gt;Top Layer Copper Path Outline&lt;/h3&gt;

&lt;p&gt;bzzzzzz bzzzzzzz&lt;/p&gt;

&lt;iframe class=&quot;macdown-hide imgur-embed&quot; width=&quot;100%&quot; height=&quot;404&quot; frameborder=&quot;0&quot; src=&quot;http://i.imgur.com/Aiqasn9.gifv#embed&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;drilling-through-holes&quot;&gt;Drilling Through Holes&lt;/h3&gt;

&lt;p&gt;boop! boop! boop!&lt;/p&gt;

&lt;iframe class=&quot;macdown-hide imgur-embed&quot; width=&quot;100%&quot; height=&quot;404&quot; frameborder=&quot;0&quot; src=&quot;http://i.imgur.com/bRqK82h.gifv#embed&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;bottom-layer-copper-path-outline&quot;&gt;Bottom Layer Copper Path Outline&lt;/h3&gt;

&lt;p&gt;Say what?! Yup! I did a two layer PCB with two tiny vias. I wanted to see if I can do a two sided PCB b/c I’m not patient enough to just route with one side.&lt;/p&gt;

&lt;iframe class=&quot;macdown-hide imgur-embed&quot; width=&quot;100%&quot; height=&quot;404&quot; frameborder=&quot;0&quot; src=&quot;http://i.imgur.com/h7XIdB2.gifv#embed&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;and-it-works&quot;&gt;… and it works!&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/08/ledmill_front.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/08/ledmill_back.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;zomg-its-a-close-up&quot;&gt;ZOMG IT’S A CLOSE UP!&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/08/ledmill_02.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The routes are 16 mils, and it measures pretty accurate. Hooray!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I’m starting to use Eagle for a few things, and I know it’s the more “professional” choice, but man do I enjoying using Fritzing!&lt;/p&gt;

&lt;p&gt;So next up, using Fritzing to generate millable SVGs. Maybe even see if my bits has enough resolution to mill an Intel Edison breakout. Gasp.&lt;/p&gt;

&lt;p&gt;Stay tuned dot dot dot.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Dogfood</title>
   <link href="http://www.nyl.io/blog/2015/08/dogfood"/>
   <updated>2015-08-05T15:09:58-07:00</updated>
   <id>http://www.nyl.io/blog/blog/2015/08/dogfood</id>
   <content type="html">&lt;blockquote&gt;
  &lt;p&gt;Eating your own dog food, also called dogfooding, is a slang term used to reference a scenario in which a company uses its own product to validate the quality and capabilities of the product. — &lt;a href=&quot;http://en.wikipedia.org/wiki/Eating_your_own_dog_food&quot;&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/08/dogfood-1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When I design products, I make an effort to regularly use the products I make. If I write a platform or &lt;a href=&quot;http://blog.nyl.io/guidejs/&quot;&gt;library&lt;/a&gt;, I &lt;a href=&quot;http://blog.nyl.io/esp8266-led-using-guide-js/&quot;&gt;use it myself&lt;/a&gt;. It’s something so obvious, but surprisingly uncommon.&lt;/p&gt;

&lt;h3 id=&quot;knowing-the-community&quot;&gt;Knowing the Community&lt;/h3&gt;

&lt;p&gt;One side effect of eating your own dogfood is that you become a part of the community. You are using the same products, sharing the same goals, and it’s just easier to connect with your community that way.&lt;/p&gt;

&lt;p&gt;Being a part of the community opens you up to a world of insights. They can provide feedback and ideas that you’d never come across just by yourself.&lt;/p&gt;

&lt;h3 id=&quot;personalize-the-pain&quot;&gt;Personalize the Pain&lt;/h3&gt;

&lt;p&gt;Pain avoidance is a great motivator. We can’t help it. We are evolutionarily wired to avoid things that cause us pain. It’s how we learn to not stick our hands in the fire even though it looks so pretty.&lt;/p&gt;

&lt;p&gt;Taken with the point above (“Knowing the Community”), you aren’t just solving pain for yourself, but also for your friends. It works for both selfish and unselfish people.&lt;/p&gt;

&lt;h3 id=&quot;quicker-product-development&quot;&gt;Quicker Product Development&lt;/h3&gt;

&lt;p&gt;Dogfooding also enables you to develop product at a quicker pace. Rather than talking to customers for every minor tweak or product decision, you can reflect on your own experience, anecdotes and observations from being a part of and interacting with members of the community. It’s just easier for the left brain to talk with the right brain than to conduct a focus group, and quicker, and easier.&lt;/p&gt;

&lt;p&gt;Of course, the flip side is to not get too cocky about all of this. There’s still a lot that you don’t know. Move quickly. Remain curious. Confidence is arrogance with a healthy dose of curiosity.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;Every designer and product manager should use their own products. Not &lt;em&gt;try&lt;/em&gt; their own products, but actually &lt;em&gt;use&lt;/em&gt; it. It will make your lives easier.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Ghost Hack</title>
   <link href="http://www.nyl.io/blog/2015/08/ghost-hack-markdown-in-div"/>
   <updated>2015-08-04T04:06:27-07:00</updated>
   <id>http://www.nyl.io/blog/blog/2015/08/ghost-hack-markdown-in-div</id>
   <content type="html">&lt;p&gt;One of the good things about markdown is it lets you interject HTML in the middle. So far example,&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;
&lt;div class=&quot;red&quot;&gt;I'm red&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;I’m bold&lt;/strong&gt;
```&lt;/p&gt;

&lt;p&gt;Gives you something like:&lt;/p&gt;
&lt;div class=&quot;red&quot;&gt;I'm red&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;I’m bold&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;the-problem&quot;&gt;The Problem&lt;/h2&gt;
&lt;p&gt;Here’s the problem though, when you are writing in html, you can’t switch back to Markdown. So for content in a div, you can’t take care of all the ==cool== &lt;em&gt;markdown&lt;/em&gt; styles.&lt;/p&gt;

&lt;p&gt;So, for example,&lt;/p&gt;

&lt;p&gt;```
&lt;strong&gt;I’m bold&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;red&quot;&gt;**I'm not bold, still red though**&lt;/div&gt;
&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;will give you:&lt;/p&gt;

&lt;div class=&quot;red&quot;&gt;**I'm not bold, still red though**&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;I’m bold&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;installation-markdown-in-div-preprocessor&quot;&gt;Installation: Markdown-in-Div Preprocessor&lt;/h2&gt;

&lt;p&gt;So I made a small Markdown preprocessor. It basically uses img tags to store div info. I use img tags because it doesn’t require closing tags.&lt;/p&gt;

&lt;p&gt;Copy/paste this in after jQuery in the header but before anything that moves around elements or add elements to the HTML.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
&amp;lt;script&amp;gt;
    // Markdown In Div
    $(document).ready(function() {
        html = $(&quot;.post-content&quot;).html().replace(/&amp;lt;img src=&quot;start:/g, '&amp;lt;div class=&quot;')
            .replace(/&amp;lt;img src=&quot;end&quot; alt=&quot;&quot; title=&quot;&quot;&amp;gt;/g, '&amp;lt;/div&amp;gt;')
        	.replace(/&amp;lt;img src=&quot;end&quot; alt=&quot;&quot;&amp;gt;/g, &quot;&amp;lt;/div&amp;gt;&quot;);
        $(&quot;.post-content&quot;).html(html);
        $(&quot;.post-content&quot;).find(&quot;div&quot;).each(function() {
            class_cleaned = $(this).attr(&quot;class&quot;).replace(&quot;&amp;amp;&quot;, &quot; &quot;);
            $(this).attr(&quot;class&quot;, class_cleaned)
        })
    })
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;example-usage&quot;&gt;Example Usage&lt;/h2&gt;

&lt;p&gt;Now, when you want to open close tag, you can use&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
 ![](start:red)
 this should be red ==with== *formatting*!
 ![](http://)
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will become:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;start:red&quot; alt=&quot;&quot; /&gt;
 this should be red ==with== &lt;em&gt;formatting&lt;/em&gt;!
 &lt;img src=&quot;end&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ooooo… Markdown in a Div ~~using~~ hacking the img tag.&lt;/p&gt;

&lt;p&gt;Spiffy!&lt;/p&gt;

&lt;style&gt;
.red { color: #f00; }
&lt;/style&gt;

</content>
 </entry>
 
 <entry>
   <title>Wifi Connected LED using Guide.js</title>
   <link href="http://www.nyl.io/blog/2015/08/esp8266-led-using-guide-js"/>
   <updated>2015-08-02T19:22:57-07:00</updated>
   <id>http://www.nyl.io/blog/blog/2015/08/esp8266-led-using-guide-js</id>
   <content type="html">&lt;p&gt;I wasn’t kidding when I said I’d use &lt;a href=&quot;https://github.com/neuralfirings/guide&quot;&gt;Guide.js&lt;/a&gt;, my new framework for writing guides and tutorials. Here’s a rewrite of my ESP8266 to LED tutorial. I think it’s much neater than the &lt;a href=&quot;http://blog.nyl.io/esp8266-led-arduino/&quot;&gt;previous version&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;guide-step&quot;&gt;  
  &lt;div class=&quot;guide-main&quot;&gt;
&lt;iframe class=&quot;imgur-embed&quot; width=&quot;100%&quot; height=&quot;360&quot; frameborder=&quot;0&quot; src=&quot;http://i.imgur.com/GfD93zj.gifv#embed&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;div class=&quot;guide-text&quot;&gt;
&lt;h2 class=&quot;guide-title&quot;&gt;Ingredients&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://amzn.to/1Lu6QHu&quot;&gt;ESP8266-01 Wifi Module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://amzn.to/1OIMPLp&quot;&gt;White LED&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://amzn.to/1ISi1tf&quot;&gt;FTDI Cable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://amzn.to/1OXGV9W&quot;&gt;Lipo 3.7V Battery&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;guide-step&quot;&gt;  
  &lt;div class=&quot;guide-images&quot;&gt;
    &lt;img src=&quot;http://blog.nyl.io/content/images/2015/07/esp_led_dataflow.png&quot; data-caption=&quot;Diagram of Workflow&quot; /&gt;
  &lt;/div&gt;
  &lt;div class=&quot;guide-text&quot;&gt;
    &lt;h2 class=&quot;guide-title&quot;&gt;Workflow&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;PHP page writes on/off instructions to JSON file based on user input&lt;/li&gt;
&lt;li&gt;ESP8266 pings light.json, reads instructions, and turns on/off led&amp;lt;/li&amp;lt;

  




&lt;div class=&quot;guide-step&quot;&gt;  
  &lt;div class=&quot;guide-main&quot;&gt;
```
$ sudo nano light.json
$ chmod 755 -R light.json
```
  &lt;/div&gt;
  &lt;div class=&quot;guide-text&quot;&gt;
    &lt;h2 class=&quot;guide-title&quot;&gt;Step 1: Create JSON using Shell Scripts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;go to the directory of your PHP file&lt;/li&gt;
&lt;li&gt;create light.json&lt;/li&gt;
&lt;li&gt;assigns permission so index.php can write to it&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;guide-step&quot;&gt;  
  &lt;div class=&quot;guide-main&quot;&gt;
```
&lt;?php  
$light = $_GET['light'];
if($light == &quot;on&quot;) {  
  $file = fopen(&quot;light.json&quot;, &quot;w&quot;) or die(&quot;can't open file&quot;);
  fwrite($file, '{&quot;light&quot;: &quot;on&quot;}');
  fclose($file);
} 
else if ($light == &quot;off&quot;) {  
  $file = fopen(&quot;light.json&quot;, &quot;w&quot;) or die(&quot;can't open file&quot;);
  fwrite($file, '{&quot;light&quot;: &quot;off&quot;}');
  fclose($file);
}
?&gt;

&lt;a href=&quot;?light=on&quot;&gt;Turn On&lt;/a&gt;  
&lt;a href=&quot;?light=off&quot;&gt;Turn Off&lt;/a&gt;  
&lt;div&gt;  
  &lt;?php
    if($light==&quot;on&quot;) {
      echo(&quot;Turn LED on.&quot;);
    }
    else if ($light==&quot;off&quot;) {
      echo(&quot;Turn LED off.&quot;);
    }
    else {
      echo (&quot;Do something.&quot;);
    }
  ?&gt;
&lt;/div&gt;  
```
  &lt;/div&gt;
  &lt;div class=&quot;guide-text&quot;&gt;
    &lt;h2 class=&quot;guide-title&quot;&gt;Step 2: PHP &lt;small&gt;&lt;a href=&quot;https://raw.githubusercontent.com/neuralfirings/esp8266led/master/www/index.php&quot;&gt;&lt;i class=&quot;fa fa-cloud-download&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/small&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Button links to page with url parameters light=on or light=off&lt;/li&gt;
&lt;li&gt;PHP looks for URL parameters and writes to light.json&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;div class=&quot;guide-step&quot;&gt;  
  &lt;div class=&quot;guide-images&quot;&gt;
    &lt;img src=&quot;http://blog.nyl.io//content/images/2015/08/espled_flashmode.png&quot; data-caption=&quot;&quot; /&gt;
  &lt;/div&gt;
  &lt;div class=&quot;guide-text&quot;&gt;
    &lt;h2 class=&quot;guide-title&quot;&gt;Step 3. Wire Things Up in Flash Mode&lt;/h2&gt;
    

&lt;ul&gt;
&lt;li&gt;ESP's VCC &amp;gt; VCC&lt;/li&gt;
&lt;li&gt;ESP's CH_PD &amp;gt; VCC&lt;/li&gt;
&lt;li&gt;ESP's GND &amp;gt; GND&lt;/li&gt;
&lt;li&gt;ESP's RX &amp;gt; FTDI's TX&lt;/li&gt;
&lt;li&gt;ESP's TX &amp;gt; FTDI's RX&lt;/li&gt;
&lt;li&gt;ESP's GPIO0 &amp;gt; GND&lt;br /&gt;(indicate flash mode)&lt;/li&gt;
&lt;li&gt;LED's GND &amp;gt; GND&lt;/li&gt;
&lt;li&gt;LED's PWR &amp;gt; ESP's GPIO2&lt;/li&gt;
&lt;/ul&gt;

  &lt;/div&gt;
&lt;/div&gt;


&lt;div class=&quot;guide-step&quot;&gt;  
  &lt;div class=&quot;guide-images&quot;&gt;
    &lt;img src=&quot;http://blog.nyl.io/content/images/2015/07/arduino_pref.jpg&quot; data-caption=&quot;Install ESP: Preferences&quot; /&gt;
    &lt;img src=&quot;http://blog.nyl.io/content/images/2015/07/arduino_boardmanagerurl.jpg&quot; data-caption=&quot;Install ESP: Add Board Manager URL&quot; /&gt;

    &lt;img src=&quot;http://blog.nyl.io/content/images/2015/08/arduino_esp_setup.jpg&quot; data-caption=&quot;Install ESP: Set Options for ESP8266&quot; /&gt;

  &lt;/div&gt;
  &lt;div class=&quot;guide-text&quot;&gt;
    &lt;h2 class=&quot;guide-title&quot;&gt;Step 4. Install ESP in the Arduino IDE&lt;/h2&gt;

Install ESP8266 Board
&lt;ul&gt;
&lt;li&gt; Go to preferences&lt;/li&gt;
&lt;li&gt; Copy &lt;a href=&quot;http://arduino.esp8266.com/package_esp8266com_index.json&quot;&gt;this link's url&lt;/a&gt; into &quot;Additional Board Manager URLs&quot; box&lt;/li&gt;
&lt;li&gt;Click OK&lt;/li&gt;
&lt;/ul&gt;
Update Settings
&lt;ul&gt;
&lt;li&gt;Board: Generic ESP8266&lt;/li&gt;
&lt;li&gt;CPU Frequency: 80 MHz&lt;/li&gt;
&lt;li&gt;Flash size: 4M&lt;/li&gt;
&lt;li&gt;Upload speed: 115200&lt;/li&gt;
&lt;li&gt;Port: my USB port (this shows up once you plugged everything in)&lt;/li&gt;
&lt;li&gt;Programmer: AVRISP mkll&lt;/li&gt;
&lt;/ul&gt;


  &lt;/div&gt;
&lt;/div&gt;



&lt;div class=&quot;guide-step&quot;&gt;  
  &lt;div class=&quot;guide-main&quot;&gt;

```
#include &lt;esp8266wifi.h&gt;
#include &lt;arduinojson.h&gt;

const char* ssid     = &quot;&quot;;  
const char* password = &quot;&quot;;

const char* host     = &quot;&quot;; // Your domain  
String path          = &quot;/path/to/light.json&quot;;  
const int pin        = 2;

void setup() {  
  pinMode(pin, OUTPUT); 
  pinMode(pin, HIGH);
  Serial.begin(115200);

  delay(10);
  Serial.print(&quot;Connecting to &quot;);
  Serial.println(ssid);

  WiFi.begin(ssid, password);
  int wifi_ctr = 0;
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(&quot;.&quot;);
  }

  Serial.println(&quot;WiFi connected&quot;);  
  Serial.println(&quot;IP address: &quot; + WiFi.localIP());
}

void loop() {  
  Serial.print(&quot;connecting to &quot;);
  Serial.println(host);
  WiFiClient client;
  const int httpPort = 80;
  if (!client.connect(host, httpPort)) {
    Serial.println(&quot;connection failed&quot;);
    return;
  }

  client.print(String(&quot;GET &quot;) + path + &quot; HTTP/1.1\r\n&quot; +
               &quot;Host: &quot; + host + &quot;\r\n&quot; + 
               &quot;Connection: keep-alive\r\n\r\n&quot;);

  delay(500); // wait for server to respond

  // read response
  String section=&quot;header&quot;;
  while(client.available()){
    String line = client.readStringUntil('\r');
    // Serial.print(line);
    // we’ll parse the HTML body here
    if (section==&quot;header&quot;) { // headers..
      Serial.print(&quot;.&quot;);
      if (line==&quot;\n&quot;) { // skips the empty space at the beginning 
        section=&quot;json&quot;;
      }
    }
    else if (section==&quot;json&quot;) {  // print the good stuff
      section=&quot;ignore&quot;;
      String result = line.substring(1);

      // Parse JSON
      int size = result.length() + 1;
      char json[size];
      result.toCharArray(json, size);
      StaticJsonBuffer&amp;lt;200&amp;gt; jsonBuffer;
      JsonObject&amp;amp; json_parsed = jsonBuffer.parseObject(json);
      if (!json_parsed.success())
      {
        Serial.println(&quot;parseObject() failed&quot;);
        return;
      }

      // Make the decision to turn off or on the LED
      if (strcmp(json_parsed[&quot;light&quot;], &quot;on&quot;) == 0) {
        digitalWrite(pin, HIGH); 
        Serial.println(&quot;LED ON&quot;);
      }
      else {
        digitalWrite(pin, LOW);
        Serial.println(&quot;led off&quot;);
      }
    }
  }
  Serial.print(&quot;closing connection. &quot;);
}  
```

  
  &lt;div class=&quot;guide-text&quot;&gt;
    &lt;h2 class=&quot;guide-title&quot;&gt;Step 5: Arduino Code &lt;small&gt;&lt;a href=&quot;https://raw.githubusercontent.com/neuralfirings/esp8266led/master/arduino/part2_parseresponse/part2_parseresponse.ino&quot;&gt;&lt;i class=&quot;fa fa-cloud-download&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/small&gt;&lt;/h2&gt;


&lt;ul&gt;
&lt;li&gt;Connect to Wifi&lt;/li&gt;
&lt;li&gt;Read light.json file&lt;/li&gt;
&lt;li&gt;Parse the JSON&lt;/li&gt;
&lt;li&gt;Turn on/off LED&lt;/li&gt;
&lt;/ul&gt;

  &lt;/div&gt;





&lt;div class=&quot;guide-step&quot;&gt;  
  &lt;div class=&quot;guide-images&quot;&gt;
    &lt;img src=&quot;http://blog.nyl.io/content/images/2015/07/esp8266_led_battery_bb.png&quot; data-caption=&quot;&quot; /&gt;
  &lt;/div&gt;
  &lt;div class=&quot;guide-text&quot;&gt;
    &lt;h2 class=&quot;guide-title&quot;&gt;Step 6. Wire Things Up in Run Mode&lt;/h2&gt;
    

&lt;ul&gt;
&lt;li&gt;ESP's VCC &amp;gt; VCC&lt;/li&gt;
&lt;li&gt;ESP's CH_PD &amp;gt; VCC&lt;/li&gt;
&lt;li&gt;ESP's GND &amp;gt; GND&lt;/li&gt;
&lt;li&gt;LED's GND &amp;gt; GND&lt;/li&gt;
&lt;li&gt;LED's PWR &amp;gt; ESP's GPIO2&lt;/li&gt;
&lt;/ul&gt;

  &lt;/div&gt;
&lt;/div&gt;

## Next Steps

There you have it! Not bad. I like it much better than the old, unorganized version. A few things I'd like to add:

* Table of Contents and the ability to link to various sections
* A way to parse this using Markdown, HTML is just... sigh...
* A way to have a carousel of images combined with code, iframes, and other custom elements
* Wrap all the guide-step classes in a guide class, then add things for displaying intro descriptions, ingredients lists, TOC, etc.

Ok. Now go make stuff.
&lt;/arduinojson.h&gt;&lt;/esp8266wifi.h&gt;&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>My Scrappy Guide.js</title>
   <link href="http://www.nyl.io/blog/2015/08/guidejs"/>
   <updated>2015-08-02T17:43:45-07:00</updated>
   <id>http://www.nyl.io/blog/blog/2015/08/guidejs</id>
   <content type="html">&lt;p&gt;Project Github Link: https://github.com/neuralfirings/guide&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Over the past few posts, I’ve written some guides and tutorials on using the &lt;a href=&quot;http://blog.nyl.io/tag/esp8266/&quot;&gt;ESP8266 chip&lt;/a&gt;. People who read it seems to like I would like to continue publishing more of these as I venture into different hardware &amp;amp; software projects.&lt;/p&gt;

&lt;p&gt;Some projects I’d like to try: Internet Controlled Motor (continued), Keychain/Pendant Gameboy emulator, Alternative Reality App, and so on. As I go through these projects, I visit tutorial sites because the internet is how I learn things these days. Oftentimes, it’s hard to glance and get a good idea of what to do in the tutorials. Even on my own blog, I don’t think the tutorials and guides I write are that easy to parse.&lt;/p&gt;

&lt;p&gt;So I scrapped together &lt;a href=&quot;https://github.com/neuralfirings/guide&quot;&gt;Guide.js&lt;/a&gt; to make it easier to write iFixit style tutorial guide. I like their style. It forces writers to have clear images. The bullets make it seem less intimidating. The layout makes it easy to scroll through and get a rough idea before you dive in.&lt;/p&gt;

&lt;h4 id=&quot;guide-template-features&quot;&gt;Guide Template Features&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;iFixit Style Guides&lt;/strong&gt;: big images (optional carousel) on the left side and text on the right&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Responsive&lt;/strong&gt;: when the screen is smaller, the title bounce above the images and the image becomes full screen&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Extensible Main Feature&lt;/strong&gt;: Have a step that doesn’t involve images? That’s fine too. You can put whatever you want as the “main feature” of a given step&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;example-1-simple-image-based-guide&quot;&gt;Example 1: Simple Image Based Guide&lt;/h2&gt;
&lt;div class=&quot;guide-step&quot;&gt;
  &lt;div class=&quot;guide-images&quot;&gt;
    &lt;img src=&quot;http://www.nyl.io/guide/01_breadboard.jpg&quot; data-caption=&quot;Fritzing Bread Board View&quot; /&gt;
  &lt;/div&gt;
  &lt;div class=&quot;guide-text&quot;&gt;
    &lt;h2 class=&quot;guide-title&quot;&gt;Step 1&lt;/h2&gt;
    &lt;ul&gt;
      &lt;li&gt;Open Fritzing&lt;/li&gt;
      &lt;li&gt;Make sure you're in BreadBoard View&lt;/li&gt;
      &lt;li&gt;Search for components and drag in to mimic your setup&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;guide-step&quot;&gt;
  &lt;div class=&quot;guide-images&quot;&gt;
    &lt;img src=&quot;http://www.nyl.io/guide/02a_pcb_airwires.jpg&quot; data-caption=&quot;Fritzing PCB View: Airwires&quot; /&gt;
    &lt;img src=&quot;http://www.nyl.io/guide/02b_pcb_routed.jpg&quot; data-caption=&quot;All airwires are routed and board is resized&quot; /&gt;
  &lt;/div&gt;
  &lt;div class=&quot;guide-text&quot;&gt;
    &lt;h2 class=&quot;guide-title&quot;&gt;Step 2&lt;/h2&gt;
    &lt;ul&gt;
      &lt;li&gt;Switch to PCB Tab&lt;/li&gt;
      &lt;li&gt;Click on components and use Cmd+R/Ctrl+R to rotate&lt;/li&gt;
      &lt;li&gt;You can drag components around by holding down the left mouse button&lt;/li&gt;
      &lt;li&gt;Click on the wires to route and add bendpoints&lt;/li&gt;
      &lt;li&gt;Resize the board appropriately&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h4 id=&quot;the-code&quot;&gt;The Code&lt;/h4&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;div class=&quot;guide-step&quot;&gt;
  &lt;div class=&quot;guide-images&quot;&gt;
    &lt;img src=&quot;http://www.nyl.io/guide/01_breadboard.jpg&quot; data-caption=&quot;Fritzing Bread Board View&quot; /&gt;
  &lt;/div&gt;
  &lt;div class=&quot;guide-text&quot;&gt;
    &lt;h2 class=&quot;guide-title&quot;&gt;Step 1&lt;/h2&gt;
    &lt;ul&gt;
      &lt;li&gt;Open Fritzing&lt;/li&gt;
      &lt;li&gt;Make sure you're in BreadBoard View&lt;/li&gt;
      &lt;li&gt;Search for components and drag in to mimic your setup&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;guide-step&quot;&gt;
  &lt;div class=&quot;guide-images&quot;&gt;
    &lt;img src=&quot;http://www.nyl.io/guide/02a_pcb_airwires.jpg&quot; data-caption=&quot;Fritzing PCB View: Airwires&quot; /&gt;
    &lt;img src=&quot;http://www.nyl.io/guide/02b_pcb_routed.jpg&quot; data-caption=&quot;All airwires are routed and board is resized&quot; /&gt;
  &lt;/div&gt;
  &lt;div class=&quot;guide-text&quot;&gt;
    &lt;h2 class=&quot;guide-title&quot;&gt;Step 2&lt;/h2&gt;
    &lt;ul&gt;
      &lt;li&gt;Switch to PCB Tab&lt;/li&gt;
      &lt;li&gt;Click on components and use Cmd+R/Ctrl+R to rotate&lt;/li&gt;
      &lt;li&gt;You can drag components around by holding down the left mouse button&lt;/li&gt;
      &lt;li&gt;Click on the wires to route and add bendpoints&lt;/li&gt;
      &lt;li&gt;Resize the board appropriately&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;```&lt;/p&gt;

&lt;h2 id=&quot;example-2-using-different-main-components&quot;&gt;Example 2: Using different Main Components&lt;/h2&gt;

&lt;p&gt;If you want something more complex, you can also use the &lt;code&gt;guide-main&lt;/code&gt; class to put in any random thing, like code blocks or presentations (which I do using &lt;a href=&quot;https://github.com/impress/impress.js&quot;&gt;Impress.js&lt;/a&gt;… well, a hacked version I made with some added features like captioning).&lt;/p&gt;

&lt;div class=&quot;guide-step&quot;&gt;
  &lt;div class=&quot;guide-main&quot;&gt;
    &lt;pre&gt;
      &lt;code&gt;
var ua = navigator.userAgent.toLowerCase();
if(ua.search(/(iphone)|(ipod)|(android)/) != -1) {
  $(&quot;.not-for-mobile&quot;).hide();
  $(&quot;.for-mobile&quot;).show();
}
else {
  $(&quot;.not-for-mobile&quot;).show();
  $(&quot;.for-mobile&quot;).hide();
}  
      &lt;/code&gt;
    &lt;/pre&gt;
  &lt;/div&gt;
  &lt;div class=&quot;guide-text&quot;&gt;
    &lt;h2 class=&quot;guide-title&quot;&gt;Step 1: Some title&lt;/h2&gt;
    Here are some example code as the main feature. 
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;guide-step&quot;&gt;
  &lt;div class=&quot;guide-main&quot;&gt;
    &lt;div class=&quot;for-mobile&quot;&gt;
    &lt;a target=&quot;_blank&quot; href=&quot;http://nyl.io/impress/espmotor.html?mobile=on&quot;&gt;&lt;img src=&quot;http://nyl.io/impress/espmotor.png&quot; /&gt;&lt;/a&gt;
    &lt;/div&gt;

    &lt;div class=&quot;not-for-mobile&quot; style=&quot;position:relative; padding-bottom: 75%; padding-top: 25px; &quot;&gt;
    &lt;iframe class=&quot;macdown-hide&quot; frameborder=&quot;0&quot; src=&quot;http://nyl.io/impress/espmotor.html&quot; style=&quot;position: absolute; top:0; left:0; width: 100%; height: 100%&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;guide-text&quot;&gt;
    &lt;h2 class=&quot;guide-title&quot;&gt;Step 2: Some other title&lt;/h2&gt;
    &lt;p&gt;This is something made with impress.js.. well, a hacked version made for presenting with captions and some tweaked for mobile &quot;support.&quot;&lt;/p&gt;
    &lt;div class=&quot;for-mobile&quot;&gt;
      Click on the diagram on the left to go through the workflow. It will open up a new page. Once you are on the new page, click on the RIGHT SIDE of the screen to go forward, and click on the LEFT SIDE of the screen to go back. 
    &lt;/div&gt;
    &lt;div class=&quot;not-for-mobile&quot;&gt;
      Click on the diagram on the left to go through the workflow.
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h4 id=&quot;the-code-1&quot;&gt;The Code&lt;/h4&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;div class=&quot;guide-step&quot;&gt;
  &lt;div class=&quot;guide-main&quot;&gt;
    &lt;pre&gt;
      &lt;code&gt;
var ua = navigator.userAgent.toLowerCase();
if(ua.search(/(iphone)|(ipod)|(android)/) != -1) {
  $(&quot;.not-for-mobile&quot;).hide();
  $(&quot;.for-mobile&quot;).show();
}
else {
  $(&quot;.not-for-mobile&quot;).show();
  $(&quot;.for-mobile&quot;).hide();
}  
      &lt;/code&gt;
    &lt;/pre&gt;
  &lt;/div&gt;
  &lt;div class=&quot;guide-text&quot;&gt;
    &lt;h2 class=&quot;guide-title&quot;&gt;Step 1: Some title&lt;/h2&gt;
    Here are some example code as the main feature. 
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;guide-step&quot;&gt;
  &lt;div class=&quot;guide-main&quot;&gt;
    &lt;div class=&quot;for-mobile&quot;&gt;
    &lt;a target=&quot;_blank&quot; href=&quot;http://nyl.io/impress/espmotor.html?mobile=on&quot;&gt;&lt;img src=&quot;http://nyl.io/impress/espmotor.png&quot; /&gt;&lt;/a&gt;
    &lt;/div&gt;

    &lt;div class=&quot;not-for-mobile&quot; style=&quot;position:relative; padding-bottom: 75%; padding-top: 25px; &quot;&gt;
    &lt;iframe class=&quot;macdown-hide&quot; frameborder=&quot;0&quot; src=&quot;http://nyl.io/impress/espmotor.html&quot; style=&quot;position: absolute; top:0; left:0; width: 100%; height: 100%&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;guide-text&quot;&gt;
    &lt;h2 class=&quot;guide-title&quot;&gt;Step 2: Some other title&lt;/h2&gt;
    &lt;p&gt;This is something made with impress.js.. well, a hacked version made for presenting with captions and some tweaked for mobile &quot;support.&quot;&lt;/p&gt;
    &lt;div class=&quot;for-mobile&quot;&gt;
      Click on the diagram on the left to go through the workflow. It will open up a new page. Once you are on the new page, click on the RIGHT SIDE of the screen to go forward, and click on the LEFT SIDE of the screen to go back. 
    &lt;/div&gt;
    &lt;div class=&quot;not-for-mobile&quot;&gt;
      Click on the diagram on the left to go through the workflow.
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;```&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;I will use &lt;a href=&quot;https://github.com/neuralfirings/guide&quot;&gt;Guide.js&lt;/a&gt; to write guides for this blog going forward, and maybe write a Guide to the Guide. Hehe. If I want to get really fancy, create some sort of a Markdown conversion since my blog is written using Markdown.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>PCBs Misbehaving</title>
   <link href="http://www.nyl.io/blog/2015/07/pcbs-misbehaving"/>
   <updated>2015-07-26T17:27:29-07:00</updated>
   <id>http://www.nyl.io/blog/blog/2015/07/pcbs-misbehaving</id>
   <content type="html">&lt;p&gt;I got my custom PCBs from iTEAD last week. So exciting, right?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/07/pcbmotor_pcbs.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I plugged everything in and…. WARHN warhn (failure horn 📢).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/07/failwhale.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;problem&quot;&gt;Problem&lt;/h2&gt;

&lt;p&gt;So much trouble trying to figure out what’s the issue. The LED would sometimes turn on, sometimes it wouldn’t, sometimes the LED would turn on and stay on. I think this indicated that the ESP8266 was frozen. The motor would work maybe 10% of the time. And it was all completely random. I checked my soldering for loose connections. Resoldered a few suspicious (but I think they were fine) connections. Poke and prodded this little green thing with my &lt;a href=&quot;http://amzn.to/1MuPvhT&quot;&gt;multimeter&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;root-cause-i-think-maybe&quot;&gt;Root Cause (I think? Maybe?)&lt;/h2&gt;

&lt;p&gt;I suspect it’s had something to do with my 5V Regulator. It seems to be working off a lot of heat. I didn’t have a heat sink for it. Trying to debug it let me all over the place. Sometimes it would give me a steady 5V (or 4.9V), other times it would putt along at a 4.2V. I suspect this might be because my 9V battery was losing too much juice too quickly. The 5V Regulator I used (&lt;a href=&quot;https://www.adafruit.com/products/2164&quot;&gt;7805 TO-220&lt;/a&gt;) needs a minimum of 7V to output a consistent 5V, according to Adafruit product description. So 4.2V output is no go since the L293D motor driver has a minimum supply voltage of 4.5V (and a max of 36!) so that was a no go.&lt;/p&gt;

&lt;p&gt;The other problem was my LED. I got some LED that came with built in resistors, but I think when I soldered them in I soldered them above where the resistor were. So I had to redo the LED. I used a handy white LED the second time since white LEDs have the highest forward voltage. I ended up tearing up the copper traces during this “fix” and had to solder in wires manually (see pic below).&lt;/p&gt;

&lt;h2 id=&quot;solution-ish&quot;&gt;Solution (ish)&lt;/h2&gt;

&lt;p&gt;To solve the 5V Regulator problem I decided to just F it and use a different battery pack. I got out my handy 4 AA battery. This starts at a 6V and works its way down to a 4.4V. With a fresh set of batteries it’s a little too high for the ATtiny85 chip, which has a max supply voltage of 5.5V. However, it doesn’t stay at 6V for long and the batteries I’m using is definitely not at 6V. I then added a manual wire connection between the Input on the 5V regulator and the VCC on the L293D chip. Basically, I bypassed the 5V regulator and plugged the power source directly onto the ATtiny85 and L293D Motor Driver.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/07/pcbmotor_hack_comments.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s probably not the safest or the smartest thing to do. BUT IT WORKS! It’s so beautiful it works. And it’s tidy.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Before (breadboard):&lt;/strong&gt;
&lt;img src=&quot;/content/images/2015/07/pcbmotor_prepcb.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;After (custom PCB):&lt;/strong&gt;
&lt;img src=&quot;/content/images/2015/07/pcbmotor_setup.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So tidy. Much tiny.&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;To get these components in their comfortable range of operation, I’ll try routing the ESP8266 (&amp;amp; LED) and ATtiny85 through a 3V Regulator and leave the L293D Motor Driver (&amp;amp; Stepper Motor) directly connected to the 9V Battery.&lt;/p&gt;

&lt;table style=&quot;font-size: 0.7em&quot;&gt;
&lt;tr&gt;&lt;th&gt;Component&lt;/th&gt;&lt;th&gt;Min Supply Voltage&lt;/th&gt;&lt;th&gt;Max Supply Voltage&lt;/th&gt;&lt;th&gt;Current Power&lt;/th&gt;&lt;th&gt;Proposed Power&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;ESP8266&lt;/td&gt;&lt;td&gt;3.3V&lt;/td&gt;&lt;td&gt;3.6V&lt;/td&gt;&amp;lt;td colspan=2 style=&quot;text-align: center&quot;&amp;gt;3V Regulator&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;LED&lt;/td&gt;&lt;td&gt;2.5V&lt;/td&gt;&lt;td&gt;3.2V&lt;/td&gt;&amp;lt;td colspan=2 style=&quot;text-align: center&quot;&amp;gt;ESP8266 (3.2 V on HIGH)&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;ATtiny85&lt;/td&gt;&lt;td&gt;1.8V&lt;/td&gt;&lt;td&gt;5.5V&lt;/td&gt;&lt;td&gt;5V Regulator&lt;/td&gt;&lt;td&gt;3V Regulator&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;L293D Motor Driver&lt;/td&gt;&lt;td&gt;4.6V&lt;/td&gt;&lt;td&gt;36V&lt;/td&gt;&lt;td&gt;5V Regulator&lt;/td&gt;&lt;td&gt;Battery (4.4-9V)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Stepper Motor&lt;/td&gt;&lt;td&gt;5V&lt;/td&gt;&lt;td&gt;5V&lt;/td&gt;&amp;lt;td colspan=2 style=&quot;text-align: center&quot;&amp;gt;L293D&lt;/tr&gt;
&lt;/table&gt;

&lt;h2 id=&quot;also-next-steps&quot;&gt;Also Next Steps&lt;/h2&gt;

&lt;p&gt;Rather than waiting another two weeks to get a PCB, I’m researching how to etch my own PCB at home. It seems like a huge hassle, but I figure it’s probably worth being able to rapidly prototyping board after board.&lt;/p&gt;

&lt;p&gt;The problem is I’m woefully undersupply. I looked into it, and I’ll need something like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Drill press (for the through holes and vias)&lt;/li&gt;
  &lt;li&gt;Feric Chloride (sp?) for etching away the copper&lt;/li&gt;
  &lt;li&gt;FR4 Copper Boards&lt;/li&gt;
  &lt;li&gt;Safety stuff: gloves, goggles, work mask&lt;/li&gt;
  &lt;li&gt;Laser printer (or more chemicals that I’ll probably splash on things I shouldn’t splash weird chemicals on. Like &lt;a href=&quot;http://ajaxthedog.com&quot;&gt;my dog&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Some tool to cut the FR4 material&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If I want to get fancy, I might need:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Laminator&lt;/li&gt;
  &lt;li&gt;A bunch of sheets that does fancy transfer things&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Seems like a lot of stuff.&lt;/p&gt;

&lt;p&gt;Is it worth it?&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Wifi Controlled Motors using ESP8266 and ATtiny85</title>
   <link href="http://www.nyl.io/blog/2015/07/esp8266-motor"/>
   <updated>2015-07-23T01:11:51-07:00</updated>
   <id>http://www.nyl.io/blog/blog/2015/07/esp8266-motor</id>
   <content type="html">&lt;p&gt;Picking up where &lt;a href=&quot;http://blog.nyl.io/esp8266-led-arduino/&quot;&gt;we left off&lt;/a&gt;, I’m still on my way to create the cheap wifi connected, internet controlled motor. I think I found my perfect combination of awesome.&lt;/p&gt;

&lt;div class=&quot;for-mobile&quot;&gt;
Click on the diagram below to go through the workflow. It will open up a new page. Once you are on the new page, click on the RIGHT SIDE of the screen to go forward, and click on the LEFT SIDE of the screen to go back. 
&lt;a target=&quot;_blank&quot; href=&quot;http://nyl.io/impress/espmotor.html?mobile=on&quot;&gt;&lt;img src=&quot;http://nyl.io/impress/espmotor.png&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;div class=&quot;not-for-mobile&quot;&gt;
Click on the diagram below to go through the workflow.&lt;/div&gt;
&lt;div class=&quot;not-for-mobile&quot; style=&quot;position:relative; padding-bottom: 75%; padding-top: 25px; &quot;&gt;
&lt;iframe frameborder=&quot;0&quot; src=&quot;http://nyl.io/impress/espmotor.html&quot; style=&quot;position: absolute; top:0; left:0; width: 100%; height: 100%&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;p style=&quot;color: #A00; font-weight: bold; background: #FEE; border-radius: 5px; border: solid 5px #A00; padding: 10px; box-sizing: border-box;&quot;&gt;
PLEASE NOTE: The ESP8266, index.php, and light.json part was covered &lt;a href=&quot;http://blog.nyl.io/esp8266-led-arduino/&quot;&gt;the previous tutorial&lt;/a&gt;, which goes over how to program an ESP8266 with Arduino IDE, and hook it up to the internet. It also explains how the ESP8266 should ping light.json, and how index.php sends info to light.json. Again: &lt;a href=&quot;http://blog.nyl.io/esp8266-led-arduino/&quot;&gt;here's the link to the previous tutorial&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;And as always, you can find the code, diagrams, and all sorts of goodies on this project’s &lt;a href=&quot;https://github.com/neuralfirings/esp8266led&quot;&gt;GitHub Page&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;gather-ye-ingredients&quot;&gt;Gather Ye, Ingredients&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Main Components:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://amzn.to/1Lu6QHu&quot;&gt;ESP8266-01 Wifi Chip&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://amzn.to/1fhk38N&quot;&gt;Arduino Uno&lt;/a&gt; for flashing the ATtiny85&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://amzn.to/1gJgsRW&quot;&gt;ATTiny85&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://amzn.to/1CKtcSm&quot;&gt;L293D Motor Driver&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://amzn.to/1HDGT4d&quot;&gt;5VDC Stepper Motor&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;General Electronics&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://amzn.to/1gJg9Xs&quot;&gt;10uF Capacitor&lt;/a&gt; (link is to a bunch of assorted capacitors)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://amzn.to/1Otn0iU&quot;&gt;LED&lt;/a&gt; This link comes with assorted LEDs and a pack of resistors to boot. For this project, use a purple or white light (closest to 3.3V). Or you know. Use resistors. You can also use &lt;a href=&quot;http://www.digikey.com/product-detail/en/0/754-1891-ND&quot;&gt;LEDs with built in resistors&lt;/a&gt; to be safe.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://octopart.com/ld1117v33-stmicroelectronics-526800&quot;&gt;3.3V Regulator&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://amzn.to/1HDGY7Z&quot;&gt;5V Regulator&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://amzn.to/1HDHrqO&quot;&gt;9V Battery&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://amzn.to/1MjBPq1&quot;&gt;9V Battery Connector&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;step-1-prep-the-arduino-uno-as-an-isp&quot;&gt;Step 1: Prep the Arduino Uno as an ISP&lt;/h2&gt;

&lt;p&gt;Before, I had whipped up this whole system with an Arduino controlling the motor instead of an ATtiny85 chip. I learned that you can actually flash some Arduino programs on the ATtiny85 chip, which is AWESOME. The ATtiny85 chip (the thing I’m holding here) is smaller and cheaper than the Arduino.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.nyl.io/content/images/2015/07/arduino_vs_attiny.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So adorbs, right?&lt;/p&gt;

&lt;p&gt;Prepping the Arduino:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.arduino.cc/en/main/software&quot;&gt;Download the Arduino IDE&lt;/a&gt; if you haven’t already&lt;/li&gt;
  &lt;li&gt;Hook up the Arduino Uno to your computer using a printer cable&lt;/li&gt;
  &lt;li&gt;Open up the ArduinoISP sketch (File &amp;gt; Examples &amp;gt; ArduinoISP) &lt;img src=&quot;http://blog.nyl.io/content/images/2015/07/arduinoisp.jpg&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Click “Upload” button (the right arrow above the code area) &lt;img src=&quot;http://blog.nyl.io/content/images/2015/07/arduinoupload.jpg&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Then &lt;strong&gt;BAM&lt;/strong&gt;! Your Arduino is now ready to program Atmel Chips!&lt;/p&gt;

&lt;h2 id=&quot;step-2-add-attiny85-to-arduino-ide&quot;&gt;Step 2: Add ATtiny85 to Arduino IDE&lt;/h2&gt;

&lt;p&gt;Now we’re going to add ATtiny85 to the list of available boards. This way, you can use Arduino language to program ATtiny85.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Go to: Arduino &amp;gt; Preferences &lt;img src=&quot;http://blog.nyl.io/content/images/2015/07/arduino_pref.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add this to Additional Board Manager URLs at the bottom and click “OK” when done: https://raw.githubusercontent.com/damellis/attiny/ide-1.6.x-boards-manager/package_damellis_attiny_index.json &lt;img src=&quot;http://blog.nyl.io/content/images/2015/07/arduino_boardmanagerurl.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Go to: Tools &amp;gt; Board &amp;gt; Board Manager &lt;img src=&quot;http://blog.nyl.io/content/images/2015/07/arduino_boardmanager.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Search for “attiny,” click on it, then click “install” &lt;img src=&quot;http://blog.nyl.io/content/images/2015/07/arduino_installattiny.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Restart Arduino&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Go to: Tools &amp;gt; Board &amp;gt; ATtiny &lt;img src=&quot;http://blog.nyl.io/content/images/2015/07/arduino_attiny.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;step-3-wire-it-up&quot;&gt;Step 3: Wire it Up&lt;/h2&gt;
&lt;p&gt;Wire everything up like so. The Arduino IDE will send the code directly to ATtiny85. Please note the 10uF capacitor. This prevents the Arduino from resetting and starting up bootloader mode.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.nyl.io/content/images/2015/07/arduino_attiny_bb.png&quot; alt=&quot;&quot; /&gt;
&lt;small&gt;(image source: &lt;a href=&quot;http://highlowtech.org/?p=1706&quot;&gt;High Low Tech Blog&lt;/a&gt;)&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;Here is the pin labels for the ATtiny85 (and ATtiny45)
&lt;img src=&quot;/content/images/2015/08/attiny_pinout.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-4-code-for-the-attiny85&quot;&gt;Step 4: Code for the ATtiny85&lt;/h2&gt;

&lt;p&gt;I based this off of &lt;a href=&quot;https://learn.adafruit.com/adafruit-arduino-lesson-16-stepper-motors&quot;&gt;Adafruit’s Arduino/Stepper Motor Tutorial&lt;/a&gt;. I made a few tweaks to Adafruit’s code. You’ll see the changes in where I commented out the original values and why.&lt;/p&gt;

&lt;p&gt;Go to: File &amp;gt; New and copy/paste the following code:&lt;/p&gt;

&lt;p&gt;```
/*
Adafruit Arduino - Lesson 16. Stepper
Modified to take input from ESP8266 instead of user
*/&lt;/p&gt;

&lt;h1 id=&quot;include-stepperh&quot;&gt;include &lt;stepper.h&gt;&lt;/stepper.h&gt;&lt;/h1&gt;

&lt;p&gt;// NYL: changed the following 4 lines to match ATtiny85’s pin number
int in1Pin = 0; // was 12
int in2Pin = 1; // was 11
int in3Pin = 2; // was 10
int in4Pin = 3; // was 9
int readPin = 4; // NYL: new line, not in original Adafruit Tutorial&lt;/p&gt;

&lt;p&gt;Stepper motor(512, in1Pin, in2Pin, in3Pin, in4Pin);&lt;/p&gt;

&lt;p&gt;void setup()
{
  pinMode(in1Pin, OUTPUT);
  pinMode(in2Pin, OUTPUT);
  pinMode(in3Pin, OUTPUT);
  pinMode(in4Pin, OUTPUT);
  pinMode(readPin, INPUT);  // NYL: new line, listens for input on readPin&lt;/p&gt;

&lt;p&gt;motor.setSpeed(20);
}&lt;/p&gt;

&lt;p&gt;// NYL: changed this to read input from ESP, 
// then proceed at 32 steps every 1 second
void loop() 
{
  if (digitalRead(readPin)==1) {
    motor.step(32);
  }
  delay(1000);
}
```&lt;/p&gt;

&lt;p&gt;File &amp;gt; Save because you should always save your work!!&lt;/p&gt;

&lt;h2 id=&quot;step-5-flash-the-attiny85&quot;&gt;Step 5: Flash the ATtiny85&lt;/h2&gt;

&lt;p&gt;All righty! Your ISP (Arduino Uno) is ready. Your code is ready. Let’s flash some ICs! 🎉🎉🎉&lt;/p&gt;

&lt;p&gt;Go to “Tools” and select the following settings:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/08/attiny_toolmenu.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Just click “Upload” (the right arrow button).
&lt;img src=&quot;http://blog.nyl.io/content/images/2015/07/arduino_upload2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are some other tutorials on flashing the ATtiny85 you can look at if this doesn’t work:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;High Low Tech Blog Posts (&lt;a href=&quot;http://highlowtech.org/?p=1706&quot;&gt;this one&lt;/a&gt; and &lt;a href=&quot;http://highlowtech.org/?p=1695&quot;&gt;that one&lt;/a&gt;) are great.&lt;/li&gt;
  &lt;li&gt;There’s also &lt;a href=&quot;https://www.hackster.io/arjun/programming-attiny85-with-arduino-uno&quot;&gt;this post&lt;/a&gt; on Hackster that is pretty good.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;step-6-hook-everything-up&quot;&gt;Step 6: Hook Everything Up&lt;/h2&gt;

&lt;p&gt;Last I hooked everything up to get the motor running off of interwebs bits. I put some scotch tape on the motor so you can see it turning more easily.&lt;/p&gt;

&lt;iframe class=&quot;imgur-embed&quot; width=&quot;100%&quot; height=&quot;404&quot; frameborder=&quot;0&quot; src=&quot;http://i.imgur.com/mRuKtxu.gifv#embed&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Here’s a cleaned up drawing of the wiring:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.nyl.io/content/images/2015/07/esp8266_attiny_noftdi_reg_9v_bb.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this diagram, the top breadboard power track represents 5V, and the bottom represents 3.3V. The basic logic follows the diagram at the beginning of this blog post. Rather than conceptual arrows, we have wires and breadboards.&lt;/p&gt;

&lt;p&gt;Now, if you go to your &lt;code&gt;index.php&lt;/code&gt; page, you can click the “Light On” and “Light Off” button. Only now, the light &lt;em&gt;and&lt;/em&gt; the motor should turn on.&lt;/p&gt;

&lt;p&gt;OOOOO… fancy.&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;Just when you think you’ve shrunken everything, there’s a way to get things even smaller. For me, the next step is to make a Custom PCB of this and get rid of all the wires and breadboard.&lt;/p&gt;

&lt;p&gt;After that, I might even start looking into getting the surface mount version of it working, so it’s even smaller (and cheaper). At this point, the battery and the motor will be the biggest pieces. So if you guys know of smaller 5V battery and motors, &lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#032;&amp;#095;&amp;#064;&amp;#110;&amp;#121;&amp;#108;&amp;#046;&amp;#105;&amp;#111;&quot;&gt;drop me a line!&lt;/a&gt; ✉️&lt;/p&gt;

&lt;p&gt;Ok. Now go make stuff.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Internet Controlled LED using ESP8266</title>
   <link href="http://www.nyl.io/blog/2015/07/esp8266-led-arduino"/>
   <updated>2015-07-15T16:45:10-07:00</updated>
   <id>http://www.nyl.io/blog/blog/2015/07/esp8266-led-arduino</id>
   <content type="html">&lt;p&gt;In my previous post, I covered how to upload sketches using NodeMCU, which is firmware written in Lua. I ran into a few problems:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Uploading big files were prone to error, and it took multiple tries&lt;/li&gt;
  &lt;li&gt;Memory! I seemed to not have much&lt;/li&gt;
  &lt;li&gt;The callbacks were driving me insane. I decided to not like callback functions for the time being.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In comes Arduino to save the day. There are a lot of useful libraries written for Arduino–libraries for stepper motors and parsing JSON for example. Also, the stepper motors are controlled by Arduino’s microcontroller in the end, so it is just simpler to have one language write for both the Wifi Module (ESP) and the microcontroller (Arduino). Last, no upload errors (that weren’t my fault).&lt;/p&gt;

&lt;p&gt;The first thing I did was blink an LED, because that’s simply the first thing you do when you get hardware.&lt;/p&gt;

&lt;iframe class=&quot;imgur-embed&quot; width=&quot;100%&quot; height=&quot;360&quot; frameborder=&quot;0&quot; src=&quot;http://i.imgur.com/GfD93zj.gifv#embed&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;On the client side (the page on my phone), the “Light On” button sends a “On” value to the &lt;code&gt;light.json&lt;/code&gt; file. The ESP8266 connects to my home Wifi and reads the &lt;code&gt;light.json&lt;/code&gt; file. If it sees an “On” value, it lights up.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/07/esp_led_dataflow.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you want to poke around the code, all the code/schematics I describe in this blog post can be found on this project’s &lt;a href=&quot;https://github.com/neuralfirings/esp8266led&quot;&gt;GitHub Page&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;parts-one-get-yo-stuff&quot;&gt;Parts One: Get Yo Stuff&lt;/h2&gt;

&lt;p&gt;This project requires the following ingredients:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://amzn.to/1Lu6QHu&quot;&gt;ESP8266-01&lt;/a&gt;: Module to connect to the Wifis
&lt;a href=&quot;http://www.amazon.com/gp/product/B00O34AGSU/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=B00O34AGSU&amp;amp;linkCode=as2&amp;amp;tag=nylio-20&amp;amp;linkId=QSFWU7POV4SORVP7&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;ASIN=B00O34AGSU&amp;amp;Format=_SL250_&amp;amp;ID=AsinImage&amp;amp;MarketPlace=US&amp;amp;ServiceVersion=20070822&amp;amp;WS=1&amp;amp;tag=nylio-20&quot; /&gt;&lt;/a&gt;&lt;img src=&quot;http://ir-na.amazon-adsystem.com/e/ir?t=nylio-20&amp;amp;l=as2&amp;amp;o=1&amp;amp;a=B00O34AGSU&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;border:none !important; margin:0px !important;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://www.amazon.com/10PCS-10mm-Ultra-Bright-White/dp/B00BWKMOWY/&quot;&gt;White LED&lt;/a&gt;: with forward 3.3V (lower level LEDs tend to confuse the ESP, I’m sure you can use resistors and other magical components to fix this but I didn’t look into it much)
&lt;img src=&quot;/content/images/2015/07/whiteled.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://www.amazon.com/SparkFun-FTDI-Cable-5V-VCC-3-3V/dp/B00DJBPIGI/&quot;&gt;FTDI Cable&lt;/a&gt;: You can also use other FTDI tools like FTDI friend
&lt;img src=&quot;/content/images/2015/07/ftdiusb.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://www.amazon.com/Teenitor-650mAh-Battery-Charger-Parts/dp/B00NQV0Z46/&quot;&gt;Battery&lt;/a&gt;: I used a Lipo (Lithium Ion Polymer) battery because it’s small and rechargeable. I actually used &lt;a href=&quot;https://www.adafruit.com/product/258&quot;&gt;Adafruit’s Battery&lt;/a&gt; in the video above, but the one I link to on Amazon should work as well (and it comes with a charger).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/07/esp_battery.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;You also need essentials like &lt;a href=&quot;http://www.amazon.com/Solderless-BreadBoard-tie-points-power-rails/dp/B005GYAIES/&quot;&gt;Breadboard&lt;/a&gt; and &lt;a href=&quot;http://www.amazon.com/2-54mm-Breadboard-Male-male-female-female-female-male/dp/B00E8Z3528/&quot;&gt;Jumper Wires&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;One note. Hehe. I didn’t use regulators for this project. The LiPo Battery I’m using is 3.7V and the ESP8266 take 3.3V, so I guess it’s not THAT bad. But you should use regulators! At least that’s what my friends who electronics tell me. You can find some nice &lt;a href=&quot;https://www.adafruit.com/products/2165&quot;&gt;3.3V Regulators on Adafruit&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;part-two-json--phpn&quot;&gt;Part Two: JSON &amp;amp; PHP&lt;sup id=&quot;fnref:n&quot;&gt;&lt;a href=&quot;#fn:n&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;

&lt;h3 id=&quot;lightjson&quot;&gt;light.json&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;light.json&lt;/code&gt; file is simple. It either reads &lt;code&gt;{&quot;light&quot;:&quot;on&quot;}&lt;/code&gt; or &lt;code&gt;{&quot;light&quot;:&quot;off&quot;}&lt;/code&gt;. That’s it. Keep in mind though, it needs to be set to permission 777 so the PHP file can write to it (though 666 works too).&lt;/p&gt;

&lt;h3 id=&quot;indexphp&quot;&gt;index.php&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;index.php&lt;/code&gt; file is the public file that writes &lt;code&gt;{&quot;light&quot;:&quot;on&quot;}&lt;/code&gt; or &lt;code&gt;{&quot;light&quot;:&quot;off&quot;}&lt;/code&gt; to &lt;code&gt;light.json&lt;/code&gt;. Here is the barebones code. There are two links that links you to the current page with a url parameter &lt;code&gt;?light=on&lt;/code&gt; or &lt;code&gt;?light=off&lt;/code&gt;. Based on the url parameter, the PHP writes the appropriate instructions to the JSON file.&lt;/p&gt;

&lt;p&gt;```
&lt;?php
$light = $_GET['light'];
if($light == &quot;on&quot;) {
  $file = fopen(&quot;light.json&quot;, &quot;w&quot;) or die(&quot;can't open file&quot;);
  fwrite($file, '{&quot;light&quot;: &quot;on&quot;}');
  fclose($file);
} 
else if ($light == &quot;off&quot;) {
  $file = fopen(&quot;light.json&quot;, &quot;w&quot;) or die(&quot;can't open file&quot;);
  fwrite($file, '{&quot;light&quot;: &quot;off&quot;}');
  fclose($file);
}
?&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;?light=on&quot;&gt;Turn On&lt;/a&gt;
&lt;a href=&quot;?light=off&quot;&gt;Turn Off&lt;/a&gt;&lt;/p&gt;
&lt;div&gt;
  &lt;?php
    if($light==&quot;on&quot;) {
      echo(&quot;Turn LED on.&quot;);
    }
    else if ($light==&quot;off&quot;) {
      echo(&quot;Turn LED off.&quot;);
    }
    else {
      echo (&quot;Do something.&quot;);
    }
  ?&gt;
&lt;/div&gt;
&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;I merged this code into my handy &lt;a href=&quot;http://www.nyl.io/template.html&quot;&gt;template.html&lt;/a&gt; HTML page to start. This page is preloaded with jQuery, Bootstrap (with simple layout preloaded), and Font Awesome. I don’t use jQuery or Font Awesome on this particular project. Then I added some styling classes (e.g. &lt;code&gt;btn-large&lt;/code&gt; and styling divs to make things response, pretty, and all that good stuff).&lt;/p&gt;

&lt;p&gt;Here’s the final code for &lt;code&gt;index.php&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;```
&lt;?php
$light = $_GET['light'];
if($light == &quot;on&quot;) {
  $file = fopen(&quot;light.json&quot;, &quot;w&quot;) or die(&quot;can't open file&quot;);
  fwrite($file, '{&quot;light&quot;: &quot;on&quot;}');
  fclose($file);
} 
else if ($light == &quot;off&quot;) {
  $file = fopen(&quot;light.json&quot;, &quot;w&quot;) or die(&quot;can't open file&quot;);
  fwrite($file, '{&quot;light&quot;: &quot;off&quot;}');
  fclose($file);
}
?&gt;&lt;/p&gt;

&lt;html&gt;
  &lt;head&gt;      
    &lt;meta charset=&quot;utf-8&quot; /&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;
    
    &lt;title&gt;LED for ESP8266&lt;/title&gt;
   
    &lt;script src=&quot;https://code.jquery.com/jquery-2.1.4.min.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;
    &lt;link href=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot; /&gt;
    &lt;link rel=&quot;stylesheet&quot; href=&quot;//maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css&quot; /&gt;

  &lt;/head&gt;
  &lt;body&gt;
    &lt;div class=&quot;row&quot; style=&quot;margin-top: 20px;&quot;&gt;
      &lt;div class=&quot;col-md-8 col-md-offset-2&quot;&gt;
        &lt;a href=&quot;?light=on&quot; class=&quot;btn btn-success btn-block btn-lg&quot;&gt;Turn On&lt;/a&gt;
        &lt;br /&gt;
        &lt;a href=&quot;?light=off&quot; class=&quot;led btn btn-danger btn-block btn-lg&quot;&gt;Turn Off&lt;/a&gt;
        &lt;br /&gt;
        &lt;div class=&quot;light-status well&quot; style=&quot;margin-top: 5px; text-align:center&quot;&gt;
          &lt;?php
            if($light==&quot;on&quot;) {
              echo(&quot;Turn LED on.&quot;);
            }
            else if ($light==&quot;off&quot;) {
              echo(&quot;Turn LED off.&quot;);
            }
            else {
              echo (&quot;Do something.&quot;);
            }
          ?&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;
&lt;p&gt;```&lt;/p&gt;

&lt;h2 id=&quot;part-three-hardware-wire-everything-up&quot;&gt;Part THREE: Hardware: Wire Everything Up&lt;/h2&gt;

&lt;p&gt;Now that code is written, go ahead and wire things up. To do this I used an FTDI to USB cable. The FTDI cable powers the ESP and connects it to the Serial Terminal. Of course, you can also use FTDI Friend or other FTDI connectors. Here is a diagram of the ESP connected to an LED and an FTDI friend from Sparkfun.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/07/esp8266_led_ftdi_bb.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, when GPIO0 (the purple wire above) is connected to ground at boot, this tells the ESP to start up in bootloader mode. This is when you can flash the ESP, meaning transfer the Arduino code to the ESP. After the Arduino code is loaded, you’ll see a “Done Uploading” status message at the bottom of the ArduinoIDE. Then the code will start running.&lt;/p&gt;

&lt;p&gt;If you want to flash another program, then restart the Arduino. You can unplug/replug the USB (which disconnects the Arduino’s power source), or you can reset the Arduino by disconnecting the CH_PD (chip powerdown) pin.&lt;/p&gt;

&lt;p&gt;If you don’t want to restart the device in bootloader mode, simply unplug the GPIO0 cable (the purple wire above).&lt;/p&gt;

&lt;p&gt;When are you ready to not rely on the USB cable anymore, just unplug everything that connects to the USB. You can also unplug the GPIO to Ground, since you don’t need the bootloader mode anymore. You then connect the VCC (power) and GND (ground) to the red (power) and black (ground) of a battery pack that’s 3.3-5V. Something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/07/esp8266_led_battery_bb.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;part-four-arduino-code&quot;&gt;Part Four: Arduino Code&lt;/h2&gt;

&lt;p&gt;I used the ArduinoIDE to connect with the ESP8266 module. This way, you can flash the ESP just like you would flash an Arduino. It makes developing really easy!&lt;/p&gt;

&lt;p&gt;Now, this does not mean you need an Arduino in this example. You are just using the software Arduino publishes which allows you to write program and flash them onto tiny little electronic modules like the many different types of Arduino board and now the ESP8266 module.&lt;/p&gt;

&lt;h3 id=&quot;install-the-esp8266-package-in-arduinoide&quot;&gt;1. Install the ESP8266 package in ArduinoIDE&lt;/h3&gt;

&lt;p&gt;For this, you need Arduino 1.6.4 or higher. You can download the latest software on &lt;a href=&quot;https://www.arduino.cc/en/Main/Software&quot;&gt;Arduino’s website&lt;/a&gt;. I followed &lt;a href=&quot;https://learn.adafruit.com/adafruit-huzzah-esp8266-breakout/using-arduino-ide&quot;&gt;Adafruit’s tutorial&lt;/a&gt; for setting up the Arduino IDE. They used their Huzzah breakout, where as I am using the lowly ESP8266-01. The software part is the same, the only difference as far as I can tell is which pins to plug into which socket in the FTDI cable.&lt;/p&gt;

&lt;p&gt;After everything is updated, open up Preferences (on Mac it’s &lt;code&gt;CMD+,&lt;/code&gt; or select from the toolbar Arduino &amp;gt; Preferences). Then enter &lt;code&gt;http://arduino.esp8266.com/package_esp8266com_index.json&lt;/code&gt; under “Additional Board Manager’s URL” towards the bottom.&lt;/p&gt;

&lt;p&gt;Restart Arduino.&lt;/p&gt;

&lt;p&gt;Now, in Arduino, you should file under toolbar Tools &amp;gt; Board &amp;gt; Generic ESP8266 Module.&lt;/p&gt;

&lt;p&gt;I also followed Adafruit’s recommendations on a few other settings:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CPU Frequency: 80 MHz&lt;/li&gt;
  &lt;li&gt;Flash size: 4M&lt;/li&gt;
  &lt;li&gt;Upload speed: 115200&lt;/li&gt;
  &lt;li&gt;Port: my USB port (this shows up once you plugged everything in)&lt;/li&gt;
  &lt;li&gt;Programmer: AVRISP mkll&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-arduino-code&quot;&gt;2. The Arduino Code&lt;/h3&gt;

&lt;p&gt;Ok, now that ArduinoJson is installed, the we can start doing the fun stuff.  I’m going to start off by showing the compiled code. Then I’ll break it down. If you are the type that like to stare at code and learn that way, then just read the following and you’re done! If not, keep going.&lt;/p&gt;

&lt;h4 id=&quot;including-arduinojsonh-library&quot;&gt;Including ArduinoJson.h Library&lt;/h4&gt;

&lt;p&gt;This basically tells the ESP to ping our &lt;code&gt;light.json&lt;/code&gt; file. If the latest value for the key &lt;code&gt;light&lt;/code&gt; is &lt;code&gt;on&lt;/code&gt;, then turn on the LED. Then rinse and repeat every second. Of course, if the value for the key &lt;code&gt;light&lt;/code&gt; is &lt;code&gt;off&lt;/code&gt;, then turn off the LED.&lt;/p&gt;

&lt;p&gt;Now, &lt;code&gt;light.json&lt;/code&gt; outputs its value using JSON. So we need a parser. Luckily, a bunch of really smart people have already done this. So no need to reinvent the wheel. I used &lt;a href=&quot;https://github.com/bblanchon/ArduinoJson&quot;&gt;ArduinoJson&lt;/a&gt;. You can find instructions for &lt;a href=&quot;https://github.com/bblanchon/ArduinoJson/wiki/Using%20the%20library%20with%20Arduino&quot;&gt;installing ArduinoJson library&lt;/a&gt; on their wiki.&lt;/p&gt;

&lt;p&gt;Then you include this library with &lt;code&gt;#include &amp;lt;ArduinoJson.h&amp;gt;&lt;/code&gt; in the file.&lt;/p&gt;

&lt;h4 id=&quot;the-void-setup-section&quot;&gt;The “void setup()” Section&lt;/h4&gt;

&lt;p&gt;In this section, you set a few basic configurations set to your specific values:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Your Wifi name and password (the &lt;code&gt;ssid&lt;/code&gt; &amp;amp; &lt;code&gt;password&lt;/code&gt; variables)&lt;/li&gt;
  &lt;li&gt;Your &lt;code&gt;light.json&lt;/code&gt; URL (the &lt;code&gt;host&lt;/code&gt; &amp;amp; &lt;code&gt;path&lt;/code&gt; variable)&lt;/li&gt;
  &lt;li&gt;Your output pin (we use GPIO2, so &lt;code&gt;const int pin=2&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In &lt;code&gt;void setup()&lt;/code&gt;, you set GPIO2 pin to Output (the O part of GPIO) and I like to flash it on High just to show that it’s turning on.&lt;/p&gt;

&lt;p&gt;You also begin a Serial connection using &lt;code&gt;Serial.begin(115200)&lt;/code&gt;. This enables you to interact with it using the Serial port, which you can open with the little Magnifying glass in the top left corner of the Arduino IDE. You can also connect to the Serial Terminal using &lt;code&gt;screen&lt;/code&gt;, CoolTerm, or PuTTY. I covered different options in a previous blog &lt;a href=&quot;&quot;&gt;post&lt;/a&gt;. When you use &lt;code&gt;Serial.print(&quot;something&quot;)&lt;/code&gt; or &lt;code&gt;Serial.println(&quot;something&quot;)&lt;/code&gt;, you should see the results in the Serial Terminal.&lt;/p&gt;

&lt;p&gt;Last we start connecting to the internets using &lt;code&gt;Wifi.begin(ssid, password)&lt;/code&gt;. While the ESP is still connecting, I have it delay and then print a dot. If you are watching the Serial Terminal, you’ll see dots appear until you log in. It’s just a way to see that the little ESP is trying to connect.&lt;/p&gt;

&lt;p&gt;```
#include &lt;esp8266wifi.h&gt;
#include &lt;arduinojson.h&gt;&lt;/arduinojson.h&gt;&lt;/esp8266wifi.h&gt;&lt;/p&gt;

&lt;p&gt;const char* ssid     = “”;&lt;br /&gt;
const char* password = “”;&lt;/p&gt;

&lt;p&gt;const char* host     = “”; // Your domain&lt;br /&gt;
String path          = “/path/to/light.json”;&lt;br /&gt;
const int pin        = 2;&lt;/p&gt;

&lt;p&gt;void setup() {&lt;br /&gt;
  pinMode(pin, OUTPUT); 
  pinMode(pin, HIGH);
  Serial.begin(115200);&lt;/p&gt;

&lt;p&gt;delay(10);
  Serial.print(“Connecting to “);
  Serial.println(ssid);&lt;/p&gt;

&lt;p&gt;WiFi.begin(ssid, password);
  int wifi_ctr = 0;
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(“.”);
  }&lt;/p&gt;

&lt;p&gt;Serial.println(“WiFi connected”);&lt;br /&gt;
  Serial.println(“IP address: “ + WiFi.localIP());
}
```&lt;/p&gt;

&lt;h4 id=&quot;the-void-loop-section&quot;&gt;The “void loop()” Section&lt;/h4&gt;

&lt;p&gt;Next we start the &lt;code&gt;void loop()&lt;/code&gt; function, which Arduino will run and rerun. Here, we will connect to &lt;code&gt;light.json&lt;/code&gt; and print the HTTP response (the info you get from the URL).&lt;/p&gt;

&lt;p&gt;The stuff used in &lt;code&gt;client.print(...)&lt;/code&gt; is called an HTTP request.  This example is contains a very simple request header, you can look through more complex parameters by reading through the XXX.&lt;/p&gt;

&lt;p&gt;```
void loop() {&lt;br /&gt;
  Serial.print(“connecting to “);
  Serial.println(host);
  WiFiClient client;
  const int httpPort = 80;
  if (!client.connect(host, httpPort)) {
    Serial.println(“connection failed”);
    return;
  }&lt;/p&gt;

&lt;p&gt;client.print(String(“GET “) + path + “ HTTP/1.1\r\n” +
               “Host: “ + host + “\r\n” + 
               “Connection: keep-alive\r\n\r\n”);&lt;/p&gt;

&lt;p&gt;delay(500); // wait for server to respond&lt;/p&gt;

&lt;p&gt;// read response
  int dir = 0; 
  while(client.available()){
    String line = client.readStringUntil(‘\r’);
    Serial.print(line);
    /////////////////////////////////////////////////////////////////////
    // NOTE: we’ll replace the line above with something to parse the 
    // JSON response here!
    /////////////////////////////////////////////////////////////////////
  }
  Serial.print(“closing connection. “);
}
```&lt;/p&gt;

&lt;p&gt;Using the two code snippets above, you should see the HTTP response body in the serial, wait a little bit, see it close and re-open the connection, then see the HTTP response body again. Rinse and repeat.&lt;/p&gt;

&lt;p&gt;Now that’s all fine and dandy, but we don’t want to see the HTTP response. We want to turn on an LED! So let’s do that now.&lt;/p&gt;

&lt;h4 id=&quot;parsing-the-json-response&quot;&gt;Parsing the JSON Response&lt;/h4&gt;

&lt;p&gt;So when you run that, you should get something like this as a response. You can see the log of the response in your Serial Terminal.&lt;/p&gt;

&lt;p&gt;```
HTTP/1.1 200 OK
Access-Control-Allow-Origin: *
Access-Control-Allow-Headers: X-Requested-With
Content-Type: application/json
Transfer-Encoding: chunked
Content-Disposition: attachment; 
Date: Sun, 12 Jul 2015 18:49:27 GMT
Cache-control: private&lt;/p&gt;

&lt;p&gt;{“light”:”off”}&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;The first section is the HTTP Response header. It tells you what kind of data you’re getting using &lt;code&gt;application/json&lt;/code&gt;, that the webpage is up and running using &lt;code&gt;200 OK&lt;/code&gt;, and other useful, informative things.&lt;/p&gt;

&lt;p&gt;I’m going to ignore these useful, informative things.&lt;/p&gt;

&lt;p&gt;The next section after the blank line represents the body of the content. On a web browser, this is the stuff that you see.&lt;/p&gt;

&lt;p&gt;Ultimately for the blinky LED, we only care about the last line (&lt;code&gt;{&quot;light&quot;:&quot;off&quot;}&lt;/code&gt;), which tells the ESP8266 what to do with the LED.&lt;/p&gt;

&lt;p&gt;I’m sure there are excellent libraries out there to parse this thing, but I wrote something quick and dirty to apply to values I know will appear in my JSON file. Basically, I will tell the code to ignore everything past the first empty line. Then skip the line after that (the blank line), then read the line after that (the JSON data).&lt;/p&gt;

&lt;p&gt;If you have a data response with a different structure, this may not work for you. Ok. You’ve been warned. Now let’s continue.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Warning: crazy-silly-but-it-works hack up ahead&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;What I do is introduce a variable name &lt;code&gt;section&lt;/code&gt;. Using this, I keep track of what section of the HTTP response I’m reading.&lt;/p&gt;

&lt;p&gt;The program then reads the HTTP response line by line. Each line is represented by the variable &lt;code&gt;line&lt;/code&gt; in the while loop. The default value is &lt;code&gt;section = &quot;header&quot;&lt;/code&gt; since the HTTP Response begins with header.&lt;/p&gt;

&lt;p&gt;It then doesn’t change until it reaches an empty line. When it reach an empty line &lt;code&gt;if (line==&quot;\n&quot;)&lt;/code&gt; then the program sets &lt;code&gt;section=&quot;json&quot;&lt;/code&gt; since the next line will be the JSON line we care about.&lt;/p&gt;

&lt;p&gt;We parse the JSON line next, and store the JSON into a &lt;code&gt;json_parsed&lt;/code&gt; variable. You can read this in the section after the comments &lt;code&gt;// Parse JSON&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;After this, we turn the LED on or off depending on the result. We use the &lt;code&gt;strcmp&lt;/code&gt; function (short for string comparison). &lt;code&gt;strcmp(json_parsed[&quot;light&quot;], &quot;on&quot;) == 0)&lt;/code&gt;, meaning if the the key &lt;code&gt;light&lt;/code&gt; is set to &lt;code&gt;on&lt;/code&gt;, then we turn on the LED. We do this using &lt;code&gt;digitalWrite(pin, HIGH)&lt;/code&gt; line where the variable &lt;code&gt;pin&lt;/code&gt; is the GPIO number we set in the beginning of the file.&lt;/p&gt;

&lt;h4 id=&quot;final-arduino-code&quot;&gt;Final Arduino Code&lt;/h4&gt;

&lt;p&gt;```
#include &lt;esp8266wifi.h&gt;
#include &lt;arduinojson.h&gt;&lt;/arduinojson.h&gt;&lt;/esp8266wifi.h&gt;&lt;/p&gt;

&lt;p&gt;const char* ssid     = “”;&lt;br /&gt;
const char* password = “”;&lt;/p&gt;

&lt;p&gt;const char* host     = “”; // Your domain&lt;br /&gt;
String path          = “/path/to/light.json”;&lt;br /&gt;
const int pin        = 2;&lt;/p&gt;

&lt;p&gt;void setup() {&lt;br /&gt;
  pinMode(pin, OUTPUT); 
  pinMode(pin, HIGH);
  Serial.begin(115200);&lt;/p&gt;

&lt;p&gt;delay(10);
  Serial.print(“Connecting to “);
  Serial.println(ssid);&lt;/p&gt;

&lt;p&gt;WiFi.begin(ssid, password);
  int wifi_ctr = 0;
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(“.”);
  }&lt;/p&gt;

&lt;p&gt;Serial.println(“WiFi connected”);&lt;br /&gt;
  Serial.println(“IP address: “ + WiFi.localIP());
}&lt;/p&gt;

&lt;p&gt;void loop() {&lt;br /&gt;
  Serial.print(“connecting to “);
  Serial.println(host);
  WiFiClient client;
  const int httpPort = 80;
  if (!client.connect(host, httpPort)) {
    Serial.println(“connection failed”);
    return;
  }&lt;/p&gt;

&lt;p&gt;client.print(String(“GET “) + path + “ HTTP/1.1\r\n” +
               “Host: “ + host + “\r\n” + 
               “Connection: keep-alive\r\n\r\n”);&lt;/p&gt;

&lt;p&gt;delay(500); // wait for server to respond&lt;/p&gt;

&lt;p&gt;// read response
  String section=”header”;
  while(client.available()){
    String line = client.readStringUntil(‘\r’);
    // Serial.print(line);
    // we’ll parse the HTML body here
    if (section==”header”) { // headers..
      Serial.print(“.”);
      if (line==”\n”) { // skips the empty space at the beginning 
        section=”json”;
      }
    }
    else if (section==”json”) {  // print the good stuff
      section=”ignore”;
      String result = line.substring(1);&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  // Parse JSON
  int size = result.length() + 1;
  char json[size];
  result.toCharArray(json, size);
  StaticJsonBuffer&amp;lt;200&amp;gt; jsonBuffer;
  JsonObject&amp;amp; json_parsed = jsonBuffer.parseObject(json);
  if (!json_parsed.success())
  {
    Serial.println(&quot;parseObject() failed&quot;);
    return;
  }

  // Make the decision to turn off or on the LED
  if (strcmp(json_parsed[&quot;light&quot;], &quot;on&quot;) == 0) {
    digitalWrite(pin, HIGH); 
    Serial.println(&quot;LED ON&quot;);
  }
  else {
    digitalWrite(pin, LOW);
    Serial.println(&quot;led off&quot;);
  }
}   }   Serial.print(&quot;closing connection. &quot;); } ```
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;part-five-next-steps&quot;&gt;Part Five? Next Steps&lt;/h2&gt;

&lt;p&gt;The next thing I want to do is connect this whole contraption to a stepper motor. So rather than an LED blinking on and off, the ESP can make a motor turn.&lt;/p&gt;

&lt;p&gt;I want to have a bunch of little ESPs around the house connected to different motors that can do different things. I mean, a lot of things require turning action: opening window blinds, turning a key, opening a door. My next step is to get a basic motor example working, then we’ll connect the motors to various household components and start robotifying my apartment.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:n&quot;&gt;
      &lt;p&gt;Ok, so originally I was using Sparkfun’s Datastream. Until that is, literally minutes before deciding to publish this blogpost, the datastream went down. So I waited. And waited. and Finally decided to screw it and rewrite everything using good ol’ PHP and JSON. &lt;a href=&quot;#fnref:n&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>ESP8266 meets NodeMCU</title>
   <link href="http://www.nyl.io/blog/2015/07/esp8266-meets-nodemcu"/>
   <updated>2015-07-05T02:04:48-07:00</updated>
   <id>http://www.nyl.io/blog/blog/2015/07/esp8266-meets-nodemcu</id>
   <content type="html">&lt;p&gt;Yesterday, I made great progress on playing around with the &lt;a href=&quot;http://www.ebay.com/itm/151657399118&quot;&gt;ESP8266, the $2 Wifi Module&lt;/a&gt;&lt;sup id=&quot;fnref:n&quot;&gt;&lt;a href=&quot;#fn:n&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. I will continue to document my progress on this blog. First, I just want a place to dump all my notes. That way, if (when) shit start burning, I can at least replicate what I know to work. Second, other people might find it useful and if I can help you avoid some of the headaches I went through, then all the better.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;the-hardware&quot;&gt;The Hardware&lt;/h2&gt;
&lt;p&gt;### ESP8266
Ah, the &lt;a href=&quot;http://www.ebay.com/itm/151657399118&quot;&gt;ESP8266, the $2 Wifi Module&lt;/a&gt;&lt;sup id=&quot;fnref:n:1&quot;&gt;&lt;a href=&quot;#fn:n&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. For the impatient, it’s also &lt;a href=&quot;http://www.amazon.com/dp/B00O34AGSU&quot;&gt;available on Amazon Prime for $8&lt;/a&gt; with Prime Free Same Day Delivery&lt;sup id=&quot;fnref:n:2&quot;&gt;&lt;a href=&quot;#fn:n&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;Isn’t it just the most adorable thing? &lt;img src=&quot;/content/images/2015/07/IMG_5414.JPG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;ftdi-cable&quot;&gt;FTDI Cable&lt;/h3&gt;
&lt;p&gt;To connect to my laptop, I used Adafruit’s &lt;a href=&quot;https://www.adafruit.com/products/70&quot;&gt;USB FTDI Cable&lt;/a&gt;. &lt;img src=&quot;/content/images/2015/07/IMG_5415.JPG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;jumper-wires--breadboard&quot;&gt;Jumper Wires &amp;amp; Breadboard&lt;/h3&gt;
&lt;p&gt;You can use &lt;a href=&quot;http://www.amazon.com/Jumper-Wires-Premium-200mm-Female/dp/B008MRZSH8&quot;&gt;female-to-male jumper wires&lt;/a&gt; and &lt;a href=&quot;http://www.amazon.com/dp/B00ARTWJ44&quot;&gt;male-to-male jumper wires&lt;/a&gt; to connect the pins on the ESP to the FTDI Cable. You might also need a &lt;a href=&quot;http://www.amazon.com/gp/product/B005GYAIES/&quot;&gt;breadboard&lt;/a&gt; since two wires sometime go to one input.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;the-software-nodemcu&quot;&gt;The Software: NodeMCU&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://nodemcu.com/index_en.html&quot;&gt;NodeMCU&lt;/a&gt; lets you use LUA scripting language to program the ESP8266. Apparently, there are some issues with memory going this route. I found it to be pretty straightforward.&lt;/p&gt;

&lt;p&gt;If you are comfortable with Arduino, there is an Arduino library. I’ll cover how to use ArduinoIDE in a different post.&lt;/p&gt;

&lt;p&gt;Here’s what I did to get it working&lt;sup id=&quot;fnref:n:3&quot;&gt;&lt;a href=&quot;#fn:n&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;h3 id=&quot;hooked-up-esp8266-in-nodemcu-flasher-mode&quot;&gt;1. Hooked up ESP8266 in NodeMCU Flasher Mode&lt;/h3&gt;
&lt;table style=&quot;font-size: 0.8em&quot;&gt;
&lt;tr&gt;
&lt;td style=&quot;background: #fff&quot;&gt;&lt;img src=&quot;/content/images/2015/07/esp8266_dia.jpg&quot; style=&quot;max-height:120px; margin: 0&quot; /&gt;&lt;/td&gt;
&amp;lt;td colspan=2 style=&quot;background: #fff&quot;&amp;gt;&lt;img src=&quot;/content/images/2015/07/ftdi_dia-1.jpg&quot; style=&quot;max-height: 120px; margin: 0&quot; /&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;ESP8266&lt;/th&gt;&lt;th&gt;FTDI&lt;/th&gt;&lt;th&gt;Why?&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;VCC&lt;/td&gt;&lt;td&gt;VCC&lt;/td&gt;&lt;td&gt;POWER!&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;GND&lt;/td&gt;&lt;td&gt;GND&lt;/td&gt;&lt;td&gt;POWER!&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;TX&lt;/td&gt;&lt;td&gt;RX&lt;/td&gt;&lt;td&gt;Send info from esp to computer&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;RX&lt;/td&gt;&lt;td&gt;TX&lt;/td&gt;&lt;td&gt;Send info from computer to esp&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;GPIO0&lt;/td&gt;&lt;td&gt;GND&lt;/td&gt;&lt;td&gt;Ground to start update&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;GPIO2&lt;/td&gt;&lt;td&gt;None&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Reset&lt;/td&gt;&lt;td&gt;None&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;CH_PD&lt;/td&gt;&lt;td&gt;VCC&lt;/td&gt;&lt;td&gt;Enables the chip&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;h3 id=&quot;flash-nodemcu-firmware&quot;&gt;2. Flash NodeMCU Firmware&lt;/h3&gt;
&lt;p&gt;Mac/Linux Command Line can use Esptool (see below). Windows machines can use &lt;a href=&quot;https://github.com/nodemcu/nodemcu-flasher&quot;&gt;NodeMCU-Flasher&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;get-port-name&quot;&gt;Get Port Name&lt;/h4&gt;
&lt;p&gt;I ran this command to get the port name for my USB. The USB has to be plugged in and hooked up for this to show.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
ls /dev/tty.*
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;On a Mac, you should get something like &lt;code&gt;/dev/tty.usbserial-ABC&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For Windows, you can use your Device Manager and look under “Ports (COM and LPT)”. The Port Name should be &lt;code&gt;COM3&lt;/code&gt; or something like that. You might have to install FTDI Driver first.&lt;/p&gt;

&lt;h4 id=&quot;esptool&quot;&gt;esptool&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/themadinventor/esptool&quot;&gt;Esptool&lt;/a&gt; is a Python script that lets you flash the ESP8266 module.&lt;/p&gt;

&lt;p&gt;Download latest &lt;a href=&quot;https://github.com/nodemcu/nodemcu-firmware/tree/master/pre_build/latest&quot;&gt;NodeMCU Firmware&lt;/a&gt; (a file name “nodemcu_latest.bin”) into some folder. Then, install Esptool, I used git clone to do this. You can also just download the python file, &lt;a href=&quot;https://github.com/themadinventor/esptool/raw/master/esptool.py&quot;&gt;esptool.py&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
git clone https://github.com/themadinventor/esptool.git
cd esptool
python esptool.py --port &amp;lt;YOUR_PORT_NAME&amp;gt; write_flash 0x00000 &amp;lt;PATH_TO_FIRMWARE&amp;gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For example, say your port name is &lt;code&gt;/dev/tty.usbserial-ABC&lt;/code&gt; and you downloaded the &lt;code&gt;nodemcu_latest.bin&lt;/code&gt; to &lt;code&gt;/Users/me/nodemcu/nodemcu_latest.bin&lt;/code&gt;, you’d write:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
python esptool.py --port /dev/tty.usbserial-ABC write_flash 0x00000 /Users/me/nodemcu/nodemcu_latest.bin
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;hooked-up-esp8266-in-nodemcu-coding-mode&quot;&gt;3. Hooked up ESP8266 in NodeMCU Coding Mode&lt;/h3&gt;
&lt;p&gt;The coding mode is similar to Flash Mode, but without GPIO0 connected to ground.&lt;/p&gt;
&lt;table style=&quot;font-size: 0.8em&quot;&gt;
&lt;tr&gt;
&lt;td style=&quot;background: #fff&quot;&gt;&lt;img src=&quot;/content/images/2015/07/esp8266_dia.jpg&quot; style=&quot;max-height:120px; margin: 0&quot; /&gt;&lt;/td&gt;
&amp;lt;td colspan=2 style=&quot;background: #fff&quot;&amp;gt;&lt;img src=&quot;/content/images/2015/07/ftdi_dia-1.jpg&quot; style=&quot;max-height: 120px; margin: 0&quot; /&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;ESP8266&lt;/th&gt;&lt;th&gt;FTDI&lt;/th&gt;&lt;th&gt;Why?&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;VCC&lt;/td&gt;&lt;td&gt;VCC&lt;/td&gt;&lt;td&gt;POWER!&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;GND&lt;/td&gt;&lt;td&gt;GND&lt;/td&gt;&lt;td&gt;POWER!&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;TX&lt;/td&gt;&lt;td&gt;RX&lt;/td&gt;&lt;td&gt;Send info from esp to computer&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;RX&lt;/td&gt;&lt;td&gt;TX&lt;/td&gt;&lt;td&gt;Send info from computer to esp&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;GPIO0&lt;/td&gt;&lt;td&gt;None&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;GPIO2&lt;/td&gt;&lt;td&gt;None&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Reset&lt;/td&gt;&lt;td&gt;None&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;CH_PD&lt;/td&gt;&lt;td&gt;VCC&lt;/td&gt;&lt;td&gt;Enables the chip&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;h3 id=&quot;connect-via-serial-terminal&quot;&gt;4. Connect via Serial Terminal&lt;/h3&gt;

&lt;p&gt;For Mac/Linux, use the screen command line tool. Mac Users can also use &lt;a href=&quot;http://freeware.the-meiers.org/&quot;&gt;CoolTerm&lt;/a&gt;. Windows users can use &lt;a href=&quot;http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html&quot;&gt;PuTTY&lt;/a&gt;. Other options are covered in &lt;a href=&quot;https://learn.sparkfun.com/tutorials/terminal-basics/all&quot;&gt;Sparkfun’s Terminal Basics Guide&lt;/a&gt;. This guide starts with detailed explanation and what this “terminal” thing is and a little history as well. A good read for the curious.&lt;/p&gt;

&lt;p&gt;For NodeMCU, use &lt;code&gt;baud rate=9600&lt;/code&gt;. I’m not sure if you have to, but all the tutorials I’ve read online says to use 9600. So sure, why not. 9600.&lt;/p&gt;

&lt;h4 id=&quot;screen-command&quot;&gt;Screen Command&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://kb.iu.edu/d/acuy&quot;&gt;Screen&lt;/a&gt; allows you to use multiple windows (virtual VT100 terminals) in Mac and Linux machines. You can call it using the command line:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
screen &amp;lt;PORT_NAME&amp;gt; &amp;lt;BAUD_RATE&amp;gt;
&lt;/code&gt;
Say, you get &lt;code&gt;/dev/tty.usbserial-ABC&lt;/code&gt; as your USB port name and want to connect using &lt;code&gt;9600&lt;/code&gt; baud rate. You would type in:
&lt;code&gt;
screen /dev/tty.usbserial-ABC 9600
&lt;/code&gt;
To exit screen, &lt;code&gt;CTRL+A&lt;/code&gt; theb &lt;code&gt;CTRL+\&lt;/code&gt;one after the other.&lt;/p&gt;

&lt;h4 id=&quot;coolterm&quot;&gt;CoolTerm&lt;/h4&gt;
&lt;p&gt;You can also use &lt;a href=&quot;http://freeware.the-meiers.org/&quot;&gt;CoolTerm&lt;/a&gt; if you want a GUI tool. Open up CoolTerm, then click Options. Set the Baud Rate to 9600 and select the Port. You might have to click “Re-scan Serial Ports.”&lt;/p&gt;

&lt;p&gt;Then under “Terminal” (option on the left side), check “Handle BS and DEL Character.” This will enable you to use the backspace or delete key&lt;sup id=&quot;fnref:n:4&quot;&gt;&lt;a href=&quot;#fn:n&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;Then click “OK” and click “Connect.”&lt;/p&gt;

&lt;h3 id=&quot;start-coding&quot;&gt;5. Start Coding!&lt;/h3&gt;

&lt;p&gt;You can try a simple hello world to see if it works.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
print(&quot;hello world&quot;)
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This should return… well, hello world.&lt;/p&gt;

&lt;p&gt;Try fiddling around with some of the &lt;a href=&quot;http://nodemcu.com/index_en.html#fr_5475f7667976d8501100000f&quot;&gt;NodeMCU Examples&lt;/a&gt;. A complete list of functions you can call is &lt;a href=&quot;https://github.com/nodemcu/nodemcu-firmware/wiki/nodemcu_api_en&quot;&gt;documented here&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;initlua&quot;&gt;init.lua&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;init.lua&lt;/code&gt; is the file your ESP8266 will run at boot. Just.. don’t put an infinite loop into this file like I did the first time. If you do, you’ll have to reflash your module.&lt;/p&gt;

&lt;p&gt;Now, using a Serial Terminal you can type (or copy/paste) one line at a time. This might make your head explode. In comes luatool to save the day.&lt;/p&gt;

&lt;h4 id=&quot;luatool&quot;&gt;luatool&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/4refr0nt/luatool&quot;&gt;Luatool&lt;/a&gt; is a Python script that enables you to edit Lua using whatever text editor you wish, and then send the file to the ESP8266 module.&lt;/p&gt;

&lt;p&gt;I used Git Clone to install. But you can download the &lt;a href=&quot;https://github.com/4refr0nt/luatool/raw/master/luatool/luatool.py&quot;&gt;luatool.py file&lt;/a&gt; instead.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
git clone https://github.com/4refr0nt/luatool.git
cd luatool/luatool
&lt;/code&gt;
Then you can upload a lua file in the currently directory using: 
&lt;code&gt;bash
python luatool.py --port &amp;lt;YOUR_PORT_NAME&amp;gt; --src &amp;lt;YOUR_FILE.lua&amp;gt;
&lt;/code&gt;
For example, if you get &lt;code&gt;/dev/tty.usbserial-ABC&lt;/code&gt; as your USB port name and want to upload &lt;code&gt;foo.lua&lt;/code&gt;. You would type in:
&lt;code&gt;
python luatool.py --port /dev/tty.usbserial-ABC --src foo.lua
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;NOTE: you need to disconnect from all other connections to the ESP8266. So if you’re using CoolTerm, click “Disconnect” at the top. If you’re using &lt;code&gt;screen&lt;/code&gt;, do &lt;code&gt;Ctrl+a&lt;/code&gt; then &lt;code&gt;Ctrl+\&lt;/code&gt; to disconnect.&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;I’ve found this to be pretty nifty. Looking through the NodeMCU example, you can set up a simple web server, though the memory limits of Lua leaves much to be desired.&lt;/p&gt;

&lt;p&gt;Also, we tried on our local network and logging in takes a while. I’m not quite sure how networks work, but I’m sure that I experienced slowness. And I’m sure that I don’t like slowness.&lt;/p&gt;

&lt;h3 id=&quot;better-way-to-parse-http-responses&quot;&gt;1. Better way to parse HTTP Responses&lt;/h3&gt;

&lt;p&gt;The ESP8266 can also act as a client. It can read webpages and execute certain commands. I will need to write something to parse all the header junk out and return a JSON or something simple. Right now when I send a request, I get this monster:&lt;/p&gt;

&lt;p&gt;```
HTTP/1.1 200 OK
Server: nginx
Date: Sun, 05 Jul 2015 01:56:57 GMT
Content-Type: application/json; charset=utf-8
Transfer-Encoding: chunked
Connection: keep-alive
Status: 200 OK
X-Frame-Options: SAMEORIGIN
X-XSS-Protection: 1; mode=block
X-Content-Type-Options: nosniff
X-UA-Compatible: chrome=1
ETag: “9bb58f26192e4ba00f01e2e7b136bbd8”
Cache-Control: max-age=0, private, must-revalidate
X-Request-Id: 8f9baf99-1418-4558-90ff-de1e2b55988a
X-Runtime: 0.016318
Vary: Origin&lt;/p&gt;

&lt;p&gt;d
{“foo”:”bar”}
0
```&lt;/p&gt;

&lt;p&gt;All I really want is &lt;code&gt;{&quot;foo&quot;: &quot;bar&quot;}&lt;/code&gt; here.&lt;/p&gt;

&lt;h3 id=&quot;better-way-to-load-up-large-lua-scripts&quot;&gt;2. Better way to load up “large” lua scripts&lt;/h3&gt;

&lt;p&gt;I also need a way to write larger Lua scripts. &lt;code&gt;luatool&lt;/code&gt; is ~~a bit~~ a lot shaky with larger files (&amp;gt;40 lines). Maybe I’ll write a function that appends to a file rather than write a new file.&lt;/p&gt;

&lt;p&gt;Then again, maybe this is why people use ArduinoIDE to program the ESP8266 rather than NodeMCU. More on that later.&lt;/p&gt;

&lt;p&gt;🍻 Oh well, time to drink beer. Happy 4th of July, everyone! 🇺🇸&lt;/p&gt;

&lt;!-- FOOTNOTES --&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:n&quot;&gt;
      &lt;p&gt;And boy, do I make a lot of typos! You don’t realize how bad your typing accuracy is until they take away the backspace option. &lt;a href=&quot;#fnref:n&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt; &lt;a href=&quot;#fnref:n:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; &lt;a href=&quot;#fnref:n:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; &lt;a href=&quot;#fnref:n:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; &lt;a href=&quot;#fnref:n:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Hello (ESP8266) World</title>
   <link href="http://www.nyl.io/blog/2015/07/esp8266-hello-world"/>
   <updated>2015-07-03T17:32:04-07:00</updated>
   <id>http://www.nyl.io/blog/blog/2015/07/esp8266-hello-world</id>
   <content type="html">&lt;p&gt;Yesterday, I sat down and played with my shiny new ESP8266 module. I also got the &lt;a href=&quot;http://adafruit.com/products/2471&quot;&gt;Huzzah Breakout Board&lt;/a&gt; from Adafruit, which uses an ESP module. Actually, I’m still trying to figure out just what is the difference between ESP8266, Huzzah, and NodeMCU.&lt;/p&gt;

&lt;p&gt;So far, I’ve accomplished the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Gotten an LED to blink on the Huzzah&lt;/li&gt;
  &lt;li&gt;Gotten the Huzzah to read not one, but TWO webpages&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe class=&quot;imgur-embed&quot; width=&quot;100%&quot; height=&quot;404&quot; frameborder=&quot;0&quot; src=&quot;http://i.imgur.com/RPGykw3.gifv#embed&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;the-hardware-wirings&quot;&gt;The hardware wirings&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/content/images/2015/07/huzzahblink.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’ll post more interesting projects later when I have more time to fiddle.&lt;/p&gt;

&lt;h3 id=&quot;the-code&quot;&gt;The code&lt;/h3&gt;

&lt;p&gt;I use &lt;a href=&quot;http://freeware.the-meiers.org/&quot;&gt;CoolTerm&lt;/a&gt; for Mac and followed &lt;a href=&quot;https://learn.adafruit.com/adafruit-huzzah-esp8266-breakout&quot;&gt;Adafruit’s tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Click Options&lt;/li&gt;
  &lt;li&gt;Plug in USB&lt;/li&gt;
  &lt;li&gt;Click “Re-Scan Serial Ports”&lt;/li&gt;
  &lt;li&gt;Set Port dropdown to “usbserial-blahblah”&lt;/li&gt;
  &lt;li&gt;Set Baudrate to 9600&lt;/li&gt;
  &lt;li&gt;Click Terminal (left side)&lt;/li&gt;
  &lt;li&gt;Check the “Handle BS and Del Character,” without which I can’t use backspace&lt;sup id=&quot;fnref:n&quot;&gt;&lt;a href=&quot;#fn:n&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
  &lt;li&gt;Click OK&lt;/li&gt;
  &lt;li&gt;Click Connect&lt;/li&gt;
  &lt;li&gt;Type in the following code line by line&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;
gpio.mode(5, gpio.OUTPUT)
while 1 do
  gpio.write(5, gpio.HIGH)
  tmr.delay(1000000)   -- wait 1,000,000 us = 1 second
  gpio.write(5, gpio.LOW)
  tmr.delay(1000000)   -- wait 1,000,000 us = 1 second
end
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;As for the ESP8266? Well, I got the ESP8266 plugged into my laptop… that’s it.&lt;/p&gt;

&lt;p&gt;Yeah, still need work here. I would like to just use the ESP because I can get these for $2 on Ebay. I mean, the Huzzah breakout isn’t going to break the bank. It’s only $10 on Adafruit. But still, that’s a 20% decrease in my BOM&lt;sup id=&quot;fnref:n:1&quot;&gt;&lt;a href=&quot;#fn:n&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;!&lt;/p&gt;

&lt;p&gt;I think I will continue to fiddle around with Adafruit’s Huzzah Breakout. It would be nice to figure out how to hook the ESP8266 module directly to an Arduino or something, but I’m not sure what’s the deal with that right now.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:n&quot;&gt;
      &lt;p&gt;bill of materials = BOM &lt;a href=&quot;#fnref:n&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt; &lt;a href=&quot;#fnref:n:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Lean Manufacturing, v2</title>
   <link href="http://www.nyl.io/blog/2015/06/lean-manufacturing-v2"/>
   <updated>2015-06-30T15:32:51-07:00</updated>
   <id>http://www.nyl.io/blog/blog/2015/06/lean-manufacturing-v2</id>
   <content type="html">&lt;p&gt;The concept of “Lean Startup” is pretty pervasive in tech. This idea comes from &lt;a href=&quot;https://en.wikipedia.org/wiki/Lean_manufacturing&quot;&gt;Lean Manufacturing&lt;/a&gt;, which argues the benefits of small batch production. Smaller batches enables manufacturers to eliminate bottlenecks in production, reduce waste, and continuously improve. Eric Ries applied this concept to software and coined the term “Lean Startup.” Release small updates, and release often. With each release, test hypotheses, learn, and iterate.&lt;/p&gt;

&lt;p&gt;The search term “Lean Startup” now returns 4.7 Million hits on Google. The book has 800+ reviews on Amazon. 67,000+ students signed up for the &lt;a href=&quot;https://www.udemy.com/lean-startup-sxsw-2012-videos-and-presentations/&quot;&gt;Lean Startup Udemy Course&lt;/a&gt;. I think people like this thing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But wait… what about manufacturing?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Manufacturing isn’t very lean when matched against the software industry. Bits and bytes are cheap. Atoms are expensive.&lt;/p&gt;

&lt;p&gt;This is changing.&lt;/p&gt;

&lt;h2 id=&quot;the-rise-of-small-batch-manufacturing&quot;&gt;The Rise of Small Batch Manufacturing&lt;/h2&gt;

&lt;p&gt;The internet has made it easy to buy and acquire cheap electronic parts, prototyping boards, and raw materials. We now have access to prototyping and fabrication services like &lt;a href=&quot;http://shapeways.com&quot;&gt;Shapeways&lt;/a&gt; for 3D Printing, &lt;a href=&quot;http://ponoko.com&quot;&gt;Ponoko&lt;/a&gt; for Laser Cutting, &lt;a href=&quot;http://oshpark.com&quot;&gt;OSHPark&lt;/a&gt; for PCB. All of these services have a minimum order quantity of one&lt;sup id=&quot;fnref:n&quot;&gt;&lt;a href=&quot;#fn:n&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;!--
You have tools like [TinkerCAD](http://tinkercad.com), [OnShape](http://onshape.com), and [Blender](http://blender.org) for free modeling tools. You have [Fritzing](http://fritzing.org) and [KiCAD](http://kicad-pcb.org) for for free electronic design software. [Arduinos](http://www.arduino.cc) and [Raspberry Pi](https://www.raspberrypi.org/) makes it easier to put together prototypes. 

Sites like [Instructables](http://instructables.com), [Adafruit](http://learn.adafruit.com), and [Hackaday](http://hackaday.com) feed the hungry inventors-to-be loads of free educational materials. Loads! --&gt;

&lt;p&gt;We are witnessing the growth of an ecosystem that supports smaller and smaller batch manufacturing.&lt;/p&gt;

&lt;p&gt;So what does this “small batch” business enable?&lt;/p&gt;

&lt;h2 id=&quot;innovation&quot;&gt;1. Innovation&lt;/h2&gt;

&lt;p&gt;You have 10 users buy your first batch. You learn something from 10 users. You use that knowledge to make the next batch better. PROFIT!&lt;/p&gt;

&lt;p&gt;Scratch that. In the earliest stage of product development, it doesn’t even take 10 users. It only takes one. You.&lt;/p&gt;

&lt;p&gt;These can be simple things from where to put the power cord adapter to more complex design issues like the wireless receiver doesn’t work when lefties use your device (ahem, I’m looking at you Apple).&lt;/p&gt;

&lt;h2 id=&quot;commitment&quot;&gt;2. Commitment&lt;/h2&gt;

&lt;p&gt;Small batches make production easier to commit to. One thing I don’t see enough of (or come to think of it, I don’t see ever) is the Kickstarter limit. Whenever Kickstarter projects run late, one of the root causes seem to be they were way more successful than anybody anticipated. The factories they lined up for production were more suitable for small batches. Their super awesome multi-million Kickstarter then threw the whole production plan out of whack. Annoying humble braggedness aside, it becomes a thorny problem for the backers of such projects.&lt;/p&gt;

&lt;p&gt;Here’s something crazy: &lt;strong&gt;more isn’t always better&lt;/strong&gt;. I wonder if they just cap how much funding they can get (or how much funding comes with a promise of a product), whether they will end up with a better product, happier customers, and more fans. In the long term, it might even help their business and product if they just say “NO” to more money upfront.&lt;/p&gt;

&lt;h2 id=&quot;community&quot;&gt;3. Community&lt;/h2&gt;

&lt;p&gt;Speaking of fans, there’s a new currency in the world, one based on social interactions. Community literally has value. &lt;a href=&quot;http://usv.com&quot;&gt;Union Square Ventures&lt;/a&gt; based their own investment theses around community. Why? Because community is hard for competitors to rebuild.&lt;/p&gt;

&lt;p&gt;Smaller batches enable improvements more often. This drives the community to participate. If I see my feature requests implemented, my itches scratched, I am incentivized to offer more feedback in the future. Community is important. The question of which 3D printer I recommend often boils down to which has the more active community.&lt;/p&gt;

&lt;p&gt;There’s a difference between community and customers. Customers buy, community does so much more. Community will also help improve your product. Some provide feedback; others contribute code (if we’re talking about open sourced products). Often, the community takes the place of a customer support team. People help one another with their products.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Software took the concept of “lean manufacturing” from the manufacturing industry. And now, manufacturing is catching up to its own reputation.&lt;/p&gt;

&lt;p&gt;Hardware speed and software speed are still orders of orders of magnitudes apart. I suspect that this gap will shrink more quickly than we can grasp.&lt;/p&gt;

&lt;p&gt;I can’t wait to see how Lean Manufacturing will change how things are made.&lt;/p&gt;

&lt;hr /&gt;

&lt;!--
Notes
- Small batch
- Iteration (Lean Manufacturing to Lean Startup to Lean Manufacturing)
- Inventor = Entrepreneur = Designer
- Open source, accessible
- Software + Hardware = New XWare
--&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:n&quot;&gt;
      &lt;p&gt;Well, technically OSHPark has 3 QTY, but it’s still very cheap at 3. &lt;a href=&quot;#fnref:n&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Making Custom PCBs</title>
   <link href="http://www.nyl.io/blog/2015/06/making-custom-pcbs"/>
   <updated>2015-06-26T05:18:23-07:00</updated>
   <id>http://www.nyl.io/blog/blog/2015/06/making-custom-pcbs</id>
   <content type="html">&lt;div class=&quot;box-danger&quot;&gt;
PLEASE NOTE: I've written a &lt;a href=&quot;http://blog.nyl.io/hello-world-custom-pcb-fritzing/&quot;&gt;new and improved version of this guide&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Yeah! Updates!!&lt;/div&gt;

&lt;p&gt;We’ve all see something like this before.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/06/v2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The simple breadboard with a messy, beautiful rainbow of wires sticking this way and that. This part of &lt;a href=&quot;http://blog.nyl.io/dog-treat-dispenser-v3/&quot;&gt;a project&lt;/a&gt; is where I control a stepper motor, which tells the dispenser to twist the fan looking thing and dispense a treat. Luckily, Adafruit has published &lt;a href=&quot;https://learn.adafruit.com/adafruits-raspberry-pi-lesson-10-stepper-motors/overview&quot;&gt;this exact tutorial&lt;/a&gt;. So I followed the Adafruit tutorial and plugged in a whole bunch of wires where the tutorial told me to plug. Easy enough! But now, how does one tidy things up?&lt;/p&gt;

&lt;p&gt;Why, &lt;strong&gt;printed circuit boards&lt;/strong&gt;, of course! You know, those green things with lines all over them. Don’t worry. It’s not that hard.&lt;/p&gt;

&lt;h2 id=&quot;meet-fritzing-your-friendly-pcb-designer&quot;&gt;Meet Fritzing, your friendly PCB designer&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://fritzing.org/download/&quot;&gt;Fritzing&lt;/a&gt; is kind of like LEGOs of PCB design. It’s simple, good for learning. A stepping stone to Eagle or KiCAD.&lt;/p&gt;

&lt;h3 id=&quot;step-1-virtual-breadboard&quot;&gt;Step 1: Virtual Breadboard&lt;/h3&gt;

&lt;p&gt;This is my favorite part of Fritzing. As a novice hardware hacker, it helps that I start with something I already have working: breadboards and jumper wires.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.nyl.io/content/images/2015/06/fritzing_breadboard-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With Fritzing, you start with a virtual breadboard set up. Click the “Breadboard” tab. Here, you can search for various components, like “breadboard” and “Raspberry Pi” and “L293D” (the motor driver I used).&lt;/p&gt;

&lt;p&gt;Add components to the workspace. Then click to start dragging wires around. Protip: press the control (Windows) or cmd (Mac) key to make the wires all bendy… just like in real life.&lt;/p&gt;

&lt;h3 id=&quot;step-2-schematics&quot;&gt;Step 2: Schematics&lt;/h3&gt;

&lt;p&gt;If you switch to the Schematics tab, you’ll see an outline of the schematics. But… I didn’t really deal with this view very much. So let’s skip it. =P&lt;/p&gt;

&lt;h3 id=&quot;step-3-pcb&quot;&gt;Step 3: PCB&lt;/h3&gt;

&lt;p&gt;Now we get to the fun part! When you open up the PCB view, you should see something like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/06/fritzing_pcb-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is just the components you selected. Well, they are holes to plug in the components you selected.&lt;/p&gt;

&lt;p&gt;The dotted lines represent where the connections should go. Our goal is to turn these dotted line (airwires) into routes. To do this, just drag a dotted line into place.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/06/Pasted_Image_6_25_15__1_15_AM.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The goal is to create a board without any routes criss crossing with another route. That would be bad. Electricity would ram into one another and we will not have a good time.&lt;/p&gt;

&lt;p&gt;One way to tackle this is to use multiple layers. For me, 2 layers was sufficient to route all the airwires without anything crossing.&lt;/p&gt;

&lt;p&gt;To connect a route on the top layer with one on the bottom layer, you use via. As in, go from top to bottom via this connection. To do this add a bend point by right clicking on route then clicking “Add a Bendpoint.” Then, right click on the bend point and choose “Convert Bendpoint to Via.” Then you can right click on different parts of the route to move between layers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/06/Pasted_Image_6_25_15__1_19_AM.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Eventually, all your routes come together nice and cleanly. You can check that your routes are indeed error free by using the nifty design checker (Tool Bar &amp;gt; Route &amp;gt; Design Rule Check).&lt;/p&gt;

&lt;p&gt;I ended up with something like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/06/Pasted_Image_6_25_15__1_25_AM-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The dots on top is just a marking I made to tell me which pins I need to solder. Or more importantly, which pins I can use as practice. My soldering skills are… lacking.&lt;/p&gt;

&lt;p&gt;You can add text (like the dots or the “badwolf v3” in the bottom left) by searching for “silkscreen” under the Parts section in the right toolbar.&lt;/p&gt;

&lt;h2 id=&quot;production&quot;&gt;Production&lt;/h2&gt;

&lt;p&gt;Now that we have a PCB sketch, let’s get to making.&lt;/p&gt;

&lt;p&gt;What I ended up doing is exporting to Gerber files. It’s a series of files that tells the machine where to drill holes, how to label things, and of course where to put down the copper so your precious electricity can flow to their rightful homes.&lt;/p&gt;

&lt;p&gt;You can preview your Gerber files to make sure they work using &lt;a href=&quot;http://www.gerblook.org&quot;&gt;GerbLook&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;pcb-prototyping-companies&quot;&gt;PCB Prototyping Companies&lt;/h3&gt;

&lt;p&gt;I did a few searches, and found some good options. This is based on:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;shipping to Seattle&lt;/li&gt;
  &lt;li&gt;2 layer board&lt;/li&gt;
  &lt;li&gt;board that measures 1.5x1.75 in&lt;sup&gt;2&lt;/sup&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Actual mileage may vary depending on your design.&lt;/p&gt;

&lt;table style=&quot;font-size: 0.75em&quot;&gt;
&lt;tr style=&quot;font-weight: bold&quot;&gt;&lt;td&gt;Company&lt;/td&gt;&lt;td&gt;QTY&lt;/td&gt;&lt;td&gt;Lead Time (to Seattle)&lt;/td&gt;&lt;td&gt;Price&lt;/td&gt;&lt;td&gt;Limits/Pricing&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://oshpark.com&quot;&gt;OSHPark&lt;/a&gt;&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;10-14 business days&lt;br /&gt;8-12 production + 2 shipping&lt;/td&gt;&lt;td&gt;$12&lt;br /&gt;$12 PCB + $0 shipping&lt;/td&gt;&lt;td&gt;$5/in&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://pcbnet.com&quot;&gt;PCBNet&lt;/a&gt;&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;9 BDs&lt;br /&gt;5 prod + 4 shipping&lt;/td&gt;&lt;td&gt;$25&lt;br /&gt;$25 PCB + $0 shipping&lt;/td&gt;&lt;td&gt;under 60in&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://imall.iteadstudio.com&quot;&gt;ITEAD&lt;/a&gt;&lt;/td&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;6 BDs&lt;br /&gt;4 prod + 2 shipping&lt;/td&gt;&lt;td&gt;$28&lt;br /&gt;$10 PCB + $18 shipping&lt;/td&gt;&lt;td&gt;under 5x5cm&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://imall.iteadstudio.com&quot;&gt;ITEAD&lt;/a&gt;&lt;/td&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;20 BDs (could be longer)&lt;br /&gt;4 prod + 16-? shipping&lt;/td&gt;&lt;td&gt;$15&lt;br /&gt;$10 PCB + $5 shipping&lt;/td&gt;&lt;td&gt;under 5x5cm&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://seeedstudio.com&quot;&gt;SeeedStudio&lt;/a&gt;&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;18-48 BDs&lt;br /&gt;3 prod + 15-45 shipping&lt;/td&gt;&lt;td&gt;$15&lt;br /&gt;$10 PCB + $5 shipping&lt;/td&gt;&lt;td&gt;under 5x5cm&lt;sup&gt;2&amp;lt;/sup
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://seeedstudio.com&quot;&gt;SeeedStudio&lt;/a&gt;&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;5 BDs&lt;br /&gt;3 production + 2 shipping&lt;/td&gt;&lt;td&gt;$40&lt;br /&gt;$10 PCB + $30 shipping&lt;/td&gt;&lt;td&gt;under 5x5cm&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://fr.com&quot;&gt;Fritzing&lt;/a&gt;&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;17-25 BDs&lt;br /&gt;7-11 production + 10-14 shipping&lt;/td&gt;&lt;td&gt;$21&lt;br /&gt;$17 PCB + $4 shipping&lt;/td&gt;&lt;td&gt;$5.20 + $0.96/cm&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt;&lt;/tr&gt;


In the US, the fastest/cheapest seem to be OSHPark if you have small boards. OSHPark (stands for open source hardware park) charges by the square inch. So if you have a tinyass board like my dog treat thing, it's only $12 or less. If you have a 3x3in&lt;sup&gt;2&lt;/sup&gt; board though, it's $45, even though each side only doubled in length. Yay. Behold the power of exponents. 

I ordered from ITEAD. Paid a little extra for DHL Express. Still, it came down to about $3/PCB since they ship 10 QTY. I did end up having to use an extra PCB because I'm apparently the kind of idiot who solders things backwards the first time around. 

![](http://blog.nyl.io/content/images/2015/06/01_boards.jpg)

Not bad, eh? 

Ok. Now go and make stuff. 
&lt;/sup&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
</content>
 </entry>
 
 <entry>
   <title>Internet Dog Treat Dispenser (v3)</title>
   <link href="http://www.nyl.io/blog/2015/06/dog-treat-dispenser-v3"/>
   <updated>2015-06-23T16:36:47-07:00</updated>
   <id>http://www.nyl.io/blog/blog/2015/06/dog-treat-dispenser-v3</id>
   <content type="html">&lt;p&gt;Once upon a time, a few dog people (people who love dogs, not dog+people hybrids) made a remote controlled dog treat dispenser. You know, because that’s what dog people do at hackathons. Things like this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://ajaxthedog.com/post/29945882455/&quot;&gt;&lt;img src=&quot;/content/images/2015/06/v1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It dispenses treats with a text message. The Arduino is connected to the computer, which listens for the text.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.nyl.io/remote-dog-treat-dispenser-v2/&quot;&gt;Version 2&lt;/a&gt; was a little tidier. We made it using a Raspberry Pi instead of a computer, which meant it didn’t have to be tethered to a computer. It plugs right into a an USB wall output or battery pack.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/06/v2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, V2 was nice and dandy, but it was still messy. I mean, look at all those wires. So I decided to fix that. By making a custom PCB (printed circuit board). I mean, &lt;strong&gt;how hard can it be?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It turns out: &lt;strong&gt;not that hard!&lt;/strong&gt; Nowadays, with better software, the internet to connect you with manufacturers, it’s getting easier and easier.&lt;/p&gt;

&lt;h2 id=&quot;v3-internet-dog-treat-dispenser&quot;&gt;V3: Internet Dog Treat Dispenser&lt;/h2&gt;

&lt;p&gt;For the electronics, I used &lt;a href=&quot;http://fritzing.org/home/&quot;&gt;Fritzing&lt;/a&gt;, which is an open source, free schematics and PCB designer. I like it because you start with a visual representation of the breadboard, Raspberry PI, and whatever components. You drag and drop the exact components you need and wire it up exactly how you’d wire it up in real life. From there, the virtual wiring turns into schematics and PCB layout.&lt;/p&gt;

&lt;h3 id=&quot;step-1-real-world&quot;&gt;Step 1: Real World&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/content/images/2015/06/v2_realworld.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;step-2-virtual-bread-board&quot;&gt;Step 2: Virtual Bread Board&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/content/images/2015/06/fritzing_breadboard-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;step-3-pcb&quot;&gt;Step 3: PCB!&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/content/images/2015/06/fritzing_pcb.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Routing the PCB was kind of fun, like solving a puzzle.&lt;/p&gt;

&lt;p&gt;Fritzing exports to Gerber files, which most PCB manufacturers take. I spent a little while Googling around for cheap PCB prototypers (low volume, relatively quick turnaround). I ended up using &lt;a href=&quot;http://imall.iteadstudio.com/&quot;&gt;ITEAD&lt;/a&gt; in Shenzhen. For a PCB of this size (1.5x1.75 inches), they will produce 10 QTY for $10. Not a bad deal.&lt;/p&gt;

&lt;p&gt;For a more detailed write up of how I made Custom PCBs, check out &lt;a href=&quot;http://blog.nyl.io/making-custom-pcbs/&quot;&gt;this blog post&lt;/a&gt;. The Fritzing and Gerber files are available on &lt;a href=&quot;https://github.com/neuralfirings/badwolf&quot;&gt;this project’s GitHub Page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There were a few places that had cheap PCBs, most of them are based in China. The kicker is the shipping. The main reason I went with ITEAD was because they offered the “cheapest” expedited shipping options–$18 for DHL Express 3 Days.&lt;/p&gt;

&lt;p&gt;Fast forward a week (it took them 6 business days from order to delivery!), I got a fresh pack of custom PCBs from China!!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/06/01_boards.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A few headers here, a few &lt;small&gt;crappy&lt;/small&gt; soldering there…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/06/02_boardassembly.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;bam-electronics&quot;&gt;BAM! ELECTRONICS!&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/06/03_board.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One end has a 13x2 pin Raspberry Pi header. There’s also 6 positive headers sticking out for the stepper motor. So, plug it into a Raspberry Pi, which is sitting in a cushy 3D printed box. Then plug the stepper motor into the PCB..&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/06/04_plugitin.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Add some more 3D printed parts (all designed in &lt;a href=&quot;http://blender.org&quot;&gt;Blender&lt;/a&gt; by the way)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/06/05_fan.JPG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Woo!!! Remote control dog (or human) treat dispenser!!!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/06/06a_openlid.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One USB connects to a webcam, and a micro USB connects to power. Best of all? No messy wires, no scotch tape.&lt;/p&gt;

&lt;p&gt;It comes with a nifty web interface, so you can see and hear a live stream of your nice or naughty pet. Give treats according.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/06/09_screenshot.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/06/07_dispense_open_lo.gif&quot; style=&quot;width: 100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then put the lid on, and you’re ready to rumble.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/06/06c_closelid.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;want-more-details-ill-give-you-more-details&quot;&gt;Want more details? I’ll give you more details.&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.nyl.io/making-custom-pcbs/&quot;&gt;Detailed write up on the Electronics part&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Coming soon: Detailed write up on 3D printing the case&lt;/li&gt;
  &lt;li&gt;Coming soon: Detailed write up on the software piece (I used Python, Node.js, Regular ol’ front end JavaScript)&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Why Ghost</title>
   <link href="http://www.nyl.io/blog/2015/05/why-ghost"/>
   <updated>2015-05-13T05:52:14-07:00</updated>
   <id>http://www.nyl.io/blog/blog/2015/05/why-ghost</id>
   <content type="html">&lt;p&gt;Every year or so, I test out some new blogging platform. It’s fun, I suppose. Trying out new technology. For a little over a year, I’ve been writing on &lt;a href=&quot;http://medium.com/@nliang&quot;&gt;Medium&lt;/a&gt;. It was easy. They had a nice interface, and showed promise of traffic and readership.&lt;/p&gt;

&lt;p&gt;They had a nice interface, but ultimately not the one I need. I liked that the editor mirrors the final product. There is no need for preview because the preview is what you see as you write. As I tried to write more, I started using other editors like iA Writer, which used markup. As I got close to publishing, I copy pasted what I wrote in markup over to Medium and spent time tidying up the formatting. In the end, the more I wrote, the less I used the nice interface.&lt;/p&gt;

&lt;p&gt;I also looked at traffic. For the most part, traffic came from outside Medium. External blogs that referred to my article, Twitter, Facebook. There were a few that came from recommends and Medium-related medium (hehe), but not enough to really make a difference.&lt;/p&gt;

&lt;p&gt;In the end, Medium was a nice experiment. But I think it’s time to pull my content to my own domain. Also, it was about time for me to trying some new (or old) blogging and writing platform again. That part is the fun part.&lt;/p&gt;

&lt;p&gt;In the end, I choose &lt;a href=&quot;http://ghost.org&quot;&gt;Ghost&lt;/a&gt; paired with my own domain. It’s markup based, which suits the tools I use to write. It has an active community. The developers seem to publish regular updates. And it’s focused around blogging, which is nice.&lt;/p&gt;

&lt;p&gt;Now that I write these reasons, it all seems so simple. But it’s hard to do. Having an active community and publishing regular updates. Both of these are so simple yet difficult at the same time. I suppose that’s what makes it worthwhile.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Sightreading</title>
   <link href="http://www.nyl.io/blog/2015/05/sightreading"/>
   <updated>2015-05-04T16:21:44-07:00</updated>
   <id>http://www.nyl.io/blog/blog/2015/05/sightreading</id>
   <content type="html">&lt;p&gt;I once heard of a concert pianist who prepare for concerts by reading the scores. On the plane ride over to a particular concert, he will look at the score and think about how to approach the piece. When he arrives, he just plays. The practice happens all in his head.&lt;/p&gt;

&lt;p&gt;How does he do it? How does he encounter some of the most difficult pieces in the piano repetoire and sight read it as though it were nothing?&lt;/p&gt;

&lt;p&gt;My theory is that through his career, he’s played enough pieces to recognize patterns better than the rest of us. It’s like reading. When you start to learn to read, you piece out one letter at a time. Then eventually you start recognizing parts of words, you piece out “to+ge+ther.” With more practice, you start digesting whole words and even whole phrases. When you skim a paragraph, you are no longer thinking about individual syllables or letters, but digesting chunks of information at a time&lt;sup id=&quot;fnref:n&quot;&gt;&lt;a href=&quot;#fn:n&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;Most people playing piano never advance past the first two stages. When confronted with a new piece, they are still sounding out the music one note at a time. I think when professionals do it, they absorb the music in chunks. The patterns are ingrained after years of practice. The work is how to interpret these patterns in interesting ways.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:n&quot;&gt;
      &lt;p&gt;Unless of course you have dyslexia. &lt;a href=&quot;#fnref:n&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Layout</title>
   <link href="http://www.nyl.io/blog/2015/05/layout"/>
   <updated>2015-05-03T16:53:30-07:00</updated>
   <id>http://www.nyl.io/blog/blog/2015/05/layout</id>
   <content type="html">&lt;p&gt;You’re live! Nice.&lt;/p&gt;

&lt;h1 id=&quot;heading-1&quot;&gt;Heading 1&lt;/h1&gt;
&lt;p&gt;We’ve put together a little post to introduce you to the Ghost editor and get you started.&lt;/p&gt;

&lt;h2 id=&quot;heading-2&quot;&gt;Heading 2&lt;/h2&gt;
&lt;p&gt;You can manage your content by signing in to the admin area at &lt;code&gt;&amp;lt;your blog URL&amp;gt;/ghost/&lt;/code&gt;. When you arrive, you can select this post from a list on the left and see a preview of it on the right. Click the little pencil icon at the top of the preview to edit this post and read the next section!&lt;/p&gt;

&lt;h3 id=&quot;heading-3-getting-started&quot;&gt;Heading 3: Getting Started&lt;/h3&gt;

&lt;p&gt;Ghost uses something called Markdown for writing. Essentially, it’s a shorthand way to manage your post formatting as you write!&lt;/p&gt;

&lt;h4 id=&quot;heading-4&quot;&gt;Heading 4&lt;/h4&gt;
&lt;p&gt;Writing in Markdown is really easy. In the left hand panel of Ghost, you simply write as you normally would. Where appropriate, you can use &lt;em&gt;shortcuts&lt;/em&gt; to &lt;strong&gt;style&lt;/strong&gt; your content. For example, a list:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Item number one&lt;/li&gt;
  &lt;li&gt;Item number two
    &lt;ul&gt;
      &lt;li&gt;A nested item&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;A final item&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;or with numbers!&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Remember to buy some milk&lt;/li&gt;
  &lt;li&gt;Drink the milk&lt;/li&gt;
  &lt;li&gt;Tweet that I remembered to buy the milk, and drank it&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;links&quot;&gt;Links&lt;/h3&gt;

&lt;p&gt;Want to link to a source? No problem. If you paste in a URL, like http://ghost.org - it’ll automatically be linked up. But if you want to customise your anchor text, you can do that too! Here’s a link to &lt;a href=&quot;http://ghost.org&quot;&gt;the Ghost website&lt;/a&gt;. Neat.&lt;/p&gt;

&lt;h3 id=&quot;what-about-images&quot;&gt;What about Images?&lt;/h3&gt;

&lt;p&gt;Images work too! Already know the URL of the image you want to include in your article? Simply paste it in like this to make it show up:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ghost.org/images/ghost.png&quot; alt=&quot;The Ghost Logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Not sure which image you want to use yet? That’s ok too. Leave yourself a descriptive placeholder and keep writing. Come back later and drag and drop the image in to upload:&lt;/p&gt;

&lt;p&gt;![A bowl of bananas]&lt;/p&gt;

&lt;h3 id=&quot;quoting&quot;&gt;Quoting&lt;/h3&gt;

&lt;p&gt;Sometimes a link isn’t enough, you want to quote someone on what they’ve said. It was probably very wisdomous. Is wisdomous a word? Find out in a future release when we introduce spellcheck! For now - it’s definitely a word.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Wisdomous - it’s definitely a word.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;working-with-code&quot;&gt;Working with Code&lt;/h3&gt;

&lt;p&gt;Got a streak of geek? We’ve got you covered there, too. You can write inline &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; blocks really easily with back ticks. Want to show off something more comprehensive? 4 spaces of indentation gets you there.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.awesome-thing {
    display: block;
    width: 100%;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;ready-for-a-break&quot;&gt;Ready for a Break?&lt;/h3&gt;

&lt;p&gt;Throw 3 or more dashes down on any new line and you’ve got yourself a fancy new divider. Aw yeah.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;advanced-usage&quot;&gt;Advanced Usage&lt;/h3&gt;

&lt;p&gt;There’s one fantastic secret about Markdown. If you want, you can write plain old HTML and it’ll still work! Very flexible.&lt;/p&gt;

&lt;p&gt;&lt;input type=&quot;text&quot; placeholder=&quot;I'm an input field!&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That should be enough to get you started. Have fun - and let us know what you think :)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Are Brands Becoming Irrelevant?</title>
   <link href="http://www.nyl.io/blog/2015/04/are-brands-becoming-irrelevant"/>
   <updated>2015-04-27T04:07:00-07:00</updated>
   <id>http://www.nyl.io/blog/blog/2015/04/are-brands-becoming-irrelevant</id>
   <content type="html">&lt;p&gt;Last Friday, somebody asked me, “what’s your favorite fashion brand?” This question caught me a bit off guard. It’s a perfectly reasonable question, especially since we were at a talk about fashion. And isn’t fashion a world carved out by empires of brands?&lt;/p&gt;

&lt;p&gt;I thought about what I like, and it’s not brands that come to mind. I think about styles, silhouettes, colors, lines. Abstract concepts. I think about people whose fashion sense I admire. I don’t know (or care) where they buy their clothes from.&lt;/p&gt;

&lt;p&gt;There are a few brands that I like. But, I don’t like these brands for their name. I like these brands because I like their style and I know they have clothes that fit my body. Defaulting to a favorite brand is a cheat sheet, a filtering mechanism. I’ve already evaluated that brand against my standards for style and fit, so if I shop there I know I will find clothes that fit and flatter. It’s not the brand that I love, it’s the style and fit that I love.&lt;/p&gt;

&lt;p&gt;Look forwarding, I wonder if other sources will replace brands as the “cheat sheet” for finding good style and fit. Rather than perusing the latest White House Black Market catalogue, I am browsing blogs like Garance Dore or Extra Petite to find inspiration. Or maybe Pinterest and Polyvore will implement some genius AI that recommends outfits based on my boards and likes.&lt;/p&gt;

&lt;p&gt;Brands update their collection a few times a year. Magazines publish every month. Blogs, Pinterest, Polyvore publishes new content every second. Talk about fast fashion, right?&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Perfection is Arrogance</title>
   <link href="http://www.nyl.io/blog/2015/04/perfection-is-arrogance"/>
   <updated>2015-04-13T15:56:00-07:00</updated>
   <id>http://www.nyl.io/blog/blog/2015/04/perfection-is-arrogance</id>
   <content type="html">&lt;p&gt;We’ve all worked with these people. Perfectionists. Exacting people who want things done a specific way. Their way. The perfect way.&lt;/p&gt;

&lt;p&gt;At least that’s what they hide behind. This idea that they have incredibly high standards, which explains why they are so demanding, of course.&lt;/p&gt;

&lt;p&gt;This makes one key assumption: that they know what perfection is.&lt;/p&gt;

&lt;p&gt;Now that’s mighty arrogant. Isn’t it?&lt;/p&gt;

&lt;p&gt;Me, I prefer experimentation to perfection. Start building, ask questions, and observe the hell out of things. Correct mistakes along the way, and leave identifying perfection to the users. I’m not prescient enough to predict what people may want.&lt;/p&gt;

&lt;p&gt;I choose humble experimentation.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Ownership to Accessibility</title>
   <link href="http://www.nyl.io/blog/2015/04/ownership-to-accessibility"/>
   <updated>2015-04-12T15:57:00-07:00</updated>
   <id>http://www.nyl.io/blog/blog/2015/04/ownership-to-accessibility</id>
   <content type="html">&lt;p&gt;The world is shifting from valuing ownership to valuing accessibility.&lt;/p&gt;

&lt;p&gt;I use Rdio to access music. I own very few CDs.&lt;/p&gt;

&lt;p&gt;I use Kindle to access books. I trim down my bookshelf every year.&lt;/p&gt;

&lt;p&gt;I use Wikipedia to access knowledge. I have a bad memory anyway.&lt;/p&gt;

&lt;p&gt;To live in this world, I don’t need more space in my brain. I need more RAM and bandwidth.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Good Design, Bad UX</title>
   <link href="http://www.nyl.io/blog/2015/04/good-design-bad-ux"/>
   <updated>2015-04-11T16:04:00-07:00</updated>
   <id>http://www.nyl.io/blog/blog/2015/04/good-design-bad-ux</id>
   <content type="html">&lt;p&gt;This parking sign project popped up in my newsfeed a few times last week. &lt;a href=&quot;http://www.lamayor.org/mayor_garcetti_unveils_new_easy_to_read_parking_signs?recruiter_id=7&quot;&gt;LA is piloting this new signage design&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/05/parkingsigns.png&quot; alt=&quot;New Signage Design&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The two problem with the sign? It’s not usable and it doesn’t address the root cause of the problem. It’s a perfect example of good design, bad user experience (UX).&lt;/p&gt;

&lt;h2 id=&quot;good-design&quot;&gt;Good Design&lt;/h2&gt;

&lt;p&gt;I find the visual design quite pleasing.&lt;/p&gt;

&lt;p&gt;They used a format that we are all familiar with. The signs are laid out the way our calendar apps display our schedule. Leveraging familiarity is a good design choice.&lt;/p&gt;

&lt;p&gt;They use big, bold colors to represent concepts. My eyes like the simplicity.&lt;/p&gt;

&lt;p&gt;They trimmed down the sign to the basic questions we all want to know: can I park here and how long? Keep It Simple Stupid.&lt;/p&gt;

&lt;h2 id=&quot;bad-user-experience&quot;&gt;Bad User Experience&lt;/h2&gt;

&lt;p&gt;So while the sign is visually pleasant, it doesn’t work for me. By the way, I have driven daily in Brooklyn, Queens, and Manhattan when I lived in NYC.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. This sign is not safe. (this is kindda important)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In NYC, different street have different hours when you can or can’t park. You can park here from midnight to 6 AM, there from midnight to 3 AM, and the street next to it? 8 AM to 12 PM. It looks like this sign is designed in a way that stretches the hour marks to accommodate for the individual streets. In the other words, the spacing between hour marks on this sign differ from street to street. This means you can’t just glance at a sign to know whether you can park or not. Because of the small font, you need to carefully drive up close and read the sign.&lt;/p&gt;

&lt;p&gt;This is dangerous! You want to be able to glance at a sign and then shift your eyes back on the road, where it belongs. After all, this is NYC. You share the road with cars, pedestrians, and cyclists.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. I’m not convinced this sign solves the problem.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;One value proposition is the ability to combine multiple signs into one consolidated sign. I suspect, though, that the totem pole of parking signs is symptomatic of the way goverment works — different departments with disjointed processes. Actually, the most annoying signs are the ad-hoc signs. The ones where they post up a piece of paper or temporary signage for pop up farmers market, on location film and television, or concerts.&lt;/p&gt;

&lt;p&gt;Solving the problem of unified signage may not be creating a unified sign, but changing the process of how various organizations get their signage approved in the first place.&lt;/p&gt;

&lt;p&gt;UX is not always about making better product, sometimes it’s about better policies and processes.&lt;/p&gt;

&lt;h2 id=&quot;my-suggestion&quot;&gt;My suggestion?&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Integrate with Google Maps and other GPS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/05/googlemapsparking.jpeg&quot; alt=&quot;Google Maps parking app&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When I’m traveling to a new place, I usually have Google Maps or some sort of GPS system on. If my GPS tells me ahead of time of where I can park, that would be idea. I wouldn’t have to scour the streets for signage, then spend time reading the sign when I should be focused on the road.&lt;/p&gt;

&lt;p&gt;Also, often by the time I read the signage I already missed a good chunk of available parking spots. Then I have to loop around the block and see whether there are any parking space alongside the street.&lt;/p&gt;

&lt;p&gt;If Google Maps can help me plan out a “parking finder route,” that would be ideal. I wouldn’t have to even worry about reading signage or plotting routes for how to find parking.&lt;/p&gt;

&lt;p&gt;“But what about times when you don’t use Google Maps?”&lt;/p&gt;

&lt;p&gt;Valid question. The times when I don’t use Google Maps are times when I travel to places I’m already familiar with. In those cases, I’m usually fairly familiar with where I can park at what time, so I wouldn’t need this feature anyway. Moot!&lt;/p&gt;

&lt;p&gt;By the way, this has been &lt;a href=&quot;http://wheels.blogs.nytimes.com/2013/04/12/new-york-city-unveils-parking-app-pilot-program/&quot;&gt;piloted&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dynamic LCD Displays&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/05/seattlespeedsigns.jpeg&quot; alt=&quot;Seattle Dynamic Speed Signs&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Dynamic LCD displays that display clearly “yes/no” for parking. In Seattle, some of the speed signs are on interactive displays. The speed limit then can change with the traffic congestion. This is a much more pricey implementation of course. There’s a lot more to manufacture, install, and maintain.&lt;/p&gt;

&lt;p&gt;But, imagine if instead of parking signs, there are interactive displays that plainly tells you “2 hrs until 8 PM” or “No parking until 7 PM.” It ignores all the other rules that may not apply, like showing you what Saturday rules when it’s Thursday. Different signage requestors (concertos, schools, road cleaners) can input their rules and it all gets compiled into one unified message.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I’m sure my suggestions have their pitfalls as well. And I would love to hear what they are.&lt;/p&gt;

&lt;p&gt;Design and UX is a process, a conversation between different parties. So, even though I think the user experience for this “Google Calendar Signage” is bad, the fact that the designer got me to write about it and think about it means they’ve won.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Genuinely Curious</title>
   <link href="http://www.nyl.io/blog/2015/04/genuinely-curious"/>
   <updated>2015-04-09T16:09:00-07:00</updated>
   <id>http://www.nyl.io/blog/blog/2015/04/genuinely-curious</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/content/images/2015/05/monkey-1.jpeg&quot; alt=&quot;Curious George&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I once sat down at a lunch table with some strangers, and we started chit chatting. It was one of those situations where we talked to fill the silence, because awkward noise beats awkward silence. We didn’t have anything meaty to say to each other though. We asked some of the same bland questions you hear over and over again — what do you do, where do you work, what movies do you like. You know, the usual. It was the social equivalent of watching paint dry.&lt;/p&gt;

&lt;p&gt;Then, my other friend sat down and started asking questions. And the table came to life. We were suddenly talking about all these cool things we’ve done, and fascinating thoughts we have. It was as though we were different people. Thinking back on the conversation, she asked exactly the same questions — what do you do, where do you work, etc. But there was one, simple difference.&lt;/p&gt;

&lt;p&gt;My friend is a genuinely curious human being. She was conversing because she was genuinely curious about the other people at the table.&lt;/p&gt;

&lt;p&gt;I think everybody has some nugget of fascination in them. Some people bury these nuggets deep inside, others wear it on their sleeves. Whether I can find these nuggets depends on how good I am at digging. In order to be good at digging, I have to be genuinely curious.&lt;/p&gt;

&lt;p&gt;It’s not about knowing the right questions to ask, or following an interview strategy guide. If you are genuinely curious about somebody or something, you will figure out the right questions to ask. Because you have to. Otherwise you won’t scratch your itch. And unscratched itches are unbearable.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>The Space Around Us</title>
   <link href="http://www.nyl.io/blog/2015/04/the-space-around-us"/>
   <updated>2015-04-09T06:54:00-07:00</updated>
   <id>http://www.nyl.io/blog/blog/2015/04/the-space-around-us</id>
   <content type="html">&lt;p&gt;This past weekend, a game developer (friend of a friend) showed me his workspace. It’s an environment like I’ve never seen before. The layout was open and the room was dark, apparently good for seeing graphics on a computer screen. No walls. But very quiet.&lt;/p&gt;

&lt;p&gt;It got me to start thinking: what are the ways environment affect the way people operate?&lt;/p&gt;

&lt;p&gt;I’m not just talking about office layout. But also things like background music, art on walls, the temperature of your coffee, access to food, material of your desk and chair. So many of these little non-personal cues poke and prod us to behave one way or the other. It’s a bit unsettling, right? These little invisible forces controlling some aspect of our lives.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>The Green State</title>
   <link href="http://www.nyl.io/blog/2015/04/the-green-state"/>
   <updated>2015-04-08T06:55:00-07:00</updated>
   <id>http://www.nyl.io/blog/blog/2015/04/the-green-state</id>
   <content type="html">&lt;p&gt;In 3D printing processes like Stainless Steel and Ceramics, there is a Green State during the production process. During this part, the model is very brittle and fragile. The part needs to be dug out of its powder bed before put into the kiln. Because there is force coming from the air gun, brushes, and general handling, the more fragile models often break in this stage. Eventually, the parts are baked in a kiln and hardens, which strengthens the final product you receive.&lt;/p&gt;

&lt;p&gt;When introducing designers to 3D printing, I found it helpful start by explaining this process. Though they may not have years and years of engineering training, we all have practice experience with physics to know how things break under pressure. Understanding the manufacturing process is key to understanding design.&lt;/p&gt;

&lt;p&gt;Of course, this goes beyond just 3D printing. Understanding people requires us to understand their thought process. Understanding how companies requires us to understanding how organizational processes work. Even more than understanding, we need to identify these Green State(s), and then either design around or directly address those states.&lt;/p&gt;

&lt;p&gt;But alas, how people think and how companies work are more complex than manufacturing processes. And manufacturing processes are already mighty complex. I suppose that’s what makes things interesting. And frustrating. Mostly interesting. 70/30.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Look at What People Do</title>
   <link href="http://www.nyl.io/blog/2015/04/look-at-what-peop"/>
   <updated>2015-04-07T06:57:00-07:00</updated>
   <id>http://www.nyl.io/blog/blog/2015/04/look-at-what-peop</id>
   <content type="html">&lt;p&gt;I was in a discussion about interviewing strategies and the merits of behavioral questions versus hypothetical questions.&lt;/p&gt;

&lt;p&gt;Behavioral questions start with “Tell me about a time when…”&lt;/p&gt;

&lt;p&gt;Hypothetical questions start with “What would you do if…” Hypothetical questions frustrate me for three reasons:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It’s easy to say I would do this or that. It’s hard to actually do the things you want to do.&lt;/li&gt;
  &lt;li&gt;Even if you execute what you want to do, it’s hard to predict what you would want to do in a specific situation. Little situational details may change your wants — the weather, who interacts with you, how you feel about a specific argument or pain point.&lt;/li&gt;
  &lt;li&gt;It’s hard for the interviewer to give all the information needed to present a fully fleshed out situation. Context is important, and interviewers often leave out little big details in hypothetical scenarios.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It’s more interesting and useful to start from the facts and work backwards: what people actually did, how they actually behaved. Then ask, what does that say about how they think. Then finally, how does that predict how people would behave in the future.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>How to Sketch Animations in Blender</title>
   <link href="http://www.nyl.io/blog/2015/04/how-to-sketch-animations-in-blender"/>
   <updated>2015-04-02T16:20:00-07:00</updated>
   <id>http://www.nyl.io/blog/blog/2015/04/how-to-sketch-animations-in-blender</id>
   <content type="html">&lt;p&gt;In the last two Blender updates, the Grease Pencil tool got a major facelift. The Grease Pencil was traditionally used for annotating 3D drawings. Now, it can also be used for animation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/05/blender-3dp.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And if you are a better drawer or animator than I am, you can create more beautiful movies.&lt;/p&gt;

&lt;iframe src=&quot;https://player.vimeo.com/video/113610809?color=ff9933&quot; width=&quot;500&quot; height=&quot;281&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;As a bonus, the new Grease Pencil’s stroke width responds to pressure sensitive drawing tools, like my old Wacom Bamboo tablet.&lt;/p&gt;

&lt;p&gt;I’m not a drawer or an animator. But, I have been having fun with this neat little tool, so I thought it fun to share.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/05/blender_hr.gif&quot; alt=&quot;line&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;grease-pencil-set-up&quot;&gt;Grease Pencil Set Up&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/05/blender_screen1.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Before I start, I make sure to set up Blender for Grease Pencil Animation. You can download my “&lt;a href=&quot;https://dl.dropboxusercontent.com/u/5479646/animation_startup_file.blend&quot;&gt;Starter Blend File&lt;/a&gt;.” A few things I did here:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Set both panels to relevant Grease Pencil sections&lt;/li&gt;
  &lt;li&gt;Include the Timeline (for play/stop) and Dope Sheet (keyframes).&lt;/li&gt;
  &lt;li&gt;Set a white background, making it easy to embed on Medium and emails.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/05/blender_hr.gif&quot; alt=&quot;line&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-1-draw&quot;&gt;Step 1: Draw&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/05/blender_screen2.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are five layers I used in my simple printer animation. The printer frame, the build plate, the printed object, the filament, and the nozzle.&lt;/p&gt;

&lt;p&gt;To draw hold down “D” on the keyboard and use your mouse or pen to draw. Alternatively, you can also go to the Grease Pencil tab and click “Draw.”&lt;/p&gt;

&lt;p&gt;For the build platform and the heart object, I drew the outline and used the fill tool. To fill an outline with color, adjust the “Fill Opacity” value.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/05/blender_hr.gif&quot; alt=&quot;line&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-2-add-more-frames&quot;&gt;Step 2: Add more frames&lt;/h2&gt;

&lt;p&gt;The animation part works like a flipbook. You draw a frame in an animation, and then draw another frame.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/05/blender_screen3.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In my wee little 3D printer animation, there are only 6 keyframes. Right click or use your keyboard arrow keys to move from one frame to the next in the Dope Sheet (the area with the keyframe). Start drawing to automatically add a new keyframe.&lt;/p&gt;

&lt;p&gt;Now, when you start drawing on a new keyframe the old drawing disappears. However, you can turn on the “Onion” skin feature to see a faint shadow of the last keyframe.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/05/blender_onion.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For the build plate, I didn’t need to redraw it, just move it down. To do that, click “Enable Editing” in the left toolbar, then select all the points you want to move, and use key “G” to move the platform down.&lt;/p&gt;

&lt;p&gt;Other useful object manipulation short keys are “S” for scale, and “R” for rotation. You can also bind a manipulation to an orientation. In the filament animation, I hit “SX” to squish it horizontally (S for scale, and X for x-axis).&lt;/p&gt;

&lt;p&gt;You can scrub through the timeline using the arrow keys, or just hit “Play.”&lt;/p&gt;

&lt;p&gt;Last, you’ll want to specify the end frame. To do this, just type in whatever frame number you want as the animation’s end frame. You can also start the animation at an arbitrary frame number too.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/05/blender_hr.gif&quot; alt=&quot;line&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-3-export-to-movie-file-or-gif&quot;&gt;Step 3: Export to movie file or gif&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/05/blender_screen4.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;First, specify the File Location where you want to dump your files and file type. You’ll also need to specify a File Type. If you want to make animated gif, export to PNG or JPG. Blender will export each frame separately. You can use Photoshop or GIMP to compile these into an animated gif.&lt;/p&gt;

&lt;p&gt;Second, frame your shot. You can hit Shift+B or Spacebar Search for “Zoom to Border” and draw the area to focus on. On my MacBook, I can use the two finger pinch to zoom in an out. I hold down the shift key and use two fingers to pan around. Then on the top menu, I select [Render &amp;gt; OpenGL Image] to get a sense of whether things are in frame or not.&lt;/p&gt;

&lt;p&gt;Last, select [Render &amp;gt; Open GL Animation] to animate. And then…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/05/blender_theend.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;P.S. Here’s the &lt;a href=&quot;https://dl.dropboxusercontent.com/u/5479646/printer.blend&quot;&gt;source file&lt;/a&gt; for the 3D Printer animation, using Blender 2.74.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Carbon3D</title>
   <link href="http://www.nyl.io/blog/2015/03/carbon3d"/>
   <updated>2015-03-26T16:20:00-07:00</updated>
   <id>http://www.nyl.io/blog/blog/2015/03/carbon3d</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/content/images/2015/05/carbon3d-1.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://carbon3d.com/&quot;&gt;Carbon3D&lt;/a&gt; unveiled last week at the TED conference. On stage, their demonstration unit that printed a meshy ball structure in about 6 minutes. This print would have taken my home printer maybe 2–3 hours, and an industry printer even longer. Essentially, Carbon3D prints 25–100x faster than current 3D printers. Imagine going to a hardware store with broken desklamp, then getting a replacement part printed in 5 minutes while you grab a cup of coffee or while you wait in the checkout line.&lt;/p&gt;

&lt;p&gt;Their TED Video:&lt;/p&gt;

&lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/ihR9SX7dgRo&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;how-does-it-works&quot;&gt;How does it works?&lt;/h2&gt;

&lt;p&gt;The printer starts with plastic resin. Let’s just call it the “goo.” This goo solidifies through exposure to UV light. Underneath the vat of goo, a projector projects cross sections of the print with UV light. The light solidifies one layer of the print, and a print bed lifts the solidified layer up a little bit. Now, traditionally once a layer soldifies, that layer sticks to the bottom of the vat containing the goo. The build plate lifts up a little bit to get the bottom layer unstuck. Then, the printer moves onto the next layer.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/05/carbon3d_process.jpeg&quot; alt=&quot;Process Diagram From Carbon3D’s presentation at TED&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Carbon3D eliminates this one, small step. With Carbon3D, the bottom of the vat is made with a special material that lets oxygen through. The oxygen makes it so the solidified plastic does not stick to the bottom of the vat. This eliminates the need for the build plate to lift up back down every layer, which speeds up printing.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/05/carbon3d_newprocess.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-beauty-of-this-is-that-its-so-simple&quot;&gt;The beauty of this is that it’s so simple!&lt;/h3&gt;
&lt;p&gt;It’s such a small, change that drastically effects the result. I am just as excited about the increased speed as I am by the elegance of the design improvement.&lt;/p&gt;

&lt;h2 id=&quot;material-difference&quot;&gt;Material difference?&lt;/h2&gt;

&lt;p&gt;With this technique, their prints vary in quality — from bouncy rubbery materials to strong plastics used in automotive.&lt;/p&gt;

&lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/dXIkRsJLXGs&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href=&quot;http://www.unc.edu/spotlight/unc-researchers-collaborate-3d-printing-technology/&quot;&gt;University of North Carolina’s press release&lt;/a&gt; claims “CLIP enables a very wide range of material to be used to make 3D parts with novel properties, including elastomers, silicones, nylon-like materials, ceramics and biodegradable materials.”&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://carbon3d.com/&quot;&gt;Carbon3D’s website&lt;/a&gt; claims “We’re able to draw from the whole polymer family to meet highly specific application requirements. Elastomers, for example, cover a range of needs, from the high elasticity needed for athletic shoes to the strength and temperature resistance needed for automotive parts.”&lt;/p&gt;

&lt;p&gt;In my experience, the plastics used in this process are fragile and brittle. I printed a 2 inch Pony Statue using a similar technology once (a Form 1 machine, which employs UV light projecting on resin), and both of the back legs broke off. Given these material properties, this technique was really good for prototypes, but you can’t use it to print household components that require strength.&lt;/p&gt;

&lt;p&gt;Carbon3D introduces to possibilities to this technology with its expanded range of materials — from flexible footware parts to durable automotive parts. It would be interesting to see how these material stands up to their suggested applications.&lt;/p&gt;

&lt;h2 id=&quot;team&quot;&gt;Team&lt;/h2&gt;

&lt;p&gt;The Carbon3D team is hardcore, to put it lightly. The founder, Joseph DeSimone, is a chemist from the University of North Carolina. Others include ex-Tesla, ex-Microsoft, ex-Apple to name a few. Together, the founding team holds patents in the triple digits They are backed with $41 million in funds led by Sequoia (Series A in 2013) and Silver Lake Kraftwerk (Seris B in 2014).&lt;/p&gt;

&lt;h2 id=&quot;some-things-to-keep-an-eye-on&quot;&gt;Some things to keep an eye on&lt;/h2&gt;

&lt;p&gt;They have not started shipping printers yet. Though according to Re/code, Carbon3D is “already in testing at a few companies, including an automotive company, an athletic apparel company, a design studio and an academic research lab.”&lt;/p&gt;

&lt;p&gt;Second, I wonder about the set up and post printing processes. I don’t have experience with Carbon3D of course, but I have used Form 1 which utilizes a similar technology (UV hits goo and turns it into hard plastic). The plastic from Form 1 machines takes a while to fully cure, even after it is removed from the printer. Goo still sticks to the plastic part, and I need to wash it off. Even so, my model didn’t fully harden until a few days later. Albeit, I did not have a UV lightbath, so I used the sparse winter sun in NYC. Still, if you design a part that requires it to be completely hardened or completely dry, you need to factor in post production effort + time.&lt;/p&gt;

&lt;p&gt;I am also interested in their claims on the material. The TED talk focused on print speed, but their website other sources makes some amazing claims on the production-ready material properties. University of North Carolina, where many of their founding team taught, mentions printable nylon plastics and ceramics. The materials are not something they focused on in their press launch, but definitely something to keep an eye on.&lt;/p&gt;

&lt;p&gt;Last, like all technologies, there are limits. Marketing is great at calling out the benefits, but the limits are usually what I am more interested in. For example, complex parts often require support structures. Even the body and head of my pony structure requires support beams. Support structure adds time, material, and extra manual care in removing the supports. Ultimately, this all leads to increased cost. For prototypers, cost may not be as much of an issue. But, if you were to use this in production, cost is factored into your gross margin and may prevent this technology from penetrating certain low margin, high volume markets like consumer goods (e.g. iPhone cases, toys).&lt;/p&gt;

&lt;h2 id=&quot;in-the-end-the-product-speaks-for-itself&quot;&gt;In the end, the product speaks for itself&lt;/h2&gt;

&lt;p&gt;I am amped about this technology. There are so many new 3D Printers and Kickstarters magnifying incremental improvements as revolutionary accomplishments. Or worse, magnifying nothing as revolutionary accomplishments.&lt;/p&gt;

&lt;p&gt;But it seems Carbon3D can walk the walk. Having a live demo set up during a talk is risky business, but it let the product speak for itself. In the end, having a good product is the best marketing strategy.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;small&gt;Thanks to &lt;a href=&quot;https://twitter.com/rhyme_andreason&quot;&gt;Mary Huang&lt;/a&gt; and &lt;a href=&quot;http://www.cs.nyu.edu/~qnzhou/&quot;&gt;James Zhou&lt;/a&gt; for feedback on this post and helping me understand exactly how Carbon3D works.&amp;lt;/small&lt;/small&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Am I Talking to the Right Users?</title>
   <link href="http://www.nyl.io/blog/2015/03/am-i-talking-to-the-right-users"/>
   <updated>2015-03-18T16:28:00-07:00</updated>
   <id>http://www.nyl.io/blog/blog/2015/03/am-i-talking-to-the-right-users</id>
   <content type="html">&lt;p&gt;For the past month or so, I’ve been playing around with the idea of developing a CAD add on for Blender. Blender is a free and open source tool for animators and game designers. You can make some very impressive 3D artwork with Blender. Some people even use it for 2D animation. While it is good for modeling and sculpting organic shapes, you have to take many twists and turns and make it work for precision modeling, tools commonly found in CAD software.&lt;/p&gt;

&lt;p&gt;Take a very basic CAD feature: specifying the length of an edge. In Blender, you have to either use the ruler or edge length tool to measure the edge. Then you do a little division of the target length divided by current length. Then you scale it by the result of that division. Now, I’ve gotten used to this schlep, but come on, it’s no good.&lt;/p&gt;

&lt;p&gt;I’ve been noodling around with the idea of writing an Add On for some basic CAD features. I’ve poked around at Blender user groups and forums, just to see if there are interest in such a tool.&lt;/p&gt;

&lt;p&gt;I foud, though, that besides a few crazies like me, most Blender users do not need to be super precise. They are modeling animation characters and art, not household component parts that require specific measurements. Because Blender does not have these tools, they tend to not attract these types of modelers. So if I look to current Blender users to validate the need for such an add on, I am perhaps not looking in the right place.&lt;/p&gt;

&lt;p&gt;I wonder how often companies and product designers face this issue. They come up with some idea, validate it with their current user base, and end up with the wrong conclusions because they talked to the wrong people. Maybe their product is to solve a problem with non-users and they only talked to current users.&lt;/p&gt;

&lt;p&gt;I see variations of this problem at previous companies I’ve worked at, where it’s easier to talk to long time users because they are always accessible and ready to share feedback. But sometimes, product designers need to help new users, not experienced users. And new users face very different problems. We end up improving niche features for a small (but powerful) segment of our community, and miss the big opportunities because we are not talking to new users or non-users. After all, there are a lot more new users than existing users, and there are a lot more non-users than new users. This isn’t to say existing users and power users are not important, but that sometimes we miss other pieces of the pie, or miss opportunities for making a bigger pie. And we all love pie.&lt;/p&gt;

&lt;p&gt;PS. If anybody wants to help with Blender CAD add on (developers, testers, people to advocate for specific features you’d find useful), visit https://github.com/neuralfirings/BlenderCaddie/&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Luck is Hard Work</title>
   <link href="http://www.nyl.io/blog/2015/01/luck-is-hard-work"/>
   <updated>2015-01-27T17:29:00-08:00</updated>
   <id>http://www.nyl.io/blog/blog/2015/01/luck-is-hard-work</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/content/images/2015/05/luck.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I once asked a successful entrepreneur what was the turning point of her company’s success. After thinking about it for a few seconds, she said that she was lucky to run into a future investor/mentor at a networking event. That relationship jump started her company into what it is today. I then asked, how many potential investors did you actually meet with before you bumped into this one. And she laughed a little and said, “oh, over a hundred probably.”&lt;/p&gt;

&lt;p&gt;Getting one successful meeting after over a hundred failed meetings is not luck. It is [&lt;em&gt;**&lt;/em&gt;ing] hard work.&lt;/p&gt;

&lt;p&gt;I find that (in America at least), there is an idealization of luck. I suppose it fits with our “quick and easy” mentality. For example, I remember in college, everybody wanted to be the person who could not attend class, get drunk, and whip out a mind-blow works of academic brilliance. Even though behind the scenes, everybody (well many of us) were working pretty hard.&lt;/p&gt;

&lt;p&gt;Another case in point, one of my professors told the story of this researcher who noticed a strange pattern of a cat brain scan. Whenever somebody moved their fingers horizontally, specific neurons fired up. This observation later led to groundbreaking research in how vision processes horizontal and vertical imagery. My professor said, “he was lucky to have noticed that.” But here’s the thing—the ability to make these types of observations is not luck. It’s years of hard work to understand how neurons work in the brain, loads of funding to finance these brain scans (and—surprise, surprise—getting research funding is hard work too), and a honed observational skills which highlights the important random neural firings from the random random neural firings. But sure, I suppose you can wrap all that into “he was lucky to notice this thing that happened that one time.”&lt;/p&gt;

&lt;p&gt;I think people attribute things to luck for three reasons:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It makes their achievements seem difficult to attain and copy.&lt;/li&gt;
  &lt;li&gt;Attributing things to luck gives them some modesty.&lt;/li&gt;
  &lt;li&gt;They just don’t want to go into it all. Writing their achievements off as luck is a quick and easy explanation.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Most of the time though, luck is not quick and easy. Luck is hard work.&lt;/p&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;166&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/185858944&amp;amp;color=ff5500&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&quot;&gt;&lt;/iframe&gt;
</content>
 </entry>
 
 <entry>
   <title>Play the Whole Concerto</title>
   <link href="http://www.nyl.io/blog/2015/01/play-the-whole-concerto"/>
   <updated>2015-01-12T17:33:00-08:00</updated>
   <id>http://www.nyl.io/blog/blog/2015/01/play-the-whole-concerto</id>
   <content type="html">&lt;p&gt;I started working on the second movement of Chopin’s first piano concerto last year. When I learn a new piece, I go through a few lines at a time. I work through each section, learning the notes and thinking about what story I want to tell. This way, I slowly make it through the entire work.&lt;/p&gt;

&lt;p&gt;I worked on the last section of this movement for a few days. In the end, I was happy with it. It was melancholic, with a touch of reverie—just as Chopin himself intended.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“It is not intended to be powerful, it is more romance-like, calm, melancholic, it should give the impression of a pleasant glance at a place where a thousand fond memories come to mind” — Frederic Chopin&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then I played through the whole piece, and it all came crashing down. The last section—the beautiful section that I had perfected the day before—it just sounded wrong.&lt;/p&gt;

&lt;p&gt;It basically told the same story as the first section. The tone stayed the same. It was boring. The story wanted to progressed throughout this movement. I mean, it’s called a movement! It should move.&lt;/p&gt;

&lt;p&gt;When I played the whole piece through, I realized the last section is not melancholy at all. Quite the opposite. It is an optimistic restatement of an earlier section. This section told a story of journey’s end, and it was a good journey.&lt;/p&gt;

&lt;p&gt;I made the mistake of thinking about each section of the piece in their silos. Each section belongs to a larger movement, and each movement belongs to a larger body of work.&lt;/p&gt;

&lt;p&gt;When I work on something—a few bars of music, a feature on a webpage, a press release—it’s always a part of something more. It’s easy to lose sight of the context around which I’m working when I’m focused on one section. But audiences don’t just listen to one section. They listen to the whole concerto.&lt;/p&gt;

&lt;p&gt;Even when working on one single note, play the whole concerto.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>3D Printed Mixee Bag</title>
   <link href="http://www.nyl.io/blog/2015/01/3d-printed-mixee-bag"/>
   <updated>2015-01-07T00:42:00-08:00</updated>
   <id>http://www.nyl.io/blog/blog/2015/01/3d-printed-mixee-bag</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/content/images/2015/05/mixeebag_wallets-1.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I wanted a new bag, so I 3D printed one! Here’s the first ever Mixee Bag. It’s a work in progress, but I think it’s a mighty fine lookin’ start.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/05/mixeebag_tote.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Yes, this bag is fully 3D printed on a desktop printer. And yes, the hinges are printed in place. And yes, it is functional. I’ve been using the cross body version below for the past month walking around NYC. It has replaced my old tote.&lt;/p&gt;

&lt;p&gt;I had to figure out how to make 3D printed plastic flexible and, well, bag-like. The triangles are hinged, so the “fabric” can fold.&lt;/p&gt;

&lt;p&gt;But why stop at the tote? This is 3D printing after all. And with 3D printing, each print can be customized. So I created a system that can generate different sizes and styles. For example, a cross body bag with a long, twisted link chain.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/05/mixeebag_crossbody-1.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I also made a wallet. Well.. I made a few wallets. There are so many colors to try. By using a heated bed, I can create a smooth and shiny surface. Mmm.. shiny!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/05/mixeebag_wallets.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The clasp is magnetized so the bags and wallets just snap shut, because nobody likes fiddling around with buttons and buckles.&lt;/p&gt;

&lt;p&gt;Each side of the bag is printed in one piece. The hinges on each surface are printed in place, so the “fabric” moves and bends right out of the printer.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/05/mixeebag_printer.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The two sides are then manually assembled together using 3D printed components that snap into place.&lt;/p&gt;

&lt;p&gt;I’m still iterating on the design. Trying out different geometries, sizes, colors, chains, hinges, all sorts of fun stuff. So the story of the Mixee Bag is to be continued. Stay tuned!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/05/mixeebag_logo-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Originally published in the Mixee Labs Blog.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>How I Started to Code</title>
   <link href="http://www.nyl.io/blog/2014/10/how-i-started-to-code"/>
   <updated>2014-10-24T23:43:00-07:00</updated>
   <id>http://www.nyl.io/blog/blog/2014/10/how-i-started-to-code</id>
   <content type="html">&lt;p&gt;I get this question a lot: how did you learn to code? People seem perplexed that I can make software without a background in computer science. I’ve never taken some 12 week intensive course with a five figures price tag. I did not major or minor in computer science.&lt;/p&gt;

&lt;p&gt;How did I learn to code?&lt;/p&gt;

&lt;h2 id=&quot;goooooaaaaaaallll&quot;&gt;1. GOOOOOAAAAAAALLLL!!!!!&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/content/images/2015/05/code_goal.png&quot; alt=&quot;Goalkeeper by Juan Pablo Bravo from The Noun Projec&quot; /&gt;
Goalkeeper by Juan Pablo Bravo from The Noun Project
During college, my friends and I would sometimes gather to play Bang!, the spaghetti western card game. We would shout in imitation Italian and laugh at each other tripping over rules.&lt;/p&gt;

&lt;p&gt;After college, everybody went their separate ways. I had some free time before my job started, so I decided to make an online version of this card game, so we can all gather around our computers and play — just like the good ol’ times.&lt;/p&gt;

&lt;p&gt;That was my goal. And it was specific, a true north. It’s easier to get somewhere when you know where you wanted to go.&lt;/p&gt;

&lt;p&gt;Oftentimes in class, I do problem sets with the titillating goal of doing problem sets. Don’t get me wrong — these exercises are helpful, but I find it much more helpful when I have a goal that I personally care about driving my education.&lt;/p&gt;

&lt;p&gt;I’m not saying if you don’t have a specific goal, you should stop going to class. Learning something is far better than learning nothing. But having a goal you care about and learning as a means to an end is the best of all.&lt;/p&gt;

&lt;h2 id=&quot;break-it-down&quot;&gt;2. Break it down&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/content/images/2015/05/goal_shark.png&quot; alt=&quot;Shark by Okan Benn, and Fish by Dan Hetteix from The Noun Project&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Shark by Okan Benn, and Fish by Dan Hetteix from The Noun Project
Initially, I wanted to keep things simple. The card game, Bang!, had a lot of rules. Different cards gave players different powers, and certain cards can’t be played more than once, and certain card override other cards, and so on. Well screw that, I thought. I just wanted to make something where I can I can upload card images and manually figure out which card is in my hand, on the table, etc.&lt;/p&gt;

&lt;p&gt;I did that, but my job hasn’t started. So I moved onto coding the rules of the most common card. I did that, and my job still hasn’t started. So I moved onto coding the rules of another card. And another after that.&lt;/p&gt;

&lt;p&gt;I tackled the game bit by bit. The whole game was complex and confusing, but each bit was manageable. If I thought about tackling the entire game as a whole, I would have turned my computer off on Day 1. But it wasn’t until I was 90% there, that I considered finishing the game. By then, the game didn’t seem all that impossible.&lt;/p&gt;

&lt;p&gt;By tackling one bite-sized piece at a time, I also felt more accomplished along the way. It’s the same reason video games have so many levels. Each tiny triumph give you more fuel to tackle the next puzzle. Gargantuan problems, on the other hand, are scary and discouraging. But you know what? A gargantuan problem is just a school of sardine-sized problems huddling together to frighten you, their predator. And sardines aren’t scary.&lt;/p&gt;

&lt;h2 id=&quot;let-me-google-that-for-you&quot;&gt;3. Let me Google that for you…&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/content/images/2015/05/code_google.png&quot; alt=&quot;Search Engine by Wilson Joseph from The Noun Project&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Search Engine by Wilson Joseph from The Noun Project
And so how did I translate each bite-sized problem into code? I Googled it. I Googled how to set up a database, how to retrieve of data from the database, how to modify that data, how to keep a counter for score keeping.&lt;/p&gt;

&lt;p&gt;At this point, I usually get one of two reactions. Reaction One is the “surprised” face — mouths open and eyebrows raise. This face usually belongs to non-technical people. Reaction Two is the “yup me too” face — eyes close and heads nod. This face usually belongs to technical people.&lt;/p&gt;

&lt;p&gt;I first realized the power of Google when I was in college. My computer kept freezing, so I waited for hours to see the computing assistant. Then I watched while the CA fixed my computer. He opened up Google. Typed in the problem. Scrolled down the page. Clicked a link. Found the fix. I was irked. I couldn’t believe I just waisted hours of my precious time waiting in line for the CA. When college-me realized she just lost hours of Facebook time I mean paper-writing time, she pays attention.&lt;/p&gt;

&lt;p&gt;Since then, Google has remained my frontline defense against the unknown, whether it’s sourcing manufacturing partners or JavaScript bugs. I say frontline because nothing — not even the mighty Google — is a panacea. You still have to be resourceful. Read books, take a developer friend out to lunch. That said, Google is an excellent place to start.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;After that, I learned how to code!&lt;/p&gt;

&lt;p&gt;Haha, just kidding. The game was buggy. Random cards mysterious show up on the table. The code is horrendous. I actually used the names of tables as a way to store data. I did not learn how to code.&lt;/p&gt;

&lt;p&gt;I learned how to approach making a complex website. I gained confidence in tackling the unknown. I did not learn how to code, but I started to code.&lt;/p&gt;

&lt;p&gt;My advice for people who want to start learning code is simple:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Find a goal you care about&lt;/li&gt;
  &lt;li&gt;Break down your idea into bite sized pieces&lt;/li&gt;
  &lt;li&gt;Google&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That’s it.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Life in Low Resolution</title>
   <link href="http://www.nyl.io/blog/2014/10/life-in-low-resolution"/>
   <updated>2014-10-11T04:25:00-07:00</updated>
   <id>http://www.nyl.io/blog/blog/2014/10/life-in-low-resolution</id>
   <content type="html">&lt;p&gt;It seems like there are more and more designs in low resolution. Maybe I am just pay more attention to low resolution (or low poly) 3D objects because I work in 3D printing.&lt;/p&gt;

&lt;p&gt;There is something beautiful in the minimalism of low poly objects. It’s weirdly alien, but organic and natural too.&lt;/p&gt;

&lt;p&gt;Maybe people love that real world objects evoke a virtual digital world.&lt;/p&gt;

&lt;h2 id=&quot;exhibit-1-low-resolution-shoes-by-united-nude&quot;&gt;Exhibit 1. Low Resolution Shoes by United Nude&lt;/h2&gt;

&lt;p&gt;United Nude is known for artsy, concept shoes. They came out with the &lt;a href=&quot;http://www.unitednude.com/lo-res-shoes&quot;&gt;Low Res line&lt;/a&gt; a while back, and it looks like these shoes are now a staple in their store. Seems like a validation for people’s love for low resolution objects.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/05/lowres_1.jpeg&quot; alt=&quot;Low Res project by United Nude&quot; /&gt;
Low Res project by United Nude&lt;/p&gt;

&lt;h2 id=&quot;exhibit-2-low-resolution-shoes-by-continuum&quot;&gt;Exhibit 2. Low Resolution Shoes by Continuum&lt;/h2&gt;

&lt;p&gt;Continuum Fashion was founded by my friend, Mary Huang. She’s the first person I email when I see something low resolution in life.&lt;/p&gt;

&lt;p&gt;These are 3D printed &lt;em&gt;and&lt;/em&gt; wearable.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/05/lowres_2.jpeg&quot; alt=&quot;Strvct Shoes by Continuum Fashion&quot; /&gt;
&lt;a href=&quot;http://www.continuumfashion.com/shoes.php&quot;&gt;Strvct Shoes by Continuum Fashion&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/05/lowres_3.jpeg&quot; alt=&quot;Strvct Black Wedge by Continuum Fashion&quot; /&gt;
&lt;a href=&quot;http://shop.continuumfashion.com/products/strvct-solid-black-wedge&quot;&gt;Strvct Black Wedge by Continuum Fashion&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;exhibit-3-low-resolution-bag-by-issey-miyake&quot;&gt;Exhibit 3. Low Resolution Bag by Issey Miyake&lt;/h2&gt;

&lt;p&gt;This line came out a while back and seems to be a staple at Issey Miyake. This was one of the first objects that I took notice of in low resolution.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/05/lowres_4.jpeg&quot; alt=&quot;Bao Bao Bag by Issey Miyake&quot; /&gt;
&lt;a href=&quot;http://www.baobaoisseymiyake.com/&quot;&gt;Bao Bao Bag by Issey Miyake&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;exhibit-4-low-resolution-bag-by-finell&quot;&gt;Exhibit 4. Low Resolution Bag by Finell&lt;/h2&gt;

&lt;p&gt;Super low resolution here, further deconstructing shapes. Then again, I suppose most totes are just two rectangles sandwiching your stuff—that’s low resolution too.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/05/lowres_5.jpeg&quot; alt=&quot;Unreleased Handbag Line by Finell&quot; /&gt;
&lt;a href=&quot;http://finell.co/handbags-2/&quot;&gt;Unreleased Handbag Line by Finell&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;exhibit-5-low-resolution-umbrella&quot;&gt;Exhibit 5. Low Resolution Umbrella&lt;/h2&gt;

&lt;p&gt;This project launched on Kickstarter a few days ago.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/05/lowres_6.jpeg&quot; alt=&quot;Sa(tm) Umbrella on Kickstarter&quot; /&gt;
&lt;a href=&quot;https://www.kickstarter.com/projects/860103721/satm-the-umbrella-reimagined&quot;&gt;Sa(tm) Umbrella on Kickstarter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/05/lowres_7.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;exhibit-6-3d-printed-bracelets&quot;&gt;Exhibit 6. 3D Printed Bracelets&lt;/h2&gt;

&lt;p&gt;Archetype Z Studio is another well known designer in 3D printing.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/05/lowres_8.jpeg&quot; alt=&quot;Geometric Cuff by Archetype Z Studio&quot; /&gt;
&lt;a href=&quot;http://www.archetypez.com/&quot;&gt;Geometric Cuff by Archetype Z Studio&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Maybe I should consider going as “Low Resolution” for Halloween.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;further-reading&quot;&gt;Further Reading&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://killscreendaily.com/articles/poly-generational/&quot;&gt;A COMPREHENSIVE HISTORY OF LOW-POLY ART, PT. 1&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Fixing My Laptop</title>
   <link href="http://www.nyl.io/blog/2014/09/fixing-my-laptop"/>
   <updated>2014-09-30T16:02:00-07:00</updated>
   <id>http://www.nyl.io/blog/blog/2014/09/fixing-my-laptop</id>
   <content type="html">&lt;h2 id=&quot;how-expensive-things-can-cost-less&quot;&gt;How expensive things can cost less.&lt;/h2&gt;

&lt;p&gt;I bought my laptop in 2010. Before this computer, I’ve never owned a laptop that lasted more than 2 years. I’ve also never owned a laptop that was more than $1000. I decided to treat myself and buy a more expensive laptop, in the hopes of having it last longer. If it makes it through Year 3, then I break even. If it makes it through Year 4, then I would have saved money.&lt;/p&gt;

&lt;p&gt;Year 3 passed fine. Break even point cleared!&lt;/p&gt;

&lt;p&gt;But in Year 4, the issues started. I needed more RAM. My fan was making weird noises. The computer was sloooooooow.&lt;/p&gt;

&lt;p&gt;Rather than buying a new machine, a friend helped me upgrade my RAM and replace my failing hard drive with a new Solid State Drive. Last weekend, I replaced my clickity fan with a $15 fan I found on Amazon and free instructions from iFixit.&lt;/p&gt;

&lt;p&gt;My computer runs faster than ever at decibels that would please abbey monks.&lt;/p&gt;

&lt;h2 id=&quot;our-disposable-culture&quot;&gt;Our Disposable Culture&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/05/laptop_1-1.jpeg&quot; alt=&quot;Sock designed by Yazmin Alanis from the Noun Project&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We live in a disposable world of IKEA, paper coffee cups, and plastic utensils. I used to know somebody who would buy hundreds of socks every year, because he only like the feel of new socks. Of course, Sockman is an extreme version of this disposable culture, but he is a good illustration of the disposable mindset.&lt;/p&gt;

&lt;p&gt;A New Mindset&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/05/laptop_2.jpeg&quot; alt=&quot;Coffee designed by Jacob Halton from the Noun Project&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I used to think a lot about the upfront cost of things, and now more and more I am thinking about upfront cost spread over periods of time. I also think more about caring for items I have. If something breaks or tears, how can I mend it first before throwing it away and buying something new.&lt;/p&gt;

&lt;p&gt;This mindsets helps me de-clutter. Also, my budget for the individual items can increase as their expected lifespan increase.&lt;/p&gt;

&lt;p&gt;Expensive things can indeed cost less in the end.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>3D Printing, Changing the Game by Changing the Players</title>
   <link href="http://www.nyl.io/blog/2014/09/3d-printing-changing-the-game-by-changing-the-players"/>
   <updated>2014-09-28T16:03:00-07:00</updated>
   <id>http://www.nyl.io/blog/blog/2014/09/3d-printing-changing-the-game-by-changing-the-players</id>
   <content type="html">&lt;p&gt;3D printing is changing the game. Rather, it is changing the players of the game. It used to be that we can bucket players into different segments—designers, shoppers, manufacturers.&lt;/p&gt;

&lt;p&gt;With 3D printing, these buckets are starting to leak.&lt;/p&gt;

&lt;h2 id=&quot;going-from-ampersand-to-slash&quot;&gt;Going from ampersand to slash&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/05/3dpchange_1.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A thick and clear line used to divide designers and consumers.&lt;/p&gt;

&lt;p&gt;Now, the designer can invite the consumer to co-create via apps. If I customize my own little figurine, am I designing or buying? Both?&lt;/p&gt;

&lt;p&gt;It is also now easier for the consumer to start designing. You can more find people to help you model, or follow tutorials and try out 3D modeling yourself. This thins the line between designer and buyer. You can slip from one side to the next, and back again before dinner time.&lt;/p&gt;

&lt;p&gt;Essentially, going from talking about shifting the “designers &amp;amp; consumers” paradigm to “designer/consumers” paradigm. And what a change one conjunction can make. A designer/consumer may create something that they may never intend to sell—products that they are using themselves or special items for friends and families.&lt;/p&gt;

&lt;h2 id=&quot;trial-and-error&quot;&gt;Trial and Error&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/05/3dpchange_2.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;My friends sometimes talk about software speed and hardware speed. Essentially software speed is fast. You write code, push to production (er… I mean staging first of course), and iterate based on feedback. Hardware is much slower. It takes time to get molds made, PCBs designed, and manufacture partners set up.&lt;/p&gt;

&lt;p&gt;3D printing does not enable hardware to catch up with software speed, but it does accelerate the hardware process. You can iterate on designs more, and try out different things.&lt;/p&gt;

&lt;p&gt;Being able to iterate isn’t just key for seasoned designers. For a new designer, this means you can (more) quickly learn through trial and error. Making a bad model to send to the production facilities isn’t as costly anymore.&lt;/p&gt;

&lt;h2 id=&quot;set-up-shop&quot;&gt;Set up Shop&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/05/3dpchange_3.jpeg&quot; alt=&quot;Stores designed by Joshua Mormann from the Noun Project&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It is easier now to set up shop. In fact, there are many shops that start selling without even producing. People can post their designs on marketplaces like Etsy and Shapeways, and recently even on Amazon.&lt;/p&gt;

&lt;p&gt;You can start smaller and start faster.&lt;/p&gt;

&lt;h2 id=&quot;a-new-breed-of-professional-hobbyist&quot;&gt;A New Breed of Professional Hobbyist&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/05/3dpchange_4.jpeg&quot; alt=&quot;Sewing designed by Cassie McKown from the Noun Project&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Because it is now more lightweight and quick, setting up shop no longer has to be a full time job. There is a full range of options between a hobbyist and a professional brand selling on these online marketplaces.&lt;/p&gt;

&lt;p&gt;Platforms that have traditionally supported designers and sellers now have to support a wider range of entities—corporations, brands, emerging designers, hobbyists, dabblers, and all those nooks and niches in between.&lt;/p&gt;

&lt;p&gt;This makes the world more interesting and more complicated.&lt;/p&gt;

&lt;p&gt;So who is the “3D printing revolution” for?
This is an important question for all 3D printing companies and especially for startups in this space looking to define their core customer base.&lt;/p&gt;

&lt;p&gt;Traditionally, marketplaces and stores might only look at big brands and well-known designers as vendors. Then customers are also in a separate bucket. Now, we also have the opportunity to work with emerging designers, hobbyists, and a wide range of partners. Some of these partner span multiple buckets. The new designers available on Amazon’s 3D printing store range from those designing full time to college engineering students designing to make extra cash for school.&lt;/p&gt;

&lt;p&gt;With 3D printing, these buckets are spilling into one another creating a chaotic, beautiful, new type of canvas.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Playing for Others</title>
   <link href="http://www.nyl.io/blog/2014/09/playing-for-others"/>
   <updated>2014-09-25T19:00:00-07:00</updated>
   <id>http://www.nyl.io/blog/blog/2014/09/playing-for-others</id>
   <content type="html">&lt;h2 id=&quot;the-difference-between-good-and-great-pianists&quot;&gt;The difference between good and great pianists&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/05/oldpiano.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Good pianists focus on telling stories. Great pianists focus on how their audience hears their stories. Good pianists play for themselves. Great pianists play for others.&lt;/p&gt;

&lt;p&gt;Before I sit down to play a piece of music, I think about what story I want to tell. I craft out where I need to build up suspense, which breaths I want to take, how to sprinkle elements of surprise here and there. I listen to myself play very, very carefully and adjust how I craft the piece.&lt;/p&gt;

&lt;p&gt;Then I record myself. Everything changes. Notes sound different. Chords have different colors. The phrasing plateaus too much. The story that I’ve heard all too well is suddenly foreign to me.&lt;/p&gt;

&lt;p&gt;I think great pianists are familiar with this chasm between how they hear themselves and how others hear them. When amateurs like me perform, one common critique is that we sound bland. I think the root of this is not that we aren’t interpreting the music or trying to tell a story, but that we don’t think enough about how the audience hears our story. We hear dramatic fanfares while the audience hears cacophonous chords. We hear suspenseful terror while the audience hears schizophrenic rhythms. We hear music while the audience hears notes.&lt;/p&gt;

&lt;p&gt;Designing products follows the same principles. Just like how great pianists play for others, great product managers make products for others. They are cognizant of how others use and respond to their products. They are aware of their own biases and what baggage they bring into the design process.&lt;/p&gt;

&lt;p&gt;They are playing for others.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>The most important lesson my dog has taught me</title>
   <link href="http://www.nyl.io/blog/2014/09/the-most-important-lesson-my-dog-has-taught-me"/>
   <updated>2014-09-16T16:11:00-07:00</updated>
   <id>http://www.nyl.io/blog/blog/2014/09/the-most-important-lesson-my-dog-has-taught-me</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/content/images/2015/05/ajaxmoney.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Dogs don’t really remember things. You can train them to do things. But, it’s more like training them to develop a habit, like pulling our hands back when we touch something hot.&lt;/p&gt;

&lt;p&gt;When they do something wrong and you don’t catch them in the moment, they don’t know to associate your anger or displeasure with whatever it shitty thing they did since they don’t really remember what they did. Even though often that shitty thing is literally a shitty thing.&lt;/p&gt;

&lt;p&gt;When you have see that they’ve done a shitty thing after the fact, there’s really no use in getting angry. In fact, it is counter productive. They may look guilty, and we may think it’s because they “know” they’ve done something wrong. In reality, they probably don’t know what specific thing (shitty or not) they’ve done. They just know that this human is pissed off.&lt;/p&gt;

&lt;h2 id=&quot;i-turn-anger-into-productivity-and-blame-into-responsibility&quot;&gt;I turn anger into productivity, and blame into responsibility.&lt;/h2&gt;

&lt;p&gt;This makes me re-evaluate how I handle shitty things. Rather than getting angry or annoyed, I now have no reasonable option but to think about what I can do to prevent shitty things from happening. Maybe I have to take the dog out more, or do more training, or this and that. I turn anger into productivity, and blame into responsibility.&lt;/p&gt;

&lt;p&gt;There’s no question about it, it’s a more productive way of dealing with a bad situation. It puts me in control of the long term outcomes. That makes all the difference.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Dog Park Friends</title>
   <link href="http://www.nyl.io/blog/2014/06/dog-park-friends"/>
   <updated>2014-06-22T16:11:00-07:00</updated>
   <id>http://www.nyl.io/blog/blog/2014/06/dog-park-friends</id>
   <content type="html">&lt;p&gt;I love the dog park. Sure, it smells a little funny, and you have to be wary of you step. But the happiness radiating from the dogs is contagious. The dog park brings together an interesting hodge podge of humans too.&lt;/p&gt;

&lt;p&gt;When I interned at Google, one of my co-workers told me that the most interesting group of friends she had was her Smoker friends—people with whom she’d hang out on the patio to smoke a cigarette between meetings. I’m not advocating for smoking or anything, but it did get me to think. She said that smoking crosses departmental boundaries. It brings together people with different interests and spans across cubicle locations. She smoked with developers, marketers, managers, interns.&lt;/p&gt;

&lt;p&gt;I don’t smoke. But I think the dog park provide some of the same diversity in characters–more so probably. You get to meet all sorts of interesting people–set builders, music editors, art historians, cinematographers, writers.&lt;/p&gt;

&lt;p&gt;It’s a good way to start the day, and a good reminder of the world beyond our own.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Internet Dog Treat Dispenser (v2)</title>
   <link href="http://www.nyl.io/blog/2014/04/remote-dog-treat-dispenser-v2"/>
   <updated>2014-04-20T15:43:00-07:00</updated>
   <id>http://www.nyl.io/blog/blog/2014/04/remote-dog-treat-dispenser-v2</id>
   <content type="html">&lt;p&gt;A few weeks ago, Ajax our dog started having separation anxiety issues—-he would cry bloody murder when we left him alone in the apartment. We crate trained him when he was 6 months old with our remote dog treat dispenser. Since then, when we leave him alone, he’s been quiet and usually just fall asleep. That is, until a few weeks ago.&lt;/p&gt;

&lt;p&gt;Separation anxiety is a tricky thing to train, because you can’t there in person to correct the dog’s behavior. The bad behavior starts precisely because you are &lt;em&gt;not&lt;/em&gt; there. It’s one of the top complaints among dog owners, and is the second most common reason for owners giving up or euthanizing their dogs&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;We looked at bringing back out our old treat dispenser, but it was clunky. The old version had to connect to a laptop, and the treat container was a plastic cup held together by scotch tape and paperclips. It also didn’t come with a nanny cam so we had to use Ustream, which while free, had ads and a 30 sec delay. And thus Treaty v2 was born.&lt;/p&gt;

&lt;p&gt;I cobbled together this device, which streams video and audio in almost-real time (the audio has a 10 sec delay). I can use this to monitor the dog and dispense treat when he’s shows good behavior.&lt;/p&gt;

&lt;h2 id=&quot;dog-treaty-demo-video&quot;&gt;Dog Treaty Demo Video&lt;/h2&gt;

&lt;iframe width=&quot;640&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/mhdJi2rF1xA&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;This connects to a web interface I use to monitor and treat the dog. Well technically, the Raspberry Pi serves a page with a button that controls the dispenser’s motor. I can watch/listen to what’s happen and dispense a treat by clicking a button. This is helpful when I’m out and about, want to check on Ajax and more importantly reward him when he’s being calm and quiet.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/06/1-nSa44VhzPnyBbGhgC8S1JQ.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-modeling&quot;&gt;The Modeling&lt;/h2&gt;
&lt;p&gt;The upper compartment contains the treats. You put treats between the fans, and the fan-like arm twists and scoots the treats along until it drops into the crate. The bottom compartment contains the stepper motor, which turns the fan when I click the “Give Treat” button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/06/1-U1Z70vS2J9La8VW9wsdp0w.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Who says you can’t use &lt;a href=&quot;http://www.blender.org&quot;&gt;Blender&lt;/a&gt; to design mechanical parts?&lt;/p&gt;

&lt;p&gt;This mechanism works well because you can use it with a variety of different types of treats. Many dispensers (e.g. gumball machines) one works with certain geometries. We tested it with biscuits, dried fish flakes, and even leftover steak. Kudos to Aaron for thinking of this idea.&lt;/p&gt;

&lt;h2 id=&quot;the-hardware--webpage-setup&quot;&gt;The hardware &amp;amp; webpage setup&lt;/h2&gt;

&lt;p&gt;For controlling the dispenser, I used a Raspberry Pi and followed &lt;a href=&quot;https://learn.adafruit.com/adafruits-raspberry-pi-lesson-10-stepper-motors?view=all&quot;&gt;Adafruit’s Stepper Motor Tutorial&lt;/a&gt;. For streaming video and audio, I also used the &lt;a href=&quot;https://github.com/moustaki/raspbaby&quot;&gt;RaspBaby&lt;/a&gt; setup, which installs mjpg-streamer for video and darkice running on icecast for audio. For the camera and mic, I just used an old Logitech webcam I had lying around. To serve the webpage, I set up nginx on the Raspberry Pi.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/06/1-ClASvTZusbsTV_UQrQWsdA.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/06/1-8JyZgw9r-KV3aEIEmRN0ig.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;whats-next&quot;&gt;What’s next&lt;/h2&gt;

&lt;p&gt;We’ve used this for a few times and it looks like Ajax is starting to show some improvements. Besides doggy improvements, there are also a few device improvements I’d like to work on for v3.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;I want to get more real time audio stream. It’s very important to treat the dog right after his good behavior, so it’s important the audio is as realtime as possible. Right now it has about a 10 sec delay.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I want to put everything in one (small) box. As you can see the breadboard is quite bulky and there are a lot of wires swooping this way and that. Maybe I’ll try to design a PCB, or maybe I’ll use Adafruit’s solderable breadboard with &lt;a href=&quot;https://www.adafruit.com/products/1148&quot;&gt;Pi Cobbler&lt;/a&gt;. In any case, the Raspberry Pi, wires, and treat dispenser (the cylindrical thin) should all be contained in one (probably 3d printed) case.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Right now the treats &lt;em&gt;sometimes&lt;/em&gt; hits Ajax on the head when it drops from the container. Eek! Maybe I’ll make an attachable bowl or something that catches the treats. He can eat from the bowl instead of getting whacked by bits of steak.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the meanwhile, Ajax can just stand back a little and look forward to some tasty treats!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/06/1-inhcnpHmfX2DWqk_iXzUng.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;http://www.dogbreedinfo.com/separationanxiety.htm &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Why I Use and Recommend Blender</title>
   <link href="http://www.nyl.io/blog/2014/04/why-i-use-and-recommend-blender"/>
   <updated>2014-04-06T16:16:00-07:00</updated>
   <id>http://www.nyl.io/blog/blog/2014/04/why-i-use-and-recommend-blender</id>
   <content type="html">&lt;p&gt;When I need to model a 3d part or work with another designer’s files, I almost always turn to Blender. I use it in my spare time to design 3d printed household parts. I use it at work when working with more organic designs and jewelry products for &lt;a href=&quot;http://www.mixeelabs.com&quot;&gt;MixeeLabs&lt;/a&gt;. If you just want to simply extrude a logo or image, there are &lt;a href=&quot;http://www.mixeelabs.com/mixeepopper&quot;&gt;other tools&lt;/a&gt;. But if you want to model more complex shapes, I recommend checking out &lt;a href=&quot;http://www.blender.org&quot;&gt;Blender&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Blender may seem like an odd choice because it isn’t really built around product design or 3d printing. Its main use case is for 3d animation. However, I’ve used many different packages, and I always go back to Blender.&lt;/p&gt;

&lt;p&gt;Now, I am not a professional 3d modeler. I’ve worked with 3d printing since 2010, and learned a lot about 3d modeling as a result. Blender has often been criticized as not being easy to learn, but based on my own experience starting from scratch, I think it’s actually a very manageable modeling package.&lt;/p&gt;

&lt;h2 id=&quot;blender-is-free-and-works-across-platforms&quot;&gt;Blender is free and works across platforms&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/05/whyblender_1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;People with different budgets and different operating systems often ask me to recommend modeling software. I want to recommend something that will work with their operating system, and operates in their price range.&lt;/p&gt;

&lt;p&gt;This flexibility and cross compatibility also makes it easy for me to work with different designers, because Blender is able to import and export basically all the different file types. We developed the &lt;a href=&quot;http://www.mixeelabs.com/morph&quot;&gt;Mixee Labs plugin for Blender&lt;/a&gt; because it doesn’t require designers to switch operating systems to run our software, or shell out thousands of dollars for new modeling software.&lt;/p&gt;

&lt;p&gt;Last, it is one of the few modeling programs that work (well) on Macs. Some of the most popular packages (e.g. SolidWorks) are only available for Windows. Others provide only buggy versions for Macs. Blender works just as well on my Mac as it did on my old Windows machine—I can’t say the same about Excel.&lt;/p&gt;

&lt;h2 id=&quot;spacebar-search&quot;&gt;Spacebar Search&lt;/h2&gt;

&lt;p&gt;Blender is chock-full of features, which are powerful but can be overwhelming for beginners. This is a common criticism for why Blender is not beginner friendly. The Spacebar Search is an elegant way to make features more accessible without reducing the feature set for advanced users.&lt;/p&gt;

&lt;p&gt;You press the spacebar and search for features by name. This is perfect for when I can’t remember the hotkeys or what feature is on which toolbar. As a bonus, through using the Spacebar Search, I learned the hotkeys for my most commonly used features. It ended up as a nice educational tool as well.&lt;/p&gt;

&lt;h2 id=&quot;i-use-it-for-precision-modeling-organic-models-texture-mapping-and-sculpting&quot;&gt;I use it for precision modeling, organic models, texture mapping, and sculpting&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/05/whyblender_2.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One of my favorite things about working with Blender is that I can use the software regardless of what type of modeling I need. Many packages focus on certain type of modeling—architects and jewelry designers would use very different modeling software. Blender certainly has its focuses (3d animation), but I’ve found it adaptable to all my modeling needs.&lt;/p&gt;

&lt;p&gt;Blender’s strength is in artistic/organic modeling—characters, figurines, sculptures. So, it has great mesh modeling and texture mapping tools. Many CAD packages don’t have great tools for adding textures for color 3d printing. In addition to mesh modeling, Blender also has a sculpting engine for those who modify models as one would do with clay.&lt;/p&gt;

&lt;p&gt;As for precise mechanical parts, this is Blender’s weakest area, but it is good enough for me. I can measure distance and wall thickness. I can resize parts to specific measurements (albeit sometimes there’s a little addition and subtraction involved). For me, the bottleneck is more on 3d printers’ ability to print with accuracy than in the model file’s accuracy.&lt;/p&gt;

&lt;h2 id=&quot;rudimentary-3d-printing-tools&quot;&gt;(Rudimentary) 3D Printing Tools&lt;/h2&gt;

&lt;p&gt;When modeling, there’s the Ruler/Protractor Tool to help you measure wall thickness. This is important when you are optimizing for both cost, time, and structural strength.&lt;/p&gt;

&lt;p&gt;There’s also a 3d Printing Toolbox—an addon that calculates volume, surface area, and overhangs. This is necessary for estimating cost and print-time.&lt;/p&gt;

&lt;p&gt;That said, my Blender files often need little fixes before sending them to the printer. However, there are programs like MeshLab and NetFabb that help fix your files. Also, if you use a service like Shapeways, they will fix your files automatically before it goes to print.&lt;/p&gt;

&lt;h2 id=&quot;active-community-fast-development&quot;&gt;Active community, fast development&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/05/whyblender_3-1.jpeg&quot; alt=&quot;Blender Conference 2012. Image courtesy of BlenderNation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Blender has an amazing and active community. This means there are lots of people to help troubleshoot, write tutorials, and develop new features. This is one of the first things I look for. In lieu of corporate support hotlines and dedicated support teams, strong communities help you navigate the ins and outs.&lt;/p&gt;

&lt;p&gt;This doesn’t just apply to features—the UI is improving as well. Blender gets a lot of slack for having a bad UI. Blender 2.5 (IMO) greatly improved on the UI, and now there’s even a dedicated team to further refine the UI.&lt;/p&gt;

&lt;h2 id=&quot;nothing-is-perfect-blender-is-no-exception&quot;&gt;Nothing is perfect, Blender is no exception&lt;/h2&gt;

&lt;p&gt;Of course, I always want more.&lt;/p&gt;

&lt;p&gt;I would love better tools for parametric modeling. I would also love integration with fast slicers and OctoPrint.&lt;/p&gt;

&lt;p&gt;I would love to aggregate all the tools I most commonly use into one toolbar (with nice icons) and then hide the other parts of the UI I don’t use. Yes, I know you can do this with Python scripting… but… Python scripting.&lt;/p&gt;

&lt;p&gt;Currently, it is the best package out there for my needs. If you are interested in getting started, I highly recommend BlenderCookie’s Getting Started Tutorial Series. It’s a six-part series that goes from how to download Blender, to making your first animation.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Why 2048 is addicting</title>
   <link href="http://www.nyl.io/blog/2014/03/why-2048-is-addicting"/>
   <updated>2014-03-25T16:18:00-07:00</updated>
   <id>http://www.nyl.io/blog/blog/2014/03/why-2048-is-addicting</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/content/images/2015/05/2048.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Yes… that is my phone. 2048!&lt;/p&gt;

&lt;p&gt;Over the past few weeks, a game called 2048 has hit the scene. In a short time, there’s been many spin offs and variations of the game. It has become some sort of “a thing” in the dev community. It even has its own XKCD—that’s when you know it’s made it big. This is why I think it has gained so much traction.&lt;/p&gt;

&lt;h2 id=&quot;fine-line-between-thinking-and-button-mashing&quot;&gt;1. Fine line between thinking and button mashing&lt;/h2&gt;

&lt;p&gt;2048 is an addicting game because it occupies this powerful and difficult to find space. It’s brainless enough to where you can play for hours on end without putting in much effort, but not brainless enough to where it’s boring. You use your brain just enough to feel like you are working hard at something, but you aren’t actually working hard so it’s all good.&lt;/p&gt;

&lt;h2 id=&quot;little-achievements-one-at-a-time-sometimes&quot;&gt;2. Little achievements, one at a time. Sometimes.&lt;/h2&gt;

&lt;p&gt;When you play 2048, you can sense that you are making progress towards the goal. Numbers combine to make higher numbers, maybe there’s even some fun sound effect (I don’t know, I mute all my games). The achievements come often, but at random time intervals. You may get a small combo pretty often, but the big combos are more sporadic. Random level ups keep us going. It’s the same theory they use in slot machines (you win a little often, but you win at random).&lt;/p&gt;

&lt;h2 id=&quot;open-source--developer-meme&quot;&gt;3. Open source » developer meme&lt;/h2&gt;

&lt;p&gt;The developer made this open source, so other developers are riffing. Some developer made a version in sed, an AI version, and of course the Doctor Who version. It’s a meme based on meatier derivatives. It’s not just slapping some funny text onto a picture (well, with the exception of the Doctor Who version).&lt;/p&gt;

&lt;h2 id=&quot;html5javascript-as-game-engines&quot;&gt;4. HTML5/Javascript as Game Engines&lt;/h2&gt;

&lt;p&gt;You don’t have to muck through Game Libraries and C++ to tweak and modify this code. You just need to to know HTML and Javascript. And guess what, shittons of people in today’s world know HTML and Javascript! It is one of the foundation of modern web design.&lt;/p&gt;

&lt;h2 id=&quot;building-off-of-shoulders-of-giants&quot;&gt;5. Building off of shoulders of giants&lt;/h2&gt;

&lt;p&gt;Surprise, surprise. This game is not original. It is based on 1024 which is based on Threes. And that’s perfectly ok. You can recreate something that’s better in some way, but not original in all the ways. The gameplay isn’t original, but 2048 had a more modern “webby” looking design than the previous versions, it’s open sourced and hack-friend, and it uses a web-friendly platform. That said, the tweaks to the gameplay were pretty spot-on. When compared with its predecessor, 2048 brought more button-mashing into the mix and nudged it closer to the sweet spot.&lt;/p&gt;

&lt;p&gt;So, what else can we rebuild, tweak? People don’t change—they like the same mechanics, but design aesthetics and technology changes. I wonder what else has great mechanics, but needs a more modern facelift. I wonder what games lend themselves to being tweaked, with a platform more tweakable—perhaps—than HTML/JavaScript.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>3D Printing as a Software Problem</title>
   <link href="http://www.nyl.io/blog/2014/03/3d-printing-as-a-software-problem"/>
   <updated>2014-03-23T16:19:00-07:00</updated>
   <id>http://www.nyl.io/blog/blog/2014/03/3d-printing-as-a-software-problem</id>
   <content type="html">&lt;p&gt;A few weeks ago, two articles in 3d printing caught my eye. Both writers talked about how they wish their 3d printer was better. Upon closer read, I realized that a lot of their points were related to the software used to power 3d printers, not feedback around the actual 3d printers.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/3d-printing-1/a2734a4e6444&quot;&gt;Eduardas Afanasjevas&lt;/a&gt; write about 3 ways to make Ultimaker better. The interesting thing is that all of his suggestions is based around software improvements, not necessarily machine improvements. It’s about how to slice files smartly and model validation—software.&lt;/p&gt;

&lt;p&gt;The next day, I saw an &lt;a href=&quot;http://www.slate.com/articles/technology/technology/2014/03/solidoodle_4_testing_the_home_3_d_printer.html&quot;&gt;article in Slate&lt;/a&gt; about the new Solidoodle 4. The article complained about a few different issues with his Solidoodle, but again, a lot of his gripes had to do with software, not with the actual machine itself (though to be fair, a lot of problems were with hardware). Most importantly, he made a comment about the lack of files available online to print—quality model repositories are software products.&lt;/p&gt;

&lt;p&gt;Another need that I personally have is for the toolchain to be simplified. Currently, I find base files on Thingiverse, tweak or model from scratch in Blender, fix files with NetFabb, slice with Simplify3D, and send files to printer with OctoPrint. I would love to combine all of the above into one product. And all of the above are all software.&lt;/p&gt;

&lt;p&gt;There are a lot of new 3d printer companies cropping up—most of them make 3d printers. And don’t get me wrong, there’s a lot of improvements that need to happen with the hardware (mostly around reliability). But given the amount of issues that are software related, I am a bit surprised I haven’t seen as many 3d printing companies focused around software.&lt;/p&gt;

&lt;p&gt;It makes me wonder about opportunities here for &lt;a href=&quot;http://www.mixeelabs.com&quot;&gt;Mixee Labs&lt;/a&gt; to get involved, and what that would look like. Right now, we focus more on making creators or product templates for industrial printers, but perhaps we can apply our knowledge to the world of desktop printing as well.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>The World Goes Round and Round</title>
   <link href="http://www.nyl.io/blog/2014/03/the-world-goes-round-and-round"/>
   <updated>2014-03-18T16:20:00-07:00</updated>
   <id>http://www.nyl.io/blog/blog/2014/03/the-world-goes-round-and-round</id>
   <content type="html">&lt;p&gt;I am old enough to notice the past repeating itself.&lt;/p&gt;

&lt;p&gt;When I was younger, I remember some old guy told me that fashion was cyclical. The same styles come back, fade out, and come back again. He said, as you grow old you see these trends cycling through. I don’t consider myself that old, but I guess I am old enough to observe a cycle in the way we produce online content.&lt;/p&gt;

&lt;p&gt;When I was in high school, blogs like LiveJournal and Xanga were the way my friends and I produced online content. People posted about their lives, read each other’s blogs, commented. I even met some of my future classmates through our college’s pre-frosh LiveJournal community.&lt;/p&gt;

&lt;p&gt;Then sometime during college, that all stopped. Rather than creating original content, we substituted in quick actions. We liked on Facebook, retweeted on Twitter, and reblogged on Tumblr. There was this one button content “creation” phenomena.&lt;/p&gt;

&lt;p&gt;We are swinging back. People have gotten tired of the quickie content creation. They yearn for meatier content. I think that is driving the explosion in new blogging sites focused on writing. Whitespaces, no distraction, markdown… anything to make it easy to write meaningful content. I am looking at Ghost, Svbtle, and of course, Medium.&lt;/p&gt;

&lt;p&gt;Perhaps to invent the next step is to look back. Revamp some of those crazy ideas of 1990s like web rings and LiveJournal communities, but with a Web 2.0 spin—minimalism, flat design, maybe something with Node.js or Firebase or whatever is the hip new thing on Hacker News.&lt;/p&gt;

&lt;p&gt;After all, some of those PowerPoint animations that we made fun of are revamping into jQuery $.fadeIn(). iPhone apps now zoom in and out just like my high school PowerPoints once did. The past comes back. Maybe it disguises itself with a sunglass-mustache-combo, but it does come back.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Outside my 3D Printed Bubble</title>
   <link href="http://www.nyl.io/blog/2014/03/outside-my-3d-printed-bubble"/>
   <updated>2014-03-17T16:21:00-07:00</updated>
   <id>http://www.nyl.io/blog/blog/2014/03/outside-my-3d-printed-bubble</id>
   <content type="html">&lt;p&gt;I went to MIT this weekend for &lt;a href=&quot;http://grandhackfest.wordpress.com/&quot;&gt;Healthcare’s Grand H@ckfest&lt;/a&gt;—and we got first prize! I brought my 3d printer so we can print an physical prototype, and so we did. We designed, hacked, and 3d printed a new medical device in 24 hours.&lt;/p&gt;

&lt;p&gt;I figured at a place like MIT, most (if not all) have already seen, hacked apart, rebuilt 3d printers. I figured my 3d printer would be just another random piece of technology strewn about in the hallways.&lt;/p&gt;

&lt;p&gt;I was dead wrong. The 3d printer was a hit!&lt;/p&gt;

&lt;p&gt;We had a constant stream of people walking by our table to ask about 3d printing, take photos, or just gawk at the machine. While printing late night in my host’s dorm room, her hallmates kept poking their heads in to check out the 3d printer. In Brooklyn, people turned their heads to check out my cute puppy. Here, people turned their heads to check out my 3d printer.&lt;/p&gt;

&lt;h2 id=&quot;its-easy-for-the-wonder-of-3d-printing-to-get-lost-in-the-day-to-day&quot;&gt;It’s easy for the wonder of 3d printing to get lost in the day to day&lt;/h2&gt;

&lt;p&gt;This was a good reminder that I live in a 3d printed bubble. People in this bubble spend our time dealing with nozzle clogs, loose wires, buggy CAD software, supply chain, business tax accounting (yes, it’s that time of the year). It’s easy for the wonder of 3d printing to get lost in this day the day.&lt;/p&gt;

&lt;p&gt;One student said to me, “you have such an amazing life.” I did a double take. When I think of 3d printing in my day to day business, I think of the sales tax preparation coming up, the retail channel contracts to finalize, the material QA issues to sift through—not so amazing stuff.&lt;/p&gt;

&lt;p&gt;It’s good to step out of my bubble. It renews wonder. It sheds new perspective. It validates or invalidates assumptions. I’m glad I had the opportunity to do that this weekend. I’m glad it reminded me to step out of my bubble more often.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>What It's Like to Build a 3D Printer</title>
   <link href="http://www.nyl.io/blog/2014/03/what-its-like-to-build-a-3d-printer"/>
   <updated>2014-03-14T19:00:00-07:00</updated>
   <id>http://www.nyl.io/blog/blog/2014/03/what-its-like-to-build-a-3d-printer</id>
   <content type="html">&lt;p&gt;Most 3d printers are still hand assembled. The hands might belong to factory workers, or oftentimes, they belong to the end user. Most 3d printer companies sells kits that you then assemble. I’ve actually never done this before, so I found this video quite amusing. It’s a timelaspe of a 30 hour printer assembly project. From unboxing to first print.&lt;/p&gt;

&lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/26f7VvKh92Q&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;In my experience, many of the problems that people run across stem from this manual assembly process. Manual assembly leads to more room for error—a slightly off potentiometer, a wiggly thermistor registering inaccurate temperature readings, axis belts not taught. Those are just some of few issues that I’ve personally ran across.&lt;/p&gt;

&lt;p&gt;I am not a “hardware person,” so I don’t know how far we are from having 3d printers assembled by machines (more appropriate, no?), with soldered or enclosed parts that don’t wiggle out of place. Of course, it also means the end machine is less hackable, which means the standard of quality has to be magnitudes higher. There is nothing more frustrating than working with a broken machine that I can’t tweak.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>A Printer for Hackers</title>
   <link href="http://www.nyl.io/blog/2014/03/a-printer-for-hackers"/>
   <updated>2014-03-14T16:22:00-07:00</updated>
   <id>http://www.nyl.io/blog/blog/2014/03/a-printer-for-hackers</id>
   <content type="html">&lt;p&gt;The trend today in 3d printing is hitting it big with the consumers. With everyday people. Printer companies are making their printers more and more sleek. The idea of the “one button” push and print is ingrained into many marketing campaigns.&lt;/p&gt;

&lt;p&gt;Is that the right strategy?&lt;/p&gt;

&lt;p&gt;I’ve been mucking around with the Raspberry Pi today. I am playing around with it, setting up the wifi module, the camera. I have had to fiddle around with it in the same ways I have to fiddle with a desktop 3d printer. I tweaked this setting, I plugged it in, took the plug out, tweaked that setting, rinse and repeat. But it didn’t bother me as much. Because, the Raspberry Pi is a toy for the hackers, it’s a toy that comes with the expectation that you have to tweak, Google, and following all sorts of tutorials to get it working.&lt;/p&gt;

&lt;p&gt;I think setting that expectation is important, and might be a better strategy for 3d printing. I’m not saying we shouldn’t try to get consumers to experience 3d printing, but rather tell the story of “making and hacking,” rather than the story of “push and play.” It’s a more honest story, and I think in some sense a more rewarding story.&lt;/p&gt;

&lt;p&gt;When you hand somebody a block of clay, the expectation is that they will work to better their craft. It’s not a story of push and play. But the work and the learning to become a better sculptor is just as rewarding, if not more rewarding, than the end result.&lt;/p&gt;

&lt;p&gt;I wonder if it should be the same for 3d printing.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>3D Printers and Sewing Machines</title>
   <link href="http://www.nyl.io/blog/2014/03/3d-printers-and-sewing-machines"/>
   <updated>2014-03-12T19:00:00-07:00</updated>
   <id>http://www.nyl.io/blog/blog/2014/03/3d-printers-and-sewing-machines</id>
   <content type="html">&lt;p&gt;Slate recently &lt;a href=&quot;http://www.slate.com/articles/technology/technology/2014/03/solidoodle_4_testing_the_home_3_d_printer.html&quot;&gt;published an article about 3d printing&lt;/a&gt; in which the author compared it to the sewing machine.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Consider: Once upon a time, people purchased sewing patterns…and they made their own clothes. I wasn’t alive back then, but I’m pretty sure the process sucked. It took lots of time and effort and the clothes were often amateurishly constructed….Most people would much rather just get their clothes from a store—already assembled by people employing industrial-level efficiency and a wide variety of materials.
I like this analogy for two reasons.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;the-relationship-between-tools-and-crafts&quot;&gt;The relationship between tools and crafts.&lt;/h3&gt;
&lt;p&gt;Like the sewing machine, 3D printers are ultimately tools. The work a tool produces is as good as the craftsman who uses the tool. I believe eventually this will change, as 3D printing become less about creating than about modifying other’s creations, or simply printing pre-existing designs.&lt;/p&gt;

&lt;h3 id=&quot;both-are-revolutionary&quot;&gt;Both are revolutionary&lt;/h3&gt;
&lt;p&gt;The article glosses over this point. In fact, they claim quite the opposite. That sewing machines are used by the few, and most avoid the technology in favor of buying off the rack. However, it is the sewing machines that enable them to buy off the rack. In that sense, sewing machine are revolutionary. I believe so is 3D printing. Though, where as sewing machines enabled mass manufacturing, 3D printing will do quite the opposite—revolutionary nonetheless.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Introducing Lanyon</title>
   <link href="http://www.nyl.io/blog/2014/01/introducing-lanyon"/>
   <updated>2014-01-02T00:00:00-08:00</updated>
   <id>http://www.nyl.io/blog/blog/2014/01/introducing-lanyon</id>
   <content type="html">&lt;p&gt;Lanyon is an unassuming &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt; theme that places content first by tucking away navigation in a hidden drawer. It’s based on &lt;a href=&quot;http://getpoole.com&quot;&gt;Poole&lt;/a&gt;, the Jekyll butler.&lt;/p&gt;

&lt;h3 id=&quot;built-on-poole&quot;&gt;Built on Poole&lt;/h3&gt;

&lt;p&gt;Poole is the Jekyll Butler, serving as an upstanding and effective foundation for Jekyll themes by &lt;a href=&quot;https://twitter.com/mdo&quot;&gt;@mdo&lt;/a&gt;. Poole, and every theme built on it (like Lanyon here) includes the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Complete Jekyll setup included (layouts, config, &lt;a href=&quot;/404&quot;&gt;404&lt;/a&gt;, &lt;a href=&quot;/atom.xml&quot;&gt;RSS feed&lt;/a&gt;, posts, and &lt;a href=&quot;/about&quot;&gt;example page&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Mobile friendly design and development&lt;/li&gt;
  &lt;li&gt;Easily scalable text and component sizing with &lt;code&gt;rem&lt;/code&gt; units in the CSS&lt;/li&gt;
  &lt;li&gt;Support for a wide gamut of HTML elements&lt;/li&gt;
  &lt;li&gt;Related posts (time-based, because Jekyll) below each post&lt;/li&gt;
  &lt;li&gt;Syntax highlighting, courtesy Pygments (the Python-based code snippet highlighter)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;lanyon-features&quot;&gt;Lanyon features&lt;/h3&gt;

&lt;p&gt;In addition to the features of Poole, Lanyon adds the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Toggleable sliding sidebar (built with only CSS) via &lt;strong&gt;☰&lt;/strong&gt; link in top corner&lt;/li&gt;
  &lt;li&gt;Sidebar includes support for textual modules and a dynamically generated navigation with active link support&lt;/li&gt;
  &lt;li&gt;Two orientations for content and sidebar, default (left sidebar) and &lt;a href=&quot;https://github.com/poole/lanyon#reverse-layout&quot;&gt;reverse&lt;/a&gt; (right sidebar), available via &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; classes&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/poole/lanyon#themes&quot;&gt;Eight optional color schemes&lt;/a&gt;, available via &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; classes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/poole/lanyon#readme&quot;&gt;Head to the readme&lt;/a&gt; to learn more.&lt;/p&gt;

&lt;h3 id=&quot;browser-support&quot;&gt;Browser support&lt;/h3&gt;

&lt;p&gt;Lanyon is by preference a forward-thinking project. In addition to the latest versions of Chrome, Safari (mobile and desktop), and Firefox, it is only compatible with Internet Explorer 9 and above.&lt;/p&gt;

&lt;h3 id=&quot;download&quot;&gt;Download&lt;/h3&gt;

&lt;p&gt;Lanyon is developed on and hosted with GitHub. Head to the &lt;a href=&quot;https://github.com/poole/lanyon&quot;&gt;GitHub repository&lt;/a&gt; for downloads, bug reports, and features requests.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Example content</title>
   <link href="http://www.nyl.io/blog/2014/01/example-content"/>
   <updated>2014-01-01T00:00:00-08:00</updated>
   <id>http://www.nyl.io/blog/blog/2014/01/example-content</id>
   <content type="html">&lt;div class=&quot;message&quot;&gt;
  Howdy! This is an example blog post that shows several types of HTML content supported in this theme.
&lt;/div&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis &lt;a href=&quot;#&quot;&gt;dis parturient montes&lt;/a&gt;, nascetur ridiculus mus. &lt;em&gt;Aenean eu leo quam.&lt;/em&gt; Pellentesque ornare sem lacinia quam venenatis vestibulum. Sed posuere consectetur est at lobortis. Cras mattis consectetur purus sit amet fermentum.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Curabitur blandit tempus porttitor. Nullam quis risus eget urna mollis ornare vel eu leo. Nullam id dolor id nibh ultricies vehicula ut id elit.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Etiam porta &lt;strong&gt;sem malesuada magna&lt;/strong&gt; mollis euismod. Cras mattis consectetur purus sit amet fermentum. Aenean lacinia bibendum nulla sed consectetur.&lt;/p&gt;

&lt;h2 id=&quot;inline-html-elements&quot;&gt;Inline HTML elements&lt;/h2&gt;

&lt;p&gt;HTML defines a long list of available inline tags, a complete list of which can be found on the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element&quot;&gt;Mozilla Developer Network&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;To bold text&lt;/strong&gt;, use &lt;code&gt;&amp;lt;strong&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;To italicize text&lt;/em&gt;, use &lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Abbreviations, like &lt;abbr title=&quot;HyperText Markup Langage&quot;&gt;HTML&lt;/abbr&gt; should use &lt;code&gt;&amp;lt;abbr&amp;gt;&lt;/code&gt;, with an optional &lt;code&gt;title&lt;/code&gt; attribute for the full phrase.&lt;/li&gt;
  &lt;li&gt;Citations, like &lt;cite&gt;— Mark otto&lt;/cite&gt;, should use &lt;code&gt;&amp;lt;cite&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;Deleted&lt;/del&gt; text should use &lt;code&gt;&amp;lt;del&amp;gt;&lt;/code&gt; and &lt;ins&gt;inserted&lt;/ins&gt; text should use &lt;code&gt;&amp;lt;ins&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Superscript &lt;sup&gt;text&lt;/sup&gt; uses &lt;code&gt;&amp;lt;sup&amp;gt;&lt;/code&gt; and subscript &lt;sub&gt;text&lt;/sub&gt; uses &lt;code&gt;&amp;lt;sub&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most of these elements are styled by browsers with few modifications on our part.&lt;/p&gt;

&lt;h2 id=&quot;heading&quot;&gt;Heading&lt;/h2&gt;

&lt;p&gt;Vivamus sagittis lacus vel augue rutrum faucibus dolor auctor. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.&lt;/p&gt;

&lt;h3 id=&quot;code&quot;&gt;Code&lt;/h3&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis dis &lt;code&gt;code element&lt;/code&gt; montes, nascetur ridiculus mus.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Example can be run directly in your JavaScript console&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Create a function that takes two arguments and returns the sum of those arguments&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;adder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;return a + b&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Call the function&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;adder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// &amp;gt; 8&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Aenean lacinia bibendum nulla sed consectetur. Etiam porta sem malesuada magna mollis euismod. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa.&lt;/p&gt;

&lt;h3 id=&quot;lists&quot;&gt;Lists&lt;/h3&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Aenean lacinia bibendum nulla sed consectetur. Etiam porta sem malesuada magna mollis euismod. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Praesent commodo cursus magna, vel scelerisque nisl consectetur et.&lt;/li&gt;
  &lt;li&gt;Donec id elit non mi porta gravida at eget metus.&lt;/li&gt;
  &lt;li&gt;Nulla vitae elit libero, a pharetra augue.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Donec ullamcorper nulla non metus auctor fringilla. Nulla vitae elit libero, a pharetra augue.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Vestibulum id ligula porta felis euismod semper.&lt;/li&gt;
  &lt;li&gt;Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.&lt;/li&gt;
  &lt;li&gt;Maecenas sed diam eget risus varius blandit sit amet non magna.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Cras mattis consectetur purus sit amet fermentum. Sed posuere consectetur est at lobortis.&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;HyperText Markup Language (HTML)&lt;/dt&gt;
  &lt;dd&gt;The language used to describe and define the content of a Web page&lt;/dd&gt;

  &lt;dt&gt;Cascading Style Sheets (CSS)&lt;/dt&gt;
  &lt;dd&gt;Used to describe the appearance of Web content&lt;/dd&gt;

  &lt;dt&gt;JavaScript (JS)&lt;/dt&gt;
  &lt;dd&gt;The programming language used to build advanced Web sites and applications&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;Integer posuere erat a ante venenatis dapibus posuere velit aliquet. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Nullam quis risus eget urna mollis ornare vel eu leo.&lt;/p&gt;

&lt;h3 id=&quot;tables&quot;&gt;Tables&lt;/h3&gt;

&lt;p&gt;Aenean lacinia bibendum nulla sed consectetur. Lorem ipsum dolor sit amet, consectetur adipiscing elit.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Upvotes&lt;/th&gt;
      &lt;th&gt;Downvotes&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tfoot&gt;
    &lt;tr&gt;
      &lt;td&gt;Totals&lt;/td&gt;
      &lt;td&gt;21&lt;/td&gt;
      &lt;td&gt;23&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tfoot&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Alice&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bob&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Charlie&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Nullam id dolor id nibh ultricies vehicula ut id elit. Sed posuere consectetur est at lobortis. Nullam quis risus eget urna mollis ornare vel eu leo.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Want to see something else added? &lt;a href=&quot;https://github.com/poole/poole/issues/new&quot;&gt;Open an issue.&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>What's Jekyll?</title>
   <link href="http://www.nyl.io/blog/2013/12/whats-jekyll"/>
   <updated>2013-12-31T00:00:00-08:00</updated>
   <id>http://www.nyl.io/blog/blog/2013/12/whats-jekyll</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt; is a static site generator, an open-source tool for creating simple yet powerful websites of all shapes and sizes. From &lt;a href=&quot;https://github.com/mojombo/jekyll/blob/master/README.markdown&quot;&gt;the project’s readme&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Jekyll is a simple, blog aware, static site generator. It takes a template directory […] and spits out a complete, static website suitable for serving with Apache or your favorite web server. This is also the engine behind GitHub Pages, which you can use to host your project’s page or blog right here from GitHub.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It’s an immensely useful tool and one we encourage you to use here with Lanyon.&lt;/p&gt;

&lt;p&gt;Find out more by &lt;a href=&quot;https://github.com/mojombo/jekyll&quot;&gt;visiting the project on GitHub&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Why MOOCs are Failing to Disrupt College Education</title>
   <link href="http://www.nyl.io/blog/2013/11/why-moocs-are-failing-to-disrupt-college-education"/>
   <updated>2013-11-15T20:00:00-08:00</updated>
   <id>http://www.nyl.io/blog/blog/2013/11/why-moocs-are-failing-to-disrupt-college-education</id>
   <content type="html">&lt;p&gt;MOOCs (&lt;a href=&quot;http://en.wikipedia.org/wiki/Massive_open_online_course&quot;&gt;massive open online courses&lt;/a&gt; are gaining popularity, but do they disrupt education by opening up lectures? I don’t think so. Education, especially college education, is so much more than just lectures. The most valuable parts of my college experience is (prioritized):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Interaction with my fellow students&lt;/strong&gt;. I learned how to work with and lead other very smart people. My friends from college make up a priceless piece of my network.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Brand&lt;/strong&gt;. I am paying for the brand of the college on my diploma. Good brands attract good employers to recruit on campus.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Access to resources&lt;/strong&gt;. I had access to funding, an extensive library, and facilities to help my projects. I had access to alumni and career services. Oh, and I also had access to lectures by some engaging professors.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It may seem that the most valuable parts of college happen in classroom lectures (which MOOCs help to open up), but I think the most valuable pieces of education happens elsewhere. This is the genius of universities opening up their lectures. They can distribute freely what seems to be their core value, while continuing to exchange their real value for rising tuition costs.&lt;/p&gt;

&lt;p&gt;Technology will disrupt education from outside of what people traditional identify as education. It will happen through Meetups, Accelerators, Wikipedia, etc. MOOCs provide value, but they do not replace the most valuable pieces of my college education. That is why I think MOOCs are ultimately failing at the goal of disrupting education&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Facts and Opinions</title>
   <link href="http://www.nyl.io/blog/2013/11/facts-and-opinions"/>
   <updated>2013-11-12T17:26:00-08:00</updated>
   <id>http://www.nyl.io/blog/blog/2013/11/facts-and-opinions</id>
   <content type="html">&lt;p&gt;I was reading an article yesterday about a customer who yelled at this cashier. This cashier had Aspergers and the customer thought he moved too slow. The writer clearly thought the customer behaved inappropriately.&lt;/p&gt;

&lt;p&gt;The article didn’t convince me though. How slow was the cashier moving? What did the customer say? The answers to these questions are facts. Opinions are flexible. Facts are not. Facts make opinions more compelling.&lt;/p&gt;

&lt;p&gt;When I read reviews of movies, restaurants, and products, I look for facts. Or, as close to facts as I can get. After all, some things are simply subjective (e.g. “this food is too salty”).&lt;/p&gt;

&lt;p&gt;Last, facts treat readers with more respect. They give readers an opportunity judge for themselves.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>The Myth of Spira</title>
   <link href="http://www.nyl.io/blog/2013/08/the-myth-of-spira"/>
   <updated>2013-08-13T19:00:00-07:00</updated>
   <id>http://www.nyl.io/blog/blog/2013/08/the-myth-of-spira</id>
   <content type="html">&lt;blockquote&gt;
  &lt;p&gt;“Long time ago, there were a whole lot of cities in Spira. Big cities with machina -machines- to run ‘em. People played all day and let the machina do the work”
— Wakka, Final Fantasy X&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This quote is about a world where technology has advanced so much that nobody did any work, because machines took care of everything.&lt;/p&gt;

&lt;p&gt;I believed that we were approaching that point. I saw technology make things easier and more accessible. Kickstarter made fundraising easier, Etsy and Shopify simplified commerce to a few button clicks… the list goes on. I was hopeful. One day, all I have to worry about is what books to read (made easier by the Kindle) and what movies to watch (thank you Netflix). Even the leisure activities are more accessible now.&lt;/p&gt;

&lt;p&gt;But I no longer believe this, because &lt;strong&gt;humans are not meant to be content&lt;/strong&gt;. People will find new problems to work on, even when nobody is asking for it. That’s progress.&lt;/p&gt;

&lt;p&gt;Take &lt;a href=&quot;http://www.amazon.com/The-4-Hour-Workweek-Anywhere-Expanded/dp/0307465357&quot;&gt;Four Hour Work Week&lt;/a&gt; for example. It’s a book about how to utilise modern day resources so you can work only a few hours a week and still make a comfortable living. You can “play all day” as Wakka said in Final Fantasy X. Yet, all the marketing and research that keeps Tim Ferriss (the author of this book) busy is way more than four hours a week—probably way more than 40 hours a week. Isn’t that ironic? &lt;strong&gt;The author who prescribes how to work less is actually working more so that he can prescribe how to work less&lt;/strong&gt;. Now, I don’t personally know him, but having read his &lt;a href=&quot;http://en.wikipedia.org/wiki/Timothy_Ferriss&quot;&gt;Wikipedia page&lt;/a&gt;, I bet he’s exactly the type of person who can never be content, always moving along.&lt;/p&gt;

&lt;p&gt;The Spira from Final Fantasy X is already here, and probably has been here for a while now. But we reject it, because we are not meant to be content. We are meant to improve.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Writing is Daunting</title>
   <link href="http://www.nyl.io/blog/2013/08/writing-is-daunting"/>
   <updated>2013-08-08T19:00:00-07:00</updated>
   <id>http://www.nyl.io/blog/blog/2013/08/writing-is-daunting</id>
   <content type="html">&lt;p&gt;When I was a freshmen in college, I enrolled in a writing intensive humanities program. We were assigned a paper (almost) every week. When my drafts were poor, my professor would recommend the writing tutor.&lt;/p&gt;

&lt;p&gt;After visits with writing tutor, my papers were only marginally better. Some sentences sounded clearer. The grammar was less funky. But by and large, the quality remained poor.&lt;/p&gt;

&lt;p&gt;See, the issue was not the writing (in its narrow sense) but the thought behind the writing. The writing tutor was there to help us with things like grammar and clarity. He was not there to help make my ideas more insightful, but that is just as important (if not more so).&lt;/p&gt;

&lt;p&gt;(I don’t want to belittle the art of quality expression. It is hard. Even when I have quality ideas, I often struggle to communicate them well.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;“Writing well” requires that I use quality expression to usher quality thought into the world.&lt;/strong&gt; Half of the battle happens before I put pen to paper (or keyboard to… WYSIWYG editor?).&lt;/p&gt;

&lt;p&gt;Having a quality thought is hard. Expression complex ideas well is also hard. Writing requires both which equals hard-squared. And that is daunting.&lt;/p&gt;
</content>
 </entry>
 

</feed>
