<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>nyl.io</title>
    <description>In order to be old and wise, you must first be young and stupid.</description>
    <link>http://nyl.io/blog/</link>
    <atom:link href="http://nyl.io/blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 07 Sep 2015 16:33:59 -0700</pubDate>
    <lastBuildDate>Mon, 07 Sep 2015 16:33:59 -0700</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Hello World Projects</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://nyl.ghost.io/content/images/2015/09/helloworld.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The idea behind Hello World Projects is to create simple tutorials that does one simple thing. Usually it involves turning on an LED or displaying “Hello World.”&lt;/p&gt;

&lt;p&gt;These are simple building blocks you can use for more complicated projects. I often find that the simplest tutorial is actually most helpful. The more complex a tutorial gets, the more I have to weed and parse since not all details does not apply to my specific needs.&lt;/p&gt;

&lt;p&gt;First in the series, &lt;a href=&quot;http://blog.nyl.io/hello-world-custom-pcb-fritzing/&quot;&gt;Hello World Custom PCBs (Printed Circuit Boards)&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Got some topic you want to learn about? Let me know in the comments. Or email me at &lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#104;&amp;#105;&amp;#064;&amp;#110;&amp;#121;&amp;#108;&amp;#046;&amp;#105;&amp;#111;&quot;&gt;&amp;#104;&amp;#105;&amp;#064;&amp;#110;&amp;#121;&amp;#108;&amp;#046;&amp;#105;&amp;#111;&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Mon, 07 Sep 2015 02:32:45 -0700</pubDate>
        <link>http://nyl.io/blog/2015/09/hello-world-intro/</link>
        <guid isPermaLink="true">http://nyl.io/blog/2015/09/hello-world-intro/</guid>
        
        
        <category>helloworld</category>
        
      </item>
    
      <item>
        <title>Welcome to Jekyll!</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Tom&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &amp;#39;Hi, Tom&amp;#39; to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://github.com/jekyll/jekyll-help&quot;&gt;Jekyll’s dedicated Help repository&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Mon, 07 Sep 2015 01:55:45 -0700</pubDate>
        <link>http://nyl.io/blog/2015/09/welcome-to-jekyll/</link>
        <guid isPermaLink="true">http://nyl.io/blog/2015/09/welcome-to-jekyll/</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Hello World: Design PCBs with Fritzing</title>
        <description>&lt;h5 id=&quot;this-post-is-part-of-the-hello-world-projectshelloworld&quot;&gt;This post is part of the &lt;a href=&quot;/helloworld&quot;&gt;Hello World Projects&lt;/a&gt;.&lt;/h5&gt;

&lt;hr /&gt;

&lt;p&gt;The simple breadboard with a messy, beautiful rainbow of wires sticking this way and that. Easy enough! But now, how does one tidy things up?&lt;/p&gt;

&lt;p&gt;Why, &lt;strong&gt;printed circuit boards&lt;/strong&gt;, of course! You know, those green things with lines all over them. Don’t worry. It’s not that hard. Meet Fritzing, your friendly PCB designer. &lt;a href=&quot;http://fritzing.org/download/&quot;&gt;Fritzing&lt;/a&gt; is kind of like LEGOs of PCB design.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://fritzing.org/download/&quot;&gt;Download Fritzing Here.&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;guide-step&quot;&gt;
  &lt;div class=&quot;guide-images&quot;&gt;
    &lt;img src=&quot;/content/images/2015/09/breadboard1_an.png&quot; data-caption=&quot;breadboard view&quot; /&gt;
    &lt;img src=&quot;/content/images/2015/09/breadboard2.png&quot; data-caption=&quot;components added&quot; /&gt;
    &lt;img src=&quot;/content/images/2015/09/breadboard3_an-1.png&quot; data-caption=&quot;changing wire colors &amp;amp; adding bend points&quot; /&gt;
  &lt;/div&gt;
  &lt;div class=&quot;guide-text&quot;&gt;
    &lt;h2 class=&quot;guide-title&quot;&gt;Step 1: Breadboard Layout&lt;/h2&gt;
    &lt;ul&gt;
      &lt;li&gt;Open Fritzing&lt;/li&gt;
      &lt;li&gt;Add components to the workspace&lt;/li&gt;
      &lt;li&gt;Click and drag to add wires&lt;/li&gt;
      &lt;li&gt;Change wire colors&lt;/li&gt;
      &lt;li&gt;Add bend points to wires by clicking &amp;amp; dragging&lt;/li&gt;
    &lt;/ul&gt;
    Bonus: Take a screenshot or save as image file--helpful for sharing projects or documenting your work. 
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;guide-step&quot;&gt;
  &lt;div class=&quot;guide-images&quot;&gt;
    &lt;img src=&quot;/content/images/2015/09/pcb1_an.png&quot; data-caption=&quot;default view&quot; /&gt;
    &lt;img src=&quot;/content/images/2015/09/pcb_an.png&quot; data-caption=&quot;&quot; /&gt;
    &lt;img src=&quot;/content/images/2015/09/pcb_via-1.png&quot; data-caption=&quot;vias&quot; /&gt;
    &lt;img src=&quot;/content/images/2015/09/pcb3.jpg&quot; data-caption=&quot;click on any point to see where the trace hits&quot; /&gt;
  &lt;/div&gt;
  &lt;div class=&quot;guide-text&quot;&gt;
    &lt;h2 class=&quot;guide-title&quot;&gt;Step 2: Design the PCB&lt;/h2&gt;
    &lt;strong&gt;1. Click the PCB tab&lt;/strong&gt;&lt;br /&gt;
    &lt;strong&gt;2. Route wires&lt;/strong&gt; so the traces don't cross
    &lt;ul&gt;
      &lt;li&gt;Drag dotted lines to make traces&lt;/li&gt;
      &lt;li&gt;Right click trace to move trace between layers&lt;/li&gt;
      &lt;li&gt;Right click bend point to make a via, which connects the two layers&lt;/li&gt;
      &lt;li&gt;Click on bendpoints or connection points to see where the trace travels&lt;/li&gt;
    &lt;/ul&gt;

    &lt;strong&gt;3. Resize the board&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Drag corners of the board&lt;/li&gt;
    &lt;/ul&gt;

    &lt;strong&gt;4. Adjust the text&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Click the component, you'll see dotted lines around the component&lt;/li&gt;
      &lt;li&gt;Drag label to reposition&lt;/li&gt;
      &lt;li&gt;Right click to change rotation&lt;/li&gt;
      &lt;li&gt;Double click to change the text&lt;/li&gt;
    &lt;/ul&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;guide-step&quot;&gt;
  &lt;div class=&quot;guide-images&quot;&gt;
    &lt;img src=&quot;/content/images/2015/09/pcb8_routing.jpg&quot; data-caption=&quot;routing options&quot; /&gt;
    &lt;img src=&quot;/content/images/2015/09/pcb8_view.jpg&quot; data-caption=&quot;view options&quot; /&gt;
  &lt;/div&gt;
  &lt;div class=&quot;guide-text&quot;&gt;
    &lt;h3 class=&quot;guide-title&quot;&gt;Additional Options&lt;/h3&gt;
    &lt;strong&gt;Routing options&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Design rule check: always use this before sending PCB to fab&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;Autorouter/design rule settings&lt;/li&gt;
      &lt;li&gt;Autoroute: I don't use this much&lt;/li&gt;
    &lt;/ul&gt;
    &lt;strong&gt;View options&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Set Grid Size&lt;/li&gt;
      &lt;li&gt;Align to Grid: snaps wires/components to the grid&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;guide-step&quot;&gt;
  &lt;div class=&quot;guide-images&quot;&gt;
    &lt;img src=&quot;/content/images/2015/09/pcb9.jpg&quot; data-caption=&quot;&quot; /&gt;
    &lt;img src=&quot;/content/images/2015/09/finder.jpg&quot; data-caption=&quot;zip up all gerber files&quot; /&gt;
  &lt;/div&gt;
  &lt;div class=&quot;guide-text&quot;&gt;
    &lt;h2 class=&quot;guide-title&quot;&gt;Step 3. Export Gerber File&lt;/h2&gt;
    &lt;ul&gt;
      &lt;li&gt;Click arrow next to &quot;Export to PCB&quot;&lt;/li&gt;
      &lt;li&gt;Click &quot;Extended Gerber&quot;&lt;/li&gt;
      &lt;li&gt;Zip all Gerber Files for uploading to PCB factory&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;guide-step&quot;&gt;
  &lt;div class=&quot;guide-images&quot;&gt;
    &lt;img src=&quot;/content/images/2015/09/oshpark.png&quot; data-caption=&quot;&quot; /&gt;
    &lt;img src=&quot;/content/images/2015/09/oshpark2_an.png&quot; data-caption=&quot;&quot; /&gt;
  &lt;/div&gt;
  &lt;div class=&quot;guide-text&quot;&gt;
    &lt;h2 class=&quot;guide-title&quot;&gt;Step 4. Order PCBs from a Service Provider&lt;/h2&gt;
    I like &lt;a href=&quot;http://oshpark.com&quot;&gt;OSHPark&lt;/a&gt;. They are a bit slow (~2 weeks to Seattle), but very cheap for small boards ($5/inch2).
  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&quot;other-pcb-prototyping-companies&quot;&gt;Other PCB Prototyping Companies&lt;/h2&gt;

&lt;p&gt;I did a few searches, and found some good options. These are quotes based on shipping a 2 layer 1.5x1.7 inch board to Seattle, WA. Actual mileage may vary depending on your design and location.&lt;/p&gt;

&lt;table style=&quot;font-size: 0.75em&quot;&gt;
&lt;tr style=&quot;font-weight: bold&quot;&gt;&lt;td&gt;Company&lt;/td&gt;&lt;td&gt;QTY&lt;/td&gt;&lt;td&gt;Lead Time (to Seattle)&lt;/td&gt;&lt;td&gt;Price&lt;/td&gt;&lt;td&gt;Limits/Pricing&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://oshpark.com&quot;&gt;OSHPark&lt;/a&gt;&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;10-14 business days&lt;br /&gt;8-12 production + 2 shipping&lt;/td&gt;&lt;td&gt;$12&lt;br /&gt;$12 PCB + $0 shipping&lt;/td&gt;&lt;td&gt;$5/in&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://pcbnet.com&quot;&gt;PCBNet&lt;/a&gt;&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;9 BDs&lt;br /&gt;5 prod + 4 shipping&lt;/td&gt;&lt;td&gt;$25&lt;br /&gt;$25 PCB + $0 shipping&lt;/td&gt;&lt;td&gt;under 60in&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://imall.iteadstudio.com&quot;&gt;ITEAD&lt;/a&gt;&lt;/td&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;6 BDs&lt;br /&gt;4 prod + 2 shipping&lt;/td&gt;&lt;td&gt;$28&lt;br /&gt;$10 PCB + $18 shipping&lt;/td&gt;&lt;td&gt;under 5x5cm&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://imall.iteadstudio.com&quot;&gt;ITEAD&lt;/a&gt;&lt;/td&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;20 BDs (could be longer)&lt;br /&gt;4 prod + 16-? shipping&lt;/td&gt;&lt;td&gt;$15&lt;br /&gt;$10 PCB + $5 shipping&lt;/td&gt;&lt;td&gt;under 5x5cm&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://seeedstudio.com&quot;&gt;SeeedStudio&lt;/a&gt;&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;18-48 BDs&lt;br /&gt;3 prod + 15-45 shipping&lt;/td&gt;&lt;td&gt;$15&lt;br /&gt;$10 PCB + $5 shipping&lt;/td&gt;&lt;td&gt;under 5x5cm&lt;sup&gt;2&amp;lt;/sup
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://seeedstudio.com&quot;&gt;SeeedStudio&lt;/a&gt;&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;5 BDs&lt;br /&gt;3 production + 2 shipping&lt;/td&gt;&lt;td&gt;$40&lt;br /&gt;$10 PCB + $30 shipping&lt;/td&gt;&lt;td&gt;under 5x5cm&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://fr.com&quot;&gt;Fritzing&lt;/a&gt;&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;17-25 BDs&lt;br /&gt;7-11 production + 10-14 shipping&lt;/td&gt;&lt;td&gt;$21&lt;br /&gt;$17 PCB + $4 shipping&lt;/td&gt;&lt;td&gt;$5.20 + $0.96/cm&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt;&lt;/tr&gt;


You can also use [PCB Shopper](http://pcbshopper.com/) to compare price and lead time across other manufacturers. Though, I've found that some of the prices are off. Especially shipping prices, which can account for a good chunk when ordering small batches from China. 

Cool? Cool. Now go make things. 

&lt;/sup&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
</description>
        <pubDate>Sat, 05 Sep 2015 16:26:00 -0700</pubDate>
        <link>http://nyl.io/blog/2015/09/hello-world-custom-pcb-fritzing/</link>
        <guid isPermaLink="true">http://nyl.io/blog/2015/09/hello-world-custom-pcb-fritzing/</guid>
        
        
      </item>
    
      <item>
        <title>Hello World Projects, an Intro</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://nyl.ghost.io/content/images/2015/09/helloworld.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The idea behind Hello World Projects is to create simple tutorials that does one simple thing. Usually it involves turning on an LED or displaying “Hello World.”&lt;/p&gt;

&lt;p&gt;These are simple building blocks you can use for more complicated projects. I often find that the simplest tutorial is actually most helpful. The more complex a tutorial gets, the more I have to weed and parse since not all details does not apply to my specific needs.&lt;/p&gt;

&lt;p&gt;First in the series, &lt;a href=&quot;http://blog.nyl.io/hello-world-custom-pcb-fritzing/&quot;&gt;Hello World Custom PCBs (Printed Circuit Boards)&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Got some topic you want to learn about? Let me know in the comments. Or email me at &lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#104;&amp;#105;&amp;#064;&amp;#110;&amp;#121;&amp;#108;&amp;#046;&amp;#105;&amp;#111;&quot;&gt;&amp;#104;&amp;#105;&amp;#064;&amp;#110;&amp;#121;&amp;#108;&amp;#046;&amp;#105;&amp;#111;&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Fri, 04 Sep 2015 16:26:00 -0700</pubDate>
        <link>http://nyl.io/blog/2015/09/helloworld/</link>
        <guid isPermaLink="true">http://nyl.io/blog/2015/09/helloworld/</guid>
        
        
      </item>
    
      <item>
        <title>Milling PCBs</title>
        <description>&lt;p&gt;Well, the nice folks at &lt;a href=&quot;http://sodo.ms&quot;&gt;SoDo MakerSpace&lt;/a&gt; got me started on the CNC Mill and Laser Cutter.&lt;/p&gt;

&lt;p&gt;I used the smaller mill, a Shapeoko 2, to mill some PCBs. And by “some,” I mean “one.” Well, the first one broke into a hot mess. So I guess it was “some” after all. Don’t get too excited, ‘twas  but a simple hello world PCB (read: Battery &amp;gt; Resistor &amp;gt; LED).&lt;/p&gt;

&lt;p&gt;I used &lt;a href=&quot;www.richa1.com/RichardAlbritton/create-g-code-from-an-eagle-file/&quot;&gt;Richard Albritton’s PCB-GCode Tutorial&lt;/a&gt;. PCB-Gcode is an Eagle add on. Yes. This means you need EagleCAD. The add on outputs to GCode, which the CNC can understand. There’s a bunch of settings that Richard has fiddled around and tweaked for optimum optimumcy for the Shapeoko 2.&lt;/p&gt;

&lt;p&gt;And drumroll……&lt;/p&gt;

&lt;h3 id=&quot;top-layer-copper-path-outline&quot;&gt;Top Layer Copper Path Outline&lt;/h3&gt;

&lt;p&gt;bzzzzzz bzzzzzzz&lt;/p&gt;

&lt;iframe class=&quot;macdown-hide imgur-embed&quot; width=&quot;100%&quot; height=&quot;404&quot; frameborder=&quot;0&quot; src=&quot;http://i.imgur.com/Aiqasn9.gifv#embed&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;drilling-through-holes&quot;&gt;Drilling Through Holes&lt;/h3&gt;

&lt;p&gt;boop! boop! boop!&lt;/p&gt;

&lt;iframe class=&quot;macdown-hide imgur-embed&quot; width=&quot;100%&quot; height=&quot;404&quot; frameborder=&quot;0&quot; src=&quot;http://i.imgur.com/bRqK82h.gifv#embed&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;bottom-layer-copper-path-outline&quot;&gt;Bottom Layer Copper Path Outline&lt;/h3&gt;

&lt;p&gt;Say what?! Yup! I did a two layer PCB with two tiny vias. I wanted to see if I can do a two sided PCB b/c I’m not patient enough to just route with one side.&lt;/p&gt;

&lt;iframe class=&quot;macdown-hide imgur-embed&quot; width=&quot;100%&quot; height=&quot;404&quot; frameborder=&quot;0&quot; src=&quot;http://i.imgur.com/h7XIdB2.gifv#embed&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;and-it-works&quot;&gt;… and it works!&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/08/ledmill_front.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/08/ledmill_back.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;zomg-its-a-close-up&quot;&gt;ZOMG IT’S A CLOSE UP!&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/08/ledmill_02.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The routes are 16 mils, and it measures pretty accurate. Hooray!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I’m starting to use Eagle for a few things, and I know it’s the more “professional” choice, but man do I enjoying using Fritzing!&lt;/p&gt;

&lt;p&gt;So next up, using Fritzing to generate millable SVGs. Maybe even see if my bits has enough resolution to mill an Intel Edison breakout. Gasp.&lt;/p&gt;

&lt;p&gt;Stay tuned dot dot dot.&lt;/p&gt;
</description>
        <pubDate>Tue, 25 Aug 2015 06:03:30 -0700</pubDate>
        <link>http://nyl.io/blog/2015/08/milling-pcbs/</link>
        <guid isPermaLink="true">http://nyl.io/blog/2015/08/milling-pcbs/</guid>
        
        
      </item>
    
      <item>
        <title>Dogfood</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Eating your own dog food, also called dogfooding, is a slang term used to reference a scenario in which a company uses its own product to validate the quality and capabilities of the product. — &lt;a href=&quot;http://en.wikipedia.org/wiki/Eating_your_own_dog_food&quot;&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/08/dogfood-1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When I design products, I make an effort to regularly use the products I make. If I write a platform or &lt;a href=&quot;http://blog.nyl.io/guidejs/&quot;&gt;library&lt;/a&gt;, I &lt;a href=&quot;http://blog.nyl.io/esp8266-led-using-guide-js/&quot;&gt;use it myself&lt;/a&gt;. It’s something so obvious, but surprisingly uncommon.&lt;/p&gt;

&lt;h3 id=&quot;knowing-the-community&quot;&gt;Knowing the Community&lt;/h3&gt;

&lt;p&gt;One side effect of eating your own dogfood is that you become a part of the community. You are using the same products, sharing the same goals, and it’s just easier to connect with your community that way.&lt;/p&gt;

&lt;p&gt;Being a part of the community opens you up to a world of insights. They can provide feedback and ideas that you’d never come across just by yourself.&lt;/p&gt;

&lt;h3 id=&quot;personalize-the-pain&quot;&gt;Personalize the Pain&lt;/h3&gt;

&lt;p&gt;Pain avoidance is a great motivator. We can’t help it. We are evolutionarily wired to avoid things that cause us pain. It’s how we learn to not stick our hands in the fire even though it looks so pretty.&lt;/p&gt;

&lt;p&gt;Taken with the point above (“Knowing the Community”), you aren’t just solving pain for yourself, but also for your friends. It works for both selfish and unselfish people.&lt;/p&gt;

&lt;h3 id=&quot;quicker-product-development&quot;&gt;Quicker Product Development&lt;/h3&gt;

&lt;p&gt;Dogfooding also enables you to develop product at a quicker pace. Rather than talking to customers for every minor tweak or product decision, you can reflect on your own experience, anecdotes and observations from being a part of and interacting with members of the community. It’s just easier for the left brain to talk with the right brain than to conduct a focus group, and quicker, and easier.&lt;/p&gt;

&lt;p&gt;Of course, the flip side is to not get too cocky about all of this. There’s still a lot that you don’t know. Move quickly. Remain curious. Confidence is arrogance with a healthy dose of curiosity.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;Every designer and product manager should use their own products. Not &lt;em&gt;try&lt;/em&gt; their own products, but actually &lt;em&gt;use&lt;/em&gt; it. It will make your lives easier.&lt;/p&gt;
</description>
        <pubDate>Wed, 05 Aug 2015 15:09:58 -0700</pubDate>
        <link>http://nyl.io/blog/2015/08/dogfood/</link>
        <guid isPermaLink="true">http://nyl.io/blog/2015/08/dogfood/</guid>
        
        
      </item>
    
      <item>
        <title>Ghost Hack</title>
        <description>&lt;p&gt;One of the good things about markdown is it lets you interject HTML in the middle. So far example,&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;
&lt;div class=&quot;red&quot;&gt;I'm red&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;I’m bold&lt;/strong&gt;
```&lt;/p&gt;

&lt;p&gt;Gives you something like:&lt;/p&gt;
&lt;div class=&quot;red&quot;&gt;I'm red&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;I’m bold&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;the-problem&quot;&gt;The Problem&lt;/h2&gt;
&lt;p&gt;Here’s the problem though, when you are writing in html, you can’t switch back to Markdown. So for content in a div, you can’t take care of all the ==cool== &lt;em&gt;markdown&lt;/em&gt; styles.&lt;/p&gt;

&lt;p&gt;So, for example,&lt;/p&gt;

&lt;p&gt;```
&lt;strong&gt;I’m bold&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;red&quot;&gt;**I'm not bold, still red though**&lt;/div&gt;
&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;will give you:&lt;/p&gt;

&lt;div class=&quot;red&quot;&gt;**I'm not bold, still red though**&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;I’m bold&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;installation-markdown-in-div-preprocessor&quot;&gt;Installation: Markdown-in-Div Preprocessor&lt;/h2&gt;

&lt;p&gt;So I made a small Markdown preprocessor. It basically uses img tags to store div info. I use img tags because it doesn’t require closing tags.&lt;/p&gt;

&lt;p&gt;Copy/paste this in after jQuery in the header but before anything that moves around elements or add elements to the HTML.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
&amp;lt;script&amp;gt;
    // Markdown In Div
    $(document).ready(function() {
        html = $(&quot;.post-content&quot;).html().replace(/&amp;lt;img src=&quot;start:/g, '&amp;lt;div class=&quot;')
            .replace(/&amp;lt;img src=&quot;end&quot; alt=&quot;&quot; title=&quot;&quot;&amp;gt;/g, '&amp;lt;/div&amp;gt;')
        	.replace(/&amp;lt;img src=&quot;end&quot; alt=&quot;&quot;&amp;gt;/g, &quot;&amp;lt;/div&amp;gt;&quot;);
        $(&quot;.post-content&quot;).html(html);
        $(&quot;.post-content&quot;).find(&quot;div&quot;).each(function() {
            class_cleaned = $(this).attr(&quot;class&quot;).replace(&quot;&amp;amp;&quot;, &quot; &quot;);
            $(this).attr(&quot;class&quot;, class_cleaned)
        })
    })
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;example-usage&quot;&gt;Example Usage&lt;/h2&gt;

&lt;p&gt;Now, when you want to open close tag, you can use&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
 ![](start:red)
 this should be red ==with== *formatting*!
 ![](http://)
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will become:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;start:red&quot; alt=&quot;&quot; /&gt;
 this should be red ==with== &lt;em&gt;formatting&lt;/em&gt;!
 &lt;img src=&quot;end&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ooooo… Markdown in a Div ~~using~~ hacking the img tag.&lt;/p&gt;

&lt;p&gt;Spiffy!&lt;/p&gt;

&lt;style&gt;
.red { color: #f00; }
&lt;/style&gt;

</description>
        <pubDate>Tue, 04 Aug 2015 04:06:27 -0700</pubDate>
        <link>http://nyl.io/blog/2015/08/ghost-hack-markdown-in-div/</link>
        <guid isPermaLink="true">http://nyl.io/blog/2015/08/ghost-hack-markdown-in-div/</guid>
        
        
      </item>
    
      <item>
        <title>Wifi Connected LED using Guide.js</title>
        <description>&lt;p&gt;I wasn’t kidding when I said I’d use &lt;a href=&quot;https://github.com/neuralfirings/guide&quot;&gt;Guide.js&lt;/a&gt;, my new framework for writing guides and tutorials. Here’s a rewrite of my ESP8266 to LED tutorial. I think it’s much neater than the &lt;a href=&quot;http://blog.nyl.io/esp8266-led-arduino/&quot;&gt;previous version&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;guide-step&quot;&gt;  
  &lt;div class=&quot;guide-main&quot;&gt;
&lt;iframe class=&quot;imgur-embed&quot; width=&quot;100%&quot; height=&quot;360&quot; frameborder=&quot;0&quot; src=&quot;http://i.imgur.com/GfD93zj.gifv#embed&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;div class=&quot;guide-text&quot;&gt;
&lt;h2 class=&quot;guide-title&quot;&gt;Ingredients&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://amzn.to/1Lu6QHu&quot;&gt;ESP8266-01 Wifi Module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://amzn.to/1OIMPLp&quot;&gt;White LED&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://amzn.to/1ISi1tf&quot;&gt;FTDI Cable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://amzn.to/1OXGV9W&quot;&gt;Lipo 3.7V Battery&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;guide-step&quot;&gt;  
  &lt;div class=&quot;guide-images&quot;&gt;
    &lt;img src=&quot;http://blog.nyl.io/content/images/2015/07/esp_led_dataflow.png&quot; data-caption=&quot;Diagram of Workflow&quot; /&gt;
  &lt;/div&gt;
  &lt;div class=&quot;guide-text&quot;&gt;
    &lt;h2 class=&quot;guide-title&quot;&gt;Workflow&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;PHP page writes on/off instructions to JSON file based on user input&lt;/li&gt;
&lt;li&gt;ESP8266 pings light.json, reads instructions, and turns on/off led&amp;lt;/li&amp;lt;

  




&lt;div class=&quot;guide-step&quot;&gt;  
  &lt;div class=&quot;guide-main&quot;&gt;
```
$ sudo nano light.json
$ chmod 755 -R light.json
```
  &lt;/div&gt;
  &lt;div class=&quot;guide-text&quot;&gt;
    &lt;h2 class=&quot;guide-title&quot;&gt;Step 1: Create JSON using Shell Scripts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;go to the directory of your PHP file&lt;/li&gt;
&lt;li&gt;create light.json&lt;/li&gt;
&lt;li&gt;assigns permission so index.php can write to it&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;guide-step&quot;&gt;  
  &lt;div class=&quot;guide-main&quot;&gt;
```
&lt;?php  
$light = $_GET['light'];
if($light == &quot;on&quot;) {  
  $file = fopen(&quot;light.json&quot;, &quot;w&quot;) or die(&quot;can't open file&quot;);
  fwrite($file, '{&quot;light&quot;: &quot;on&quot;}');
  fclose($file);
} 
else if ($light == &quot;off&quot;) {  
  $file = fopen(&quot;light.json&quot;, &quot;w&quot;) or die(&quot;can't open file&quot;);
  fwrite($file, '{&quot;light&quot;: &quot;off&quot;}');
  fclose($file);
}
?&gt;

&lt;a href=&quot;?light=on&quot;&gt;Turn On&lt;/a&gt;  
&lt;a href=&quot;?light=off&quot;&gt;Turn Off&lt;/a&gt;  
&lt;div&gt;  
  &lt;?php
    if($light==&quot;on&quot;) {
      echo(&quot;Turn LED on.&quot;);
    }
    else if ($light==&quot;off&quot;) {
      echo(&quot;Turn LED off.&quot;);
    }
    else {
      echo (&quot;Do something.&quot;);
    }
  ?&gt;
&lt;/div&gt;  
```
  &lt;/div&gt;
  &lt;div class=&quot;guide-text&quot;&gt;
    &lt;h2 class=&quot;guide-title&quot;&gt;Step 2: PHP &lt;small&gt;&lt;a href=&quot;https://raw.githubusercontent.com/neuralfirings/esp8266led/master/www/index.php&quot;&gt;&lt;i class=&quot;fa fa-cloud-download&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/small&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Button links to page with url parameters light=on or light=off&lt;/li&gt;
&lt;li&gt;PHP looks for URL parameters and writes to light.json&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;div class=&quot;guide-step&quot;&gt;  
  &lt;div class=&quot;guide-images&quot;&gt;
    &lt;img src=&quot;http://blog.nyl.io//content/images/2015/08/espled_flashmode.png&quot; data-caption=&quot;&quot; /&gt;
  &lt;/div&gt;
  &lt;div class=&quot;guide-text&quot;&gt;
    &lt;h2 class=&quot;guide-title&quot;&gt;Step 3. Wire Things Up in Flash Mode&lt;/h2&gt;
    

&lt;ul&gt;
&lt;li&gt;ESP's VCC &amp;gt; VCC&lt;/li&gt;
&lt;li&gt;ESP's CH_PD &amp;gt; VCC&lt;/li&gt;
&lt;li&gt;ESP's GND &amp;gt; GND&lt;/li&gt;
&lt;li&gt;ESP's RX &amp;gt; FTDI's TX&lt;/li&gt;
&lt;li&gt;ESP's TX &amp;gt; FTDI's RX&lt;/li&gt;
&lt;li&gt;ESP's GPIO0 &amp;gt; GND&lt;br /&gt;(indicate flash mode)&lt;/li&gt;
&lt;li&gt;LED's GND &amp;gt; GND&lt;/li&gt;
&lt;li&gt;LED's PWR &amp;gt; ESP's GPIO2&lt;/li&gt;
&lt;/ul&gt;

  &lt;/div&gt;
&lt;/div&gt;


&lt;div class=&quot;guide-step&quot;&gt;  
  &lt;div class=&quot;guide-images&quot;&gt;
    &lt;img src=&quot;http://blog.nyl.io/content/images/2015/07/arduino_pref.jpg&quot; data-caption=&quot;Install ESP: Preferences&quot; /&gt;
    &lt;img src=&quot;http://blog.nyl.io/content/images/2015/07/arduino_boardmanagerurl.jpg&quot; data-caption=&quot;Install ESP: Add Board Manager URL&quot; /&gt;

    &lt;img src=&quot;http://blog.nyl.io/content/images/2015/08/arduino_esp_setup.jpg&quot; data-caption=&quot;Install ESP: Set Options for ESP8266&quot; /&gt;

  &lt;/div&gt;
  &lt;div class=&quot;guide-text&quot;&gt;
    &lt;h2 class=&quot;guide-title&quot;&gt;Step 4. Install ESP in the Arduino IDE&lt;/h2&gt;

Install ESP8266 Board
&lt;ul&gt;
&lt;li&gt; Go to preferences&lt;/li&gt;
&lt;li&gt; Copy &lt;a href=&quot;http://arduino.esp8266.com/package_esp8266com_index.json&quot;&gt;this link's url&lt;/a&gt; into &quot;Additional Board Manager URLs&quot; box&lt;/li&gt;
&lt;li&gt;Click OK&lt;/li&gt;
&lt;/ul&gt;
Update Settings
&lt;ul&gt;
&lt;li&gt;Board: Generic ESP8266&lt;/li&gt;
&lt;li&gt;CPU Frequency: 80 MHz&lt;/li&gt;
&lt;li&gt;Flash size: 4M&lt;/li&gt;
&lt;li&gt;Upload speed: 115200&lt;/li&gt;
&lt;li&gt;Port: my USB port (this shows up once you plugged everything in)&lt;/li&gt;
&lt;li&gt;Programmer: AVRISP mkll&lt;/li&gt;
&lt;/ul&gt;


  &lt;/div&gt;
&lt;/div&gt;



&lt;div class=&quot;guide-step&quot;&gt;  
  &lt;div class=&quot;guide-main&quot;&gt;

```
#include &lt;esp8266wifi.h&gt;
#include &lt;arduinojson.h&gt;

const char* ssid     = &quot;&quot;;  
const char* password = &quot;&quot;;

const char* host     = &quot;&quot;; // Your domain  
String path          = &quot;/path/to/light.json&quot;;  
const int pin        = 2;

void setup() {  
  pinMode(pin, OUTPUT); 
  pinMode(pin, HIGH);
  Serial.begin(115200);

  delay(10);
  Serial.print(&quot;Connecting to &quot;);
  Serial.println(ssid);

  WiFi.begin(ssid, password);
  int wifi_ctr = 0;
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(&quot;.&quot;);
  }

  Serial.println(&quot;WiFi connected&quot;);  
  Serial.println(&quot;IP address: &quot; + WiFi.localIP());
}

void loop() {  
  Serial.print(&quot;connecting to &quot;);
  Serial.println(host);
  WiFiClient client;
  const int httpPort = 80;
  if (!client.connect(host, httpPort)) {
    Serial.println(&quot;connection failed&quot;);
    return;
  }

  client.print(String(&quot;GET &quot;) + path + &quot; HTTP/1.1\r\n&quot; +
               &quot;Host: &quot; + host + &quot;\r\n&quot; + 
               &quot;Connection: keep-alive\r\n\r\n&quot;);

  delay(500); // wait for server to respond

  // read response
  String section=&quot;header&quot;;
  while(client.available()){
    String line = client.readStringUntil('\r');
    // Serial.print(line);
    // we’ll parse the HTML body here
    if (section==&quot;header&quot;) { // headers..
      Serial.print(&quot;.&quot;);
      if (line==&quot;\n&quot;) { // skips the empty space at the beginning 
        section=&quot;json&quot;;
      }
    }
    else if (section==&quot;json&quot;) {  // print the good stuff
      section=&quot;ignore&quot;;
      String result = line.substring(1);

      // Parse JSON
      int size = result.length() + 1;
      char json[size];
      result.toCharArray(json, size);
      StaticJsonBuffer&amp;lt;200&amp;gt; jsonBuffer;
      JsonObject&amp;amp; json_parsed = jsonBuffer.parseObject(json);
      if (!json_parsed.success())
      {
        Serial.println(&quot;parseObject() failed&quot;);
        return;
      }

      // Make the decision to turn off or on the LED
      if (strcmp(json_parsed[&quot;light&quot;], &quot;on&quot;) == 0) {
        digitalWrite(pin, HIGH); 
        Serial.println(&quot;LED ON&quot;);
      }
      else {
        digitalWrite(pin, LOW);
        Serial.println(&quot;led off&quot;);
      }
    }
  }
  Serial.print(&quot;closing connection. &quot;);
}  
```

  
  &lt;div class=&quot;guide-text&quot;&gt;
    &lt;h2 class=&quot;guide-title&quot;&gt;Step 5: Arduino Code &lt;small&gt;&lt;a href=&quot;https://raw.githubusercontent.com/neuralfirings/esp8266led/master/arduino/part2_parseresponse/part2_parseresponse.ino&quot;&gt;&lt;i class=&quot;fa fa-cloud-download&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/small&gt;&lt;/h2&gt;


&lt;ul&gt;
&lt;li&gt;Connect to Wifi&lt;/li&gt;
&lt;li&gt;Read light.json file&lt;/li&gt;
&lt;li&gt;Parse the JSON&lt;/li&gt;
&lt;li&gt;Turn on/off LED&lt;/li&gt;
&lt;/ul&gt;

  &lt;/div&gt;





&lt;div class=&quot;guide-step&quot;&gt;  
  &lt;div class=&quot;guide-images&quot;&gt;
    &lt;img src=&quot;http://blog.nyl.io/content/images/2015/07/esp8266_led_battery_bb.png&quot; data-caption=&quot;&quot; /&gt;
  &lt;/div&gt;
  &lt;div class=&quot;guide-text&quot;&gt;
    &lt;h2 class=&quot;guide-title&quot;&gt;Step 6. Wire Things Up in Run Mode&lt;/h2&gt;
    

&lt;ul&gt;
&lt;li&gt;ESP's VCC &amp;gt; VCC&lt;/li&gt;
&lt;li&gt;ESP's CH_PD &amp;gt; VCC&lt;/li&gt;
&lt;li&gt;ESP's GND &amp;gt; GND&lt;/li&gt;
&lt;li&gt;LED's GND &amp;gt; GND&lt;/li&gt;
&lt;li&gt;LED's PWR &amp;gt; ESP's GPIO2&lt;/li&gt;
&lt;/ul&gt;

  &lt;/div&gt;
&lt;/div&gt;

## Next Steps

There you have it! Not bad. I like it much better than the old, unorganized version. A few things I'd like to add:

* Table of Contents and the ability to link to various sections
* A way to parse this using Markdown, HTML is just... sigh...
* A way to have a carousel of images combined with code, iframes, and other custom elements
* Wrap all the guide-step classes in a guide class, then add things for displaying intro descriptions, ingredients lists, TOC, etc.

Ok. Now go make stuff.
&lt;/arduinojson.h&gt;&lt;/esp8266wifi.h&gt;&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sun, 02 Aug 2015 19:22:57 -0700</pubDate>
        <link>http://nyl.io/blog/2015/08/esp8266-led-using-guide-js/</link>
        <guid isPermaLink="true">http://nyl.io/blog/2015/08/esp8266-led-using-guide-js/</guid>
        
        
      </item>
    
      <item>
        <title>My Scrappy Guide.js</title>
        <description>&lt;p&gt;Project Github Link: https://github.com/neuralfirings/guide&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Over the past few posts, I’ve written some guides and tutorials on using the &lt;a href=&quot;http://blog.nyl.io/tag/esp8266/&quot;&gt;ESP8266 chip&lt;/a&gt;. People who read it seems to like I would like to continue publishing more of these as I venture into different hardware &amp;amp; software projects.&lt;/p&gt;

&lt;p&gt;Some projects I’d like to try: Internet Controlled Motor (continued), Keychain/Pendant Gameboy emulator, Alternative Reality App, and so on. As I go through these projects, I visit tutorial sites because the internet is how I learn things these days. Oftentimes, it’s hard to glance and get a good idea of what to do in the tutorials. Even on my own blog, I don’t think the tutorials and guides I write are that easy to parse.&lt;/p&gt;

&lt;p&gt;So I scrapped together &lt;a href=&quot;https://github.com/neuralfirings/guide&quot;&gt;Guide.js&lt;/a&gt; to make it easier to write iFixit style tutorial guide. I like their style. It forces writers to have clear images. The bullets make it seem less intimidating. The layout makes it easy to scroll through and get a rough idea before you dive in.&lt;/p&gt;

&lt;h4 id=&quot;guide-template-features&quot;&gt;Guide Template Features&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;iFixit Style Guides&lt;/strong&gt;: big images (optional carousel) on the left side and text on the right&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Responsive&lt;/strong&gt;: when the screen is smaller, the title bounce above the images and the image becomes full screen&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Extensible Main Feature&lt;/strong&gt;: Have a step that doesn’t involve images? That’s fine too. You can put whatever you want as the “main feature” of a given step&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;example-1-simple-image-based-guide&quot;&gt;Example 1: Simple Image Based Guide&lt;/h2&gt;
&lt;div class=&quot;guide-step&quot;&gt;
  &lt;div class=&quot;guide-images&quot;&gt;
    &lt;img src=&quot;http://www.nyl.io/guide/01_breadboard.jpg&quot; data-caption=&quot;Fritzing Bread Board View&quot; /&gt;
  &lt;/div&gt;
  &lt;div class=&quot;guide-text&quot;&gt;
    &lt;h2 class=&quot;guide-title&quot;&gt;Step 1&lt;/h2&gt;
    &lt;ul&gt;
      &lt;li&gt;Open Fritzing&lt;/li&gt;
      &lt;li&gt;Make sure you're in BreadBoard View&lt;/li&gt;
      &lt;li&gt;Search for components and drag in to mimic your setup&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;guide-step&quot;&gt;
  &lt;div class=&quot;guide-images&quot;&gt;
    &lt;img src=&quot;http://www.nyl.io/guide/02a_pcb_airwires.jpg&quot; data-caption=&quot;Fritzing PCB View: Airwires&quot; /&gt;
    &lt;img src=&quot;http://www.nyl.io/guide/02b_pcb_routed.jpg&quot; data-caption=&quot;All airwires are routed and board is resized&quot; /&gt;
  &lt;/div&gt;
  &lt;div class=&quot;guide-text&quot;&gt;
    &lt;h2 class=&quot;guide-title&quot;&gt;Step 2&lt;/h2&gt;
    &lt;ul&gt;
      &lt;li&gt;Switch to PCB Tab&lt;/li&gt;
      &lt;li&gt;Click on components and use Cmd+R/Ctrl+R to rotate&lt;/li&gt;
      &lt;li&gt;You can drag components around by holding down the left mouse button&lt;/li&gt;
      &lt;li&gt;Click on the wires to route and add bendpoints&lt;/li&gt;
      &lt;li&gt;Resize the board appropriately&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h4 id=&quot;the-code&quot;&gt;The Code&lt;/h4&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;div class=&quot;guide-step&quot;&gt;
  &lt;div class=&quot;guide-images&quot;&gt;
    &lt;img src=&quot;http://www.nyl.io/guide/01_breadboard.jpg&quot; data-caption=&quot;Fritzing Bread Board View&quot; /&gt;
  &lt;/div&gt;
  &lt;div class=&quot;guide-text&quot;&gt;
    &lt;h2 class=&quot;guide-title&quot;&gt;Step 1&lt;/h2&gt;
    &lt;ul&gt;
      &lt;li&gt;Open Fritzing&lt;/li&gt;
      &lt;li&gt;Make sure you're in BreadBoard View&lt;/li&gt;
      &lt;li&gt;Search for components and drag in to mimic your setup&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;guide-step&quot;&gt;
  &lt;div class=&quot;guide-images&quot;&gt;
    &lt;img src=&quot;http://www.nyl.io/guide/02a_pcb_airwires.jpg&quot; data-caption=&quot;Fritzing PCB View: Airwires&quot; /&gt;
    &lt;img src=&quot;http://www.nyl.io/guide/02b_pcb_routed.jpg&quot; data-caption=&quot;All airwires are routed and board is resized&quot; /&gt;
  &lt;/div&gt;
  &lt;div class=&quot;guide-text&quot;&gt;
    &lt;h2 class=&quot;guide-title&quot;&gt;Step 2&lt;/h2&gt;
    &lt;ul&gt;
      &lt;li&gt;Switch to PCB Tab&lt;/li&gt;
      &lt;li&gt;Click on components and use Cmd+R/Ctrl+R to rotate&lt;/li&gt;
      &lt;li&gt;You can drag components around by holding down the left mouse button&lt;/li&gt;
      &lt;li&gt;Click on the wires to route and add bendpoints&lt;/li&gt;
      &lt;li&gt;Resize the board appropriately&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;```&lt;/p&gt;

&lt;h2 id=&quot;example-2-using-different-main-components&quot;&gt;Example 2: Using different Main Components&lt;/h2&gt;

&lt;p&gt;If you want something more complex, you can also use the &lt;code&gt;guide-main&lt;/code&gt; class to put in any random thing, like code blocks or presentations (which I do using &lt;a href=&quot;https://github.com/impress/impress.js&quot;&gt;Impress.js&lt;/a&gt;… well, a hacked version I made with some added features like captioning).&lt;/p&gt;

&lt;div class=&quot;guide-step&quot;&gt;
  &lt;div class=&quot;guide-main&quot;&gt;
    &lt;pre&gt;
      &lt;code&gt;
var ua = navigator.userAgent.toLowerCase();
if(ua.search(/(iphone)|(ipod)|(android)/) != -1) {
  $(&quot;.not-for-mobile&quot;).hide();
  $(&quot;.for-mobile&quot;).show();
}
else {
  $(&quot;.not-for-mobile&quot;).show();
  $(&quot;.for-mobile&quot;).hide();
}  
      &lt;/code&gt;
    &lt;/pre&gt;
  &lt;/div&gt;
  &lt;div class=&quot;guide-text&quot;&gt;
    &lt;h2 class=&quot;guide-title&quot;&gt;Step 1: Some title&lt;/h2&gt;
    Here are some example code as the main feature. 
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;guide-step&quot;&gt;
  &lt;div class=&quot;guide-main&quot;&gt;
    &lt;div class=&quot;for-mobile&quot;&gt;
    &lt;a target=&quot;_blank&quot; href=&quot;http://nyl.io/impress/espmotor.html?mobile=on&quot;&gt;&lt;img src=&quot;http://nyl.io/impress/espmotor.png&quot; /&gt;&lt;/a&gt;
    &lt;/div&gt;

    &lt;div class=&quot;not-for-mobile&quot; style=&quot;position:relative; padding-bottom: 75%; padding-top: 25px; &quot;&gt;
    &lt;iframe class=&quot;macdown-hide&quot; frameborder=&quot;0&quot; src=&quot;http://nyl.io/impress/espmotor.html&quot; style=&quot;position: absolute; top:0; left:0; width: 100%; height: 100%&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;guide-text&quot;&gt;
    &lt;h2 class=&quot;guide-title&quot;&gt;Step 2: Some other title&lt;/h2&gt;
    &lt;p&gt;This is something made with impress.js.. well, a hacked version made for presenting with captions and some tweaked for mobile &quot;support.&quot;&lt;/p&gt;
    &lt;div class=&quot;for-mobile&quot;&gt;
      Click on the diagram on the left to go through the workflow. It will open up a new page. Once you are on the new page, click on the RIGHT SIDE of the screen to go forward, and click on the LEFT SIDE of the screen to go back. 
    &lt;/div&gt;
    &lt;div class=&quot;not-for-mobile&quot;&gt;
      Click on the diagram on the left to go through the workflow.
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h4 id=&quot;the-code-1&quot;&gt;The Code&lt;/h4&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;div class=&quot;guide-step&quot;&gt;
  &lt;div class=&quot;guide-main&quot;&gt;
    &lt;pre&gt;
      &lt;code&gt;
var ua = navigator.userAgent.toLowerCase();
if(ua.search(/(iphone)|(ipod)|(android)/) != -1) {
  $(&quot;.not-for-mobile&quot;).hide();
  $(&quot;.for-mobile&quot;).show();
}
else {
  $(&quot;.not-for-mobile&quot;).show();
  $(&quot;.for-mobile&quot;).hide();
}  
      &lt;/code&gt;
    &lt;/pre&gt;
  &lt;/div&gt;
  &lt;div class=&quot;guide-text&quot;&gt;
    &lt;h2 class=&quot;guide-title&quot;&gt;Step 1: Some title&lt;/h2&gt;
    Here are some example code as the main feature. 
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;guide-step&quot;&gt;
  &lt;div class=&quot;guide-main&quot;&gt;
    &lt;div class=&quot;for-mobile&quot;&gt;
    &lt;a target=&quot;_blank&quot; href=&quot;http://nyl.io/impress/espmotor.html?mobile=on&quot;&gt;&lt;img src=&quot;http://nyl.io/impress/espmotor.png&quot; /&gt;&lt;/a&gt;
    &lt;/div&gt;

    &lt;div class=&quot;not-for-mobile&quot; style=&quot;position:relative; padding-bottom: 75%; padding-top: 25px; &quot;&gt;
    &lt;iframe class=&quot;macdown-hide&quot; frameborder=&quot;0&quot; src=&quot;http://nyl.io/impress/espmotor.html&quot; style=&quot;position: absolute; top:0; left:0; width: 100%; height: 100%&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;guide-text&quot;&gt;
    &lt;h2 class=&quot;guide-title&quot;&gt;Step 2: Some other title&lt;/h2&gt;
    &lt;p&gt;This is something made with impress.js.. well, a hacked version made for presenting with captions and some tweaked for mobile &quot;support.&quot;&lt;/p&gt;
    &lt;div class=&quot;for-mobile&quot;&gt;
      Click on the diagram on the left to go through the workflow. It will open up a new page. Once you are on the new page, click on the RIGHT SIDE of the screen to go forward, and click on the LEFT SIDE of the screen to go back. 
    &lt;/div&gt;
    &lt;div class=&quot;not-for-mobile&quot;&gt;
      Click on the diagram on the left to go through the workflow.
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;```&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;I will use &lt;a href=&quot;https://github.com/neuralfirings/guide&quot;&gt;Guide.js&lt;/a&gt; to write guides for this blog going forward, and maybe write a Guide to the Guide. Hehe. If I want to get really fancy, create some sort of a Markdown conversion since my blog is written using Markdown.&lt;/p&gt;
</description>
        <pubDate>Sun, 02 Aug 2015 17:43:45 -0700</pubDate>
        <link>http://nyl.io/blog/2015/08/guidejs/</link>
        <guid isPermaLink="true">http://nyl.io/blog/2015/08/guidejs/</guid>
        
        
      </item>
    
      <item>
        <title>PCBs Misbehaving</title>
        <description>&lt;p&gt;I got my custom PCBs from iTEAD last week. So exciting, right?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/07/pcbmotor_pcbs.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I plugged everything in and…. WARHN warhn (failure horn 📢).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/07/failwhale.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;problem&quot;&gt;Problem&lt;/h2&gt;

&lt;p&gt;So much trouble trying to figure out what’s the issue. The LED would sometimes turn on, sometimes it wouldn’t, sometimes the LED would turn on and stay on. I think this indicated that the ESP8266 was frozen. The motor would work maybe 10% of the time. And it was all completely random. I checked my soldering for loose connections. Resoldered a few suspicious (but I think they were fine) connections. Poke and prodded this little green thing with my &lt;a href=&quot;http://amzn.to/1MuPvhT&quot;&gt;multimeter&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;root-cause-i-think-maybe&quot;&gt;Root Cause (I think? Maybe?)&lt;/h2&gt;

&lt;p&gt;I suspect it’s had something to do with my 5V Regulator. It seems to be working off a lot of heat. I didn’t have a heat sink for it. Trying to debug it let me all over the place. Sometimes it would give me a steady 5V (or 4.9V), other times it would putt along at a 4.2V. I suspect this might be because my 9V battery was losing too much juice too quickly. The 5V Regulator I used (&lt;a href=&quot;https://www.adafruit.com/products/2164&quot;&gt;7805 TO-220&lt;/a&gt;) needs a minimum of 7V to output a consistent 5V, according to Adafruit product description. So 4.2V output is no go since the L293D motor driver has a minimum supply voltage of 4.5V (and a max of 36!) so that was a no go.&lt;/p&gt;

&lt;p&gt;The other problem was my LED. I got some LED that came with built in resistors, but I think when I soldered them in I soldered them above where the resistor were. So I had to redo the LED. I used a handy white LED the second time since white LEDs have the highest forward voltage. I ended up tearing up the copper traces during this “fix” and had to solder in wires manually (see pic below).&lt;/p&gt;

&lt;h2 id=&quot;solution-ish&quot;&gt;Solution (ish)&lt;/h2&gt;

&lt;p&gt;To solve the 5V Regulator problem I decided to just F it and use a different battery pack. I got out my handy 4 AA battery. This starts at a 6V and works its way down to a 4.4V. With a fresh set of batteries it’s a little too high for the ATtiny85 chip, which has a max supply voltage of 5.5V. However, it doesn’t stay at 6V for long and the batteries I’m using is definitely not at 6V. I then added a manual wire connection between the Input on the 5V regulator and the VCC on the L293D chip. Basically, I bypassed the 5V regulator and plugged the power source directly onto the ATtiny85 and L293D Motor Driver.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/07/pcbmotor_hack_comments.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s probably not the safest or the smartest thing to do. BUT IT WORKS! It’s so beautiful it works. And it’s tidy.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Before (breadboard):&lt;/strong&gt;
&lt;img src=&quot;/content/images/2015/07/pcbmotor_prepcb.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;After (custom PCB):&lt;/strong&gt;
&lt;img src=&quot;/content/images/2015/07/pcbmotor_setup.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So tidy. Much tiny.&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;To get these components in their comfortable range of operation, I’ll try routing the ESP8266 (&amp;amp; LED) and ATtiny85 through a 3V Regulator and leave the L293D Motor Driver (&amp;amp; Stepper Motor) directly connected to the 9V Battery.&lt;/p&gt;

&lt;table style=&quot;font-size: 0.7em&quot;&gt;
&lt;tr&gt;&lt;th&gt;Component&lt;/th&gt;&lt;th&gt;Min Supply Voltage&lt;/th&gt;&lt;th&gt;Max Supply Voltage&lt;/th&gt;&lt;th&gt;Current Power&lt;/th&gt;&lt;th&gt;Proposed Power&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;ESP8266&lt;/td&gt;&lt;td&gt;3.3V&lt;/td&gt;&lt;td&gt;3.6V&lt;/td&gt;&amp;lt;td colspan=2 style=&quot;text-align: center&quot;&amp;gt;3V Regulator&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;LED&lt;/td&gt;&lt;td&gt;2.5V&lt;/td&gt;&lt;td&gt;3.2V&lt;/td&gt;&amp;lt;td colspan=2 style=&quot;text-align: center&quot;&amp;gt;ESP8266 (3.2 V on HIGH)&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;ATtiny85&lt;/td&gt;&lt;td&gt;1.8V&lt;/td&gt;&lt;td&gt;5.5V&lt;/td&gt;&lt;td&gt;5V Regulator&lt;/td&gt;&lt;td&gt;3V Regulator&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;L293D Motor Driver&lt;/td&gt;&lt;td&gt;4.6V&lt;/td&gt;&lt;td&gt;36V&lt;/td&gt;&lt;td&gt;5V Regulator&lt;/td&gt;&lt;td&gt;Battery (4.4-9V)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Stepper Motor&lt;/td&gt;&lt;td&gt;5V&lt;/td&gt;&lt;td&gt;5V&lt;/td&gt;&amp;lt;td colspan=2 style=&quot;text-align: center&quot;&amp;gt;L293D&lt;/tr&gt;
&lt;/table&gt;

&lt;h2 id=&quot;also-next-steps&quot;&gt;Also Next Steps&lt;/h2&gt;

&lt;p&gt;Rather than waiting another two weeks to get a PCB, I’m researching how to etch my own PCB at home. It seems like a huge hassle, but I figure it’s probably worth being able to rapidly prototyping board after board.&lt;/p&gt;

&lt;p&gt;The problem is I’m woefully undersupply. I looked into it, and I’ll need something like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Drill press (for the through holes and vias)&lt;/li&gt;
  &lt;li&gt;Feric Chloride (sp?) for etching away the copper&lt;/li&gt;
  &lt;li&gt;FR4 Copper Boards&lt;/li&gt;
  &lt;li&gt;Safety stuff: gloves, goggles, work mask&lt;/li&gt;
  &lt;li&gt;Laser printer (or more chemicals that I’ll probably splash on things I shouldn’t splash weird chemicals on. Like &lt;a href=&quot;http://ajaxthedog.com&quot;&gt;my dog&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Some tool to cut the FR4 material&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If I want to get fancy, I might need:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Laminator&lt;/li&gt;
  &lt;li&gt;A bunch of sheets that does fancy transfer things&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Seems like a lot of stuff.&lt;/p&gt;

&lt;p&gt;Is it worth it?&lt;/p&gt;
</description>
        <pubDate>Sun, 26 Jul 2015 17:27:29 -0700</pubDate>
        <link>http://nyl.io/blog/2015/07/pcbs-misbehaving/</link>
        <guid isPermaLink="true">http://nyl.io/blog/2015/07/pcbs-misbehaving/</guid>
        
        
      </item>
    
  </channel>
</rss>
